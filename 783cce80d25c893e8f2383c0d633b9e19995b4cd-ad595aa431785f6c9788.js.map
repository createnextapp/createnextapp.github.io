{"version":3,"sources":["webpack:///./src/components/codeExamples/formWizard.ts","webpack:///./src/data/en/advanced.tsx","webpack:///./src/components/TabGroup.tsx","webpack:///./src/components/TabGroup.module.css","webpack:///./src/data/jp/advanced.tsx","webpack:///./src/components/codeExamples/form.ts","webpack:///./src/data/es/advanced.tsx","webpack:///./src/data/ru/advanced.tsx","webpack:///./src/data/advanced.tsx","webpack:///./src/components/AdvancedPage.tsx","webpack:///./src/components/codeExamples/fieldArray.ts","webpack:///./src/components/codeExamples/schemaValidation.ts","webpack:///./src/components/codeExamples/connectForm.ts","webpack:///./src/components/codeExamples/formContextPerformance.ts","webpack:///./src/components/codeExamples/unregisterWrapControlledComponent.tsx","webpack:///./src/components/codeExamples/unregisterControlledComponent.tsx","webpack:///./src/components/codeExamples/controlledMixedUncontrolledInput.ts","webpack:///./src/components/codeExamples/controlledMixedUncontrolled.ts","webpack:///./src/components/codeExamples/accessibleCodeBase.ts","webpack:///./src/components/codeExamples/virtualizedList.ts","webpack:///./src/components/SideMenu.tsx","webpack:///./src/data/pt/advanced.tsx","webpack:///./src/components/codeExamples/input.ts","webpack:///./src/data/zh/advanced.tsx","webpack:///./src/data/kr/advanced.tsx","webpack:///./src/components/codeExamples/useFieldArray.ts","webpack:///./src/components/SideMenu.module.css","webpack:///./src/components/GetStarted.module.css","webpack:///./src/components/codeExamples/customHookWithValidationResolver.tsx","webpack:///./src/components/StarRepo.tsx","webpack:///./src/components/codeExamples/accessibleCodeFinal.ts","webpack:///./src/components/codeExamples/smartForm.ts"],"names":["step1","step2","step3","title","header","description","controlledMixedWithUnControlled","href","target","rel","errorMessage","register","component","optionalChaining","get","accessibility","rawData","accessibleCodeBase","accessibleCodeFinal","wizard","className","buttonStyles","links","style","textAlign","typographyStyles","note","url","smartForm","codeHeading","form","input","fieldArrays","to","schema","connectForm","conditionalControlledComponent","formContext","customHookWithValidationResolver","workingWithVirtualizedList","virtualizedList","children","buttonLabels","state","useStateMachine","React","index","setIndex","lightMode","setting","styles","buttonTabGroup","lightButtonTabGroup","marginBottom","marginTop","map","label","currentIndex","key","cursor","borderTop","disabled","onClick","child","display","module","exports","CodeArea","en","advancedEn","es","advancedEs","pt","advancedPt","kr","advancedKr","jp","advancedJp","zh","advancedZh","ru","advancedRu","useRef","advancedContent","enLinks","Advanced","defaultLang","pageContentRef","AccessibilityA11y","WizardFormFunnel","SmartFormComponent","FieldArrays","SchemaValidation","ConnectForm","FormContextPerformance","ErrorMessage","ConditionalControlledComponent","ControlledmixedwithUncontrolledComponents","CustomHookwithValidationResolver","Workingwithvirtualizedlist","language","currentLanguage","advanced","goToSection","name","window","location","hashIndex","indexOf","filterName","replace","history","pushState","substr","current","scrollIntoView","behavior","hash","setTimeout","containerStyles","container","headingWithTopMargin","id","subHeading","wrapper","SideMenu","isStatic","questionTitle","ref","width","height","src","frameBorder","allow","allowFullScreen","TabGroup","useFieldArray","getStartedStyles","installCode","copyButton","copyClipBoard","alert","generic","copy","StarRepo","Footer","activateStyle","borderBottom","colors","lightPink","activeIndex","menu","lightMenu","titleList","fontSize","color","lightBlue","rawLink","link","enLink","linkName","startsWith","test","includes","toLowerCase","code","top","position","paddingLeft","marginLeft","length","borderLeft","paddingTop","arrow","arrowLast","left","codeExample","centerContent","maxWidth","needYourSupport","primaryButton","open","margin","buttonText"],"mappings":"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","file":"783cce80d25c893e8f2383c0d633b9e19995b4cd-ad595aa431785f6c9788.js","sourcesContent":["export const step1 = `import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Result from \"./Result\";\n\nimport \"./styles.css\";\n\ncreateStore({\n  data: {}\n});\n\nexport default function App() {\n  return (\n    <StateMachineProvider>\n      <h1>Page Form Wizard</h1>\n\n      <Router>\n        <Route exact path=\"/\" component={Step1} />\n        <Route path=\"/step2\" component={Step2} />\n        <Route path=\"/result\" component={Result} />\n      </Router>\n    </StateMachineProvider>\n  );\n}\n`\n\nexport const step2 = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { withRouter } from \"react-router-dom\";\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"./updateAction\";\n\nconst Step1 = props => {\n  const { register, handleSubmit } = useForm();\n  const { action } = useStateMachine(updateAction);\n  const onSubmit = data => {\n    action(data);\n    props.history.push(\"./step2\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h2>Step 1</h2>\n      <label>\n        First Name:\n        <input name=\"firstName\" ref={register} />\n      </label>\n      <label>\n        Last Name:\n        <input name=\"lastName\" ref={register} />\n      </label>\n      <input type=\"submit\" />\n    </form>\n  );\n};\n\nexport default withRouter(Step1);\n`\n\nexport const step3 = `import React from \"react\";\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"./updateAction\";\n\nconst Step1 = props => {\n  const { state } = useStateMachine(updateAction);\n\n  return (\n    <>\n      <h2>Result:</h2>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </>\n  );\n};`\n","import * as React from \"react\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\nimport { Link as PageLink } from \"gatsby\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\n\nexport default {\n  title: \"Advanced Usage\",\n  header: {\n    title: \"Advanced\",\n    description: \"Build complex and accessible forms with React Hook Form.\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"Controlled mixed with Uncontrolled Components\",\n    description: (\n      <p>\n        React Hook Form embraces uncontrolled components and is also compatible\n        with controlled components. Most UI libraries are built to support only\n        controlled components, such as{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        and{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>{\" \"}\n        Besides, with React Hook Form the re-rendering of controlled component is\n        also optimized. Here is an example that combines controlled and\n        uncontrolled form validation.\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"Error Messages\",\n    description: (\n      <p>\n        Error messages are visual feedback to our users when there are issues\n        with their inputs. React Hook Form provides an <code>errors</code>\n        object to let you retrieve errors easily. There are several\n        different ways to improve error presentation on the screen.\n      </p>\n    ),\n    register: (\n      <>\n        You can simply pass the error message to <code>register</code>, via the\n        <code>message</code> attribute of the validation rule object, like this:\n      </>\n    ),\n    component: \"Create an <code>ErrorMessage</code> component to help display the error.\",\n    optionalChaining: (\n      <>\n        <p>\n          The <code>?.</code>{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            optional chaining\n          </a>{\" \"}\n          operator permits reading the <code>errors</code>{\" \"}\n          object without worrying about causing another error due to <code>null</code>{\" \"}\n          or <code>undefined</code>.\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n    get: (\n      <p>\n        If your project is using{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        , then you can leverage the lodash{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        function. Eg:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n  },\n  accessibility: {\n    title: \"Accessibility (A11y)\",\n    description: (\n      <>\n        <p>\n          React Hook Form has support for native form validation, which lets you\n          validate inputs with your own rules. Since most of us have to build\n          forms with custom designs and layouts, it is our responsibility to\n          make sure those are accessible (A11y).\n        </p>\n\n        <p>\n          The following code example works as intended for validation; however,\n          it can be improved for accessibility.\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          The following code example is an improved version by leveraging{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          .\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          After this improvement, the screen reader will say:{\" \"}\n          <i>“Name, edit, invalid entry, This is required.”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"Wizard Form / Funnel\",\n    description: (\n      <>\n        <p>\n          It's pretty common to collect user information through different pages\n          and sections. We recommend using a state management library to store\n          user input through different pages or sections. In this example, we\n          are going to use{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          as our state management library (you can replace it with{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>{\" \"}\n          if you are more familiar with it).\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>Step 1:</b> Set up your routes\n          and store.\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Step 2:</b> Create your pages,\n          collect and submit the data to the store and show the next page of\n          your form.\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Step 3:</b> Make your final\n          submission with all the data in the store or display the resulting\n          data.\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          Following the above pattern, you should be able to build a wizard\n          form/funnel to collect user input data from multiple pages.\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"Smart Form Component\",\n    description: (\n      <>\n        <p>\n          This idea here is that you can easily compose your form with inputs.\n          We are going to create a <code>Form</code> component to automatically\n          collect form data.\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>Let's have a look what's in each of those components.</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          The <code>Form</code> component's responsibility is to inject all{\" \"}\n          <code>react-hook-form</code> methods into the child component.\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          Those input components' responsibility is to registering them into{\" \"}\n          <code>react-hook-form</code>.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          With the <code>Form</code> component injecting{\" \"}\n          <code>react-hook-form</code>\n          's <code>props</code> into the child component, you can easily create\n          and compose complex forms in your app.\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"Field Arrays\",\n    description: (\n      <>\n        <p>\n          This is one of the best features about React Hook Form: instead of\n          importing components (like other libraries) to achieve this\n          functionality, you can leverage your existing HTML markup. The key is\n          within the <code>name</code> attribute. In React Hook Form, the{\" \"}\n          <code>name</code> attribute represents the data structure you want to\n          use.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> we have also built a\n          custom hook for complex scenario:{\" \"}\n          <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>.\n        </p>\n\n        <p>\n          The following example demonstrates how you can create Field Arrays by\n          manipulating the input <code>name</code> attribute.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> if your application\n          requires functionality such as Delete, Insert, Append, Preprend, here\n          is the{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            link for such implementation.\n          </a>{\" \"}\n          with <PageLink to={\"/api#Controller\"}>Controller</PageLink>.\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"Schema Validation\",\n    description: (\n      <>\n        <p>\n          React Hook Form supports schema-based form validation with{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          , where you can pass your <code>validationSchema</code> to{\" \"}\n          <a href=\"/api#useForm\">useForm</a> as an optional config. React Hook\n          Form will validate your input data against the schema and return with\n          either <a href=\"/api#errors\">errors</a> or a valid result.\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>Step 1:</b> Install{\" \"}\n          <code>Yup</code> into your project.\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>Step 2:</b> Prepare your schema for\n        validation and register inputs with React Hook Form.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"Connect Form\",\n    description: (\n      <p>\n        When we are building forms, there are times when our input lives inside\n        of deeply nested component trees, and that's when{\" \"}\n        <a href=\"/api#useFormContext\">FormContext</a> comes in very handy.\n        However, we can further improve the Developer Experience by creating a{\" \"}\n        <code>ConnectForm</code> component and leveraging React's{\" \"}\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>.\n        The benefit of such a component is you can connect your input with React\n        Hook Form from anywhere.\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"Conditional Controlled Component\",\n    description: (\n      <>\n        <p>\n          React Hook Form makes dealing with conditional fields really simple\n          because when you remove the input from the component tree,\n          it will get <code>unregister</code>ed automatically.{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Here is an example\n          </a>{\" \"}\n          for such behavior. However, that's not the same case for controlled\n          components since <code>ref</code> is not been registered, and we can\n          do the following:\n        </p>\n        <ul>\n          <li>\n            <p>\n              Import <PageLink to=\"/api#Controller\">Controller</PageLink> to\n              wrap your component and let it manage register and unregister\n            </p>\n          </li>\n          <li>\n            <p>\n              Leverage the use of{\" \"}\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>{\" \"}\n              with custom register\n            </p>\n          </li>\n        </ul>\n        <p> Here are the examples:</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"FormContext Performance\",\n    description: (\n      <p>\n        React Hook Form's{\" \"}\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> is built upon{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          React's Context\n        </a>{\" \"}\n        API. It solves the problem where data is passed through the component\n        tree without having to pass props down manually at every level. This\n        also causes the component tree to trigger a re-render when React Hook\n        Form triggers a state update, but we can still can optimise our App if\n        required via the example below.\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook with Validation Resolver\",\n    description: (\n      <>\n        <p>\n          You can build a custom hook as a validation resolver. A custom hook\n          can easily integrate with yup/Joi/Superstruct as a validation method,\n          and to be used inside validation resolver.\n        </p>\n        <ul>\n          <li>\n            Define a memoized validation schema (or define it outside your\n            component if you don't have any dependencies)\n          </li>\n          <li>Use the custom hook, by passing the validation schema</li>\n          <li>Pass the validation resolver to the useForm hook</li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized lists\",\n    description: (\n      <>\n        <p>\n          Imagine a scenario where you have a table of data. This table might\n          contain hundreds or thousands of rows, and each row will have inputs.\n          A common practice is to only render the items that are in the\n          viewport, however this will cause issues as the items are removed from\n          the DOM when they are out of view, and re-added. This will cause items\n          to reset to their default values when they re-enter the viewport.\n        </p>\n\n        <p>\n          To work around this, you can manually register the fields, and then\n          programatically set the value of the field.\n        </p>\n\n        <p>\n          An example is shown below using{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport { useStateMachine } from \"little-state-machine\"\nimport styles from \"./TabGroup.module.css\"\n\nexport default ({ children, buttonLabels }) => {\n  const { state } = useStateMachine()\n  const [index, setIndex] = React.useState(0)\n  const lightMode = state?.setting?.lightMode\n\n  return (\n    <div>\n      <div\n        className={`${styles.buttonTabGroup} ${\n          lightMode ? styles.lightButtonTabGroup : \"\"\n        }`}\n        style={{ marginBottom: -15, marginTop: 30 }}\n      >\n        {buttonLabels.map((label, currentIndex) => (\n          <button\n            key={label}\n            style={{\n              ...(currentIndex === index\n                ? { cursor: \"default\", borderTop: \"1px solid transparent\" }\n                : {}),\n            }}\n            disabled={currentIndex === index}\n            onClick={() => setIndex(currentIndex)}\n          >\n            {label}\n          </button>\n        ))}\n      </div>\n      {children.map((child, currentIndex) => {\n        return (\n          <div\n            key={currentIndex}\n            style={{\n              display: index === currentIndex ? \"block\" : \"none\",\n            }}\n          >\n            {child}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonTabGroup\":\"TabGroup-module--buttonTabGroup--2yFrr\",\"lightButtonTabGroup\":\"TabGroup-module--lightButtonTabGroup--2_pAv\"};","import * as React from \"react\"\nimport { Link as PageLink } from \"gatsby\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"高度な使用法\",\n  header: {\n    title: \"高度な使用法\",\n    description:\n      \"React Hook Formを使用して、複雑でアクセス可能なフォームを構築する。\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"制御されたコンポーネントと非制御コンポーネントの組み合わせ\",\n    description: (\n      <p>\n        React Hook Form は、非制御コンポーネントをサポートしていますが、\n        制御されたコンポーネントとも互換性があります。{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        や{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>{\" \"}\n        などの UI ライブラリのほとんどは、\n        制御されたコンポーネントのみをサポートして構築されています。\n        さらに、React Hook Form{\" \"}\n        を使用することで制御されたコンポーネントの再レンダリングも最適化されます。\n        下記は、制御されたコンポーネントと非制御コンポーネントのフォームバリデーションを組み合わせた例です。\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"エラーメッセージ\",\n    description: (\n      <p>\n        エラーメッセージは、入力に関連する問題があるときにユーザーに視覚的なフィードバックを与えることです。\n        React Hook Form では、エラーを簡単に取得できるように errors\n        オブジェクトを提供しています。\n        ただし、画面のレンダリングエラーを改善する方法はいくつかあります。\n      </p>\n    ),\n    register: (\n      <>\n        <code>register</code> 時にエラーメッセージを埋め込み、{\" \"}\n        <code>value</code>{\" \"}\n        属性にエラーメッセージを簡単に挿入することができます。例：\n      </>\n    ),\n    component:\n      \"エラー出力を支援するために ErrorMessage コンポーネントを作成します。\",\n    get: (\n      <p>\n        プロジェクトで{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>{\" \"}\n        を使用している場合、lodash の{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        関数を活用することができます。例：\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n    optionalChaining: (\n      <>\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            Optional chaining\n          </a>{\" \"}\n          演算子である <code>?.</code> は、 <code>null</code> または{\" \"}\n          <code>undefined</code> によって発生するエラーを気にせずに{\" \"}\n          <code>errors</code> オブジェクトを読み取ることができます。\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n  },\n  accessibility: {\n    title: \"アクセシビリティ (A11y)\",\n    description: (\n      <>\n        <p>\n          React Hook Form はネイティブフォームバリデーションをサポートします。\n          これにより、独自のルールで input\n          のバリデーションを行うことができます。\n          私たちのほとんどはカスタムデザインとレイアウトを適用してフォームを構築しますが、\n          フォームのアクセシビリティ (A11y) を保証することも私たちの責任です。\n        </p>\n\n        <p>\n          下記のコードの例は、意図したとおりのバリデーションが動作しますが、\n          アクセシビリティについては改良することができます。\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          下記のコードの例は、{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>{\" \"}\n          を活用した改良版です。\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          この改良後、スクリーンリーダーはこのように話すでしょう：{\" \"}\n          <i>“Name, edit, invalid entry, This is required.”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"ウィザードフォーム・ファンネル\",\n    description: (\n      <>\n        <p>\n          異なるページやセクション間でユーザーの情報を収集することは非常に一般的です。\n          このような場合、異なるページやセクション間でのユーザーの入力値を、\n          状態管理ライブラリを使用して保存しておくことをお勧めします。\n          この例では、状態管理ライブラリとして{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          (より身近なものであれば、{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>{\" \"}\n          として置き換えることができます) を使用します。\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>ステップ1：</b>{\" \"}\n          ルーティングとストアを設定します。\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>ステップ2：</b>{\" \"}\n          ページを作成し、フォームの送信データを収集し、\n          そのデータをストアに送信して次のページに移動するようにします。\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>ステップ3：</b>{\" \"}\n          最終的に、ストア内のすべてのフォームデータを使用して、\n          フォームを送信したりフォームデータの結果を表示します。\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          上記のパターンに従って、複数のページ間でのユーザーの入力データを収集して、\n          ウィザードフォーム・ファンネルを構築できるはずです。\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"スマートフォームコンポーネント\",\n    description: (\n      <>\n        <p>\n          ここでのアイデアは、input\n          とフォームを簡単に組み合わせることができるということです。\n          <code>Form</code>{\" \"}\n          コンポーネントを作成して、フォームデータを自動的に収集します。\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>各コンポーネントがどのように構成されているか見てみましょう。</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          <code>Form</code> コンポーネントの責任は、全ての{\" \"}\n          <code>react-hook-form</code>{\" \"}\n          のメソッドを子コンポーネントに注入することです。\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          <code>Input / Select</code> コンポーネントの責任は、自分自身を{\" \"}\n          <code>react-hook-form</code> に登録することです。\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          <code>Form</code> コンポーネントを使用して、\n          <code>react-hook-form</code> の <code>props</code>{\" \"}\n          を子コンポーネントに注入することで、\n          アプリケーションで複雑なフォームを簡単に作成及び組み合わせることができます。\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"フィールド配列\",\n    description: (\n      <>\n        <p>\n          この機能は、React Hook Formが提供する最良の機能の一つです。\n          この機能を実現するために (他のライブラリのように)\n          コンポーネントをインポートする代わりに、 既存の HTML\n          マークアップを活用することができます。 key は、 <code>name</code>{\" \"}\n          属性にあります。 React Hook Form において、 <code>name</code>{\" \"}\n          属性はあなたが使用したいデータ構造を表します。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意:</b>{\" \"}\n          私たちは、複雑なシナリオのためのカスタムフック{\" \"}\n          <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>{\" \"}\n          も作成しました。\n        </p>\n\n        <p>\n          下記の例は、input の <code>name</code>{\" \"}\n          属性を操作してどのようにフィールド配列を作成できるかを示しています。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          アプリケーションにフィールドの削除や挿入、追加、先頭に追加などの機能が必要な場合は、{\" \"}\n          <PageLink to={\"/api#Controller\"}>Controller</PageLink> を使用した\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            実装のリンク\n          </a>\n          を参照して下さい。\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"スキーマバリデーション\",\n    description: (\n      <>\n        <p>\n          React Hook Form は、{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>{\" \"}\n          を活用してスキーマベースのフォームバリデーションをサポートしています。\n          省略可能な引数として <code>validationSchema</code> を{\" \"}\n          <a href=\"/api#useForm\">useForm</a> に渡すことができます。 React Hook\n          Form は、入力されたデータをスキーマに対してバリデーションを行い、{\" \"}\n          <a href=\"/api#errors\">errors</a> や妥当な結果を返します。\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>ステップ1：</b> <code>Yup</code>{\" \"}\n          をプロジェクトにインストールします。\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>ステップ2：</b>{\" \"}\n        バリデーション用のスキーマを作成し、 React Hook Form を使用して input\n        を登録します。\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"接続フォーム\",\n    description: (\n      <p>\n        フォームを作成するときに、深くネストされたコンポーネントツリーの中に\n        input が存在することがあり、 そのような場合は{\" \"}\n        <a href=\"/api#useFormContext\">FormContext</a> が非常に便利です。\n        <code>ConnectForm</code> コンポーネントを作成して React の\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>{\" \"}\n        を活用することで、 DX を更に向上することができます。{\" \"}\n        <code>ConnectForm</code> コンポーネントの利点は、input をどこからでも\n        React Hook Form に接続できることです。\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"条件付き制御されたコンポーネント\",\n    description: (\n      <>\n        <p>\n          React Hook Form\n          を使用すると、条件付きフィールドを非常にシンプルに扱えます。 input\n          がコンポーネントツリーから削除されると、自動的に{\" \"}\n          <code>unregister</code> されるからです。 そのような動作を\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            こちらの例に示します\n          </a>{\" \"}\n          。ただし、制御されたコンポーネントでは <code>ref</code>{\" \"}\n          が登録されていないため、 同じように自動的に登録解除されません。\n          対処方法は下記の通りです。\n        </p>\n        <ul>\n          <li>\n            <p>\n              <PageLink to=\"/api#Controller\">Controller</PageLink>{\" \"}\n              をインポートしてコンポーネントをラップし、\n              登録および登録解除を管理できるようにします\n            </p>\n          </li>\n          <li>\n            <p>\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>{\" \"}\n              を使用して、カスタム登録として input を登録し、\n              コンポーネントのアンマウント後に登録を解除します\n            </p>\n          </li>\n        </ul>\n        <p>下記に例を示します：</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"FormContext パフォーマンス\",\n    description: (\n      <p>\n        React Hook Form の{\" \"}\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> は、{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          React の Context API\n        </a>{\" \"}\n        上に構築されています。 これにより、全ての階層で手動で props\n        を渡す必要なく、\n        コンポーネントツリーを介してデータを渡す問題を解決します。\n        これにより、React Hook Form は状態を更新する度に、\n        コンポーネントツリーが再レンダリングされる問題を引き起こしますが、\n        必要に応じて下記の例のようにアプリを最適化することができます。\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook with Validation Resolver\",\n    description: (\n      <>\n        <p>\n          You can build a custom hook as a validation resolver. A custom hook\n          can easily integration with yup/Joi/Superstruct as a validation\n          method, and to be used inside validation resolver.\n        </p>\n        <ul>\n          <li>\n            Define a memoized validation schema (or define it outside your\n            component if you don't have any dependencies)\n          </li>\n          <li>Use the custom hook, by passing the validation schema</li>\n          <li>Pass the validation resolver to the useForm hook</li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized list\",\n    description: (\n      <>\n        <p>\n          Imagine a scenario where you have a table of data. This table might\n          contain hundreds or thousands of rows, and each row will have inputs.\n          A common practice is to only render the items that are in the\n          viewport, however this will cause issues as the items are removed from\n          the DOM when they are out of view, and re-added. This will cause items\n          to reset to their default values when they re-enter the viewport.\n        </p>\n\n        <p>\n          To work around this, you can manually register the fields, and then\n          programatically set the value of the field.\n        </p>\n\n        <p>\n          An example is shown below using{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function Form({ defaultValues, children, onSubmit }) {\n  const methods = useForm({ defaultValues });\n  const { handleSubmit } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {Array.isArray(children)\n        ? children.map(child => {\n            return child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register: methods.register,\n                    key: child.props.name\n                  }\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n}\n`\n","import * as React from \"react\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport { Link as PageLink } from \"gatsby\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"Uso avanzado\",\n  header: {\n    title: \"Avanzado\",\n    description:\n      \"Construye formularios complejos y accesibles con React Hook Form.\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"Componentes controlados y no controlados mezclados\",\n    description: (\n      <p>\n        React Hook Form se basa en componentes no controlados pero también es\n        compatible con componentes controlados. La mayoria de las librerías de\n        UI están hechas para soportar solo componentes controlados, como{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        y{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>{\" \"}\n        Además, con React Hook Form la renderización de componentes controlados\n        también es optimizada. Aquí hay un ejemplo en el que combinamos\n        validación de formularios controlada y no controlada.\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"Mensaje de error\",\n    description: (\n      <p>\n        Los mensajes de error sirven de feedback visual para nuestros usuarios\n        cuando hay problemas asociados con sus inputs. React Hook Form,\n        proporciona un objeto de errores para que puedas recuperar errores\n        fácilmente. Sin embargo, hay diferentes formas de mejorar el renderizado\n        de errores en la pantalla.\n      </p>\n    ),\n    register: (\n      <>\n        Incrustar el mensaje de error durante el <code>registro</code>, puedes\n        insertar facilmente el mensaje de error en el atributo{\" \"}\n        <code>value</code>. Ej:\n      </>\n    ),\n    component: \"Cree un componente ErrorMessage para imprimir el error.\",\n    optionalChaining: (\n      <>\n        <p>\n          El operador de{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            encadenamiento opcional\n          </a>{\" \"}\n          <code>?.</code> permite leer el objeto de <code>errors</code> sin\n          tener que preocuparte por causar un error debido a <code>null</code> o{\" \"}\n          <code>undefined</code>.\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n    get: (\n      <p>\n        Si tu proyecto esta utilizando{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        , entonces puedes aprovechar la funcion{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        de lodash. Ej:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n  },\n  accessibility: {\n    title: \"Accesibilidad (A11y)\",\n    description: (\n      <>\n        <p>\n          React Hook Form tiene soporte para validación de formularios nativa,\n          lo que permite validar inputs con tus propias reglas, ya que la\n          mayoría de nosotros tenemos que crear formularios con un layout y\n          diseño personalizados, y es nuestra responsabilidad el asegurarnos que\n          nuestros formularios son accesibles (A11y).\n        </p>\n\n        <p>\n          El siguiente ejemplo de código funciona para la validación; sin\n          embargo, se puede mejorar para la accesibilidad.\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          El siguiente código de ejemplo es una versión mejorada al aprovechar{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          .\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          Luego de esta mejora, el lector de pantalla dirá: {\"\"}\n          <i> \"Nombre, edición, entrada no válida, esto es obligatorio\". </i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"Asistente de formulario / Funnel\",\n    description: (\n      <>\n        <p>\n          Es bastante común recopilar información del usuario a través de\n          diferentes páginas y secciones. Recomendamos utilizar una librería de\n          manejo de estados para almacenar las entradas del usuario a través de\n          diferentes páginas / secciones. En este ejemplo, vamos a usar{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          como nuestra libería de manejo de estados (la puedes reemplazar con{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>\n          , si estás más familiarizado).\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>Paso 1:</b> Configura tus rutas y\n          tu store.\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Paso 2:</b> Crea tus páginas, haz\n          que recoja sus datos, envia esos datos al store y pasa a la siguiente\n          página del formulario.\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Paso 3:</b> Realiza el submit\n          final con todos los datos en el store o muestra los datos resultantes.\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          Siguiendo el patrón anterior, deberías poder crear un asistente de\n          formulario para recopilar datos de entrada del usuario de varias\n          páginas.\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"Componente de formulario inteligente\",\n    description: (\n      <>\n        <p>\n          La idea aquí es que puedas componer fácilmente tu formulario con\n          entradas. Vamos a crear un componente de <code> Formulario </code>{\" \"}\n          para recopilar automáticamente los datos del formulario.\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>Veamos qué hay en cada uno de esos componentes.</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          La responsabilidad del componente <code>Form</code> es inyectar todos\n          los métodos de <code>react-hook-form</code> en el componente hijo.\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          La responsabilidad de los componentes Input es registrarse en {\"\"}\n          <code> react-hook-form </code>.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          Con el componente <code>Form</code> inyectando las{\" \"}\n          <code>propiedades</code>\n          de <code>react-hook-form</code> en el componente hijo, puedes crear y\n          componer formularios complejos en tu aplicación.\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"Field Arrays\",\n    description: (\n      <>\n        <p>\n          Esta es una de las mejores características de React Hook Form: en\n          lugar de importar componentes (como otras librerías) para lograr esta\n          funcionalidad, puedes aprovechar HTML. La clave está en el atributo{\" \"}\n          <code>name</code>. En React Hook Form, el atributo <code>name</code>{\" \"}\n          representa la estructura de datos que deseas usar.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> we have also build a\n          custom hook for complex scenario:{\" \"}\n          <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>.\n        </p>\n\n        <p>\n          El siguiente ejemplo muestra cómo puedes crear Field Arrays\n          manipulando el atributo <code>name</code> del input.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota:</b> si tu aplicación\n          necesita funcionalidad como: Eliminar, Insertar, Anexar, Anteponer.\n          Aquí esta el{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            link para esa implementación.\n          </a>{\" \"}\n          con <PageLink to={\"/api#Controller\"}>Controller</PageLink>.\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"Validación del Schema\",\n    description: (\n      <>\n        <p>\n          React Hook Form soporta validación de formularios basada en esquemas\n          con{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          , donde puedes pasar tu <code>validationSchema</code> a{\" \"}\n          <a href=\"/api#useForm\">useForm</a> como configuración opcional. React\n          Hook Form validará los datos de tus inputs contra el esquema y\n          retornará los <a href=\"/api#errors\">errores</a> o el resultado válido\n          según corresponda.\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>Paso 1:</b> Agregá{\" \"}\n          <code>Yup</code> en tu proyecto.\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>Paso 2:</b>Crea tu esquema de\n        validación y registra los inputs en React Hook Form.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"Connect Form\",\n    description: (\n      <p>\n        Cuando creamos formularios, hay momentos en que nuestros inputs están\n        dentro de árboles de componentes profundamente anidados, y ahí es cuando{\" \"}\n        {\"\"}\n        <a href=\"/api#useFormContext\">FormContext</a> resulta útil. Sin embargo,\n        podemos mejorar aún más la experiencia del desarrollador creando un\n        componente {\"\"} <code>ConnectForm</code> y aprovechando{\" \"}\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a> de\n        React. El beneficio de este componente es que puede conectar tus inputs\n        con React Hook Form desde cualquier lugar.\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"Componente controlado condicional\",\n    description: (\n      <>\n        <p>\n          En términos de campos condicionales, React Hook Form lo hace realmente\n          simple, al momento en que elimines el input del árbol de componentes,\n          este será <code>desregistrado</code> automáticamente,{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            aquí hay un ejemplo\n          </a>{\" \"}\n          de ese comportamiento. Sin embargo, este no es el mismo caso para\n          componentes controlados ya que <code>ref</code> no ha sido registrado,\n          podemos hacer lo siguiente:\n        </p>\n        <ul>\n          <li>\n            <p>\n              Importa <PageLink to=\"/api#Controller\">Controller</PageLink> para\n              wrappear tu componente y deja que Controller maneje el registro y\n              desregistro\n            </p>\n          </li>\n          <li>\n            <p>\n              Aprovecha el uso de{\" \"}\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>{\" \"}\n              con registro personalizado\n            </p>\n          </li>\n        </ul>\n        <p> Aquí están los ejemplos:</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"Performance de FormContext\",\n    description: (\n      <p>\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> de React Hook\n        Form está construído sobre la API de{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          React's Context\n        </a>{\" \"}\n        . Resuelve el problema donde los datos pasan a través de un árbol de\n        componentes sin tener que pasar propiedades manualmente en todos los\n        niveles. Esto hace que el árbol de componentes active una nueva\n        renderización cuando React Hookv Form dispara una actualización de\n        estado, pero aún podemos optimizar nuestra aplicación si es necesario\n        como en el ejemplo a continuación.\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook with Validation Resolver\",\n    description: (\n      <>\n        <p>\n          Puede crear un enlace personalizado como un solucionador de\n          validación. Un gancho personalizado puede integrarse fácilmente con\n          yup / Joi / Superstruct como validación método, y para ser utilizado\n          dentro de la resolución de validación.\n        </p>\n        <ul>\n          <li>\n            Defina un esquema de validación memorable (o defínalo fuera de su\n            componente si no tiene dependencias)\n          </li>\n          <li>Use el enlace personalizado, pasando el esquema de validación</li>\n          <li>Pase la resolución de validación al gancho useForm </li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized list\",\n    description: (\n      <>\n        <p>\n          Imagine un escenario en el que tiene una tabla de datos. Esta tabla\n          puede contienen cientos o miles de filas, y cada fila tendrá entradas.\n          Una práctica común es representar solo los elementos que están en el\n          ventana gráfica, sin embargo, esto causará problemas ya que los\n          elementos se eliminan de el DOM cuando están fuera de la vista y se\n          vuelven a agregar. Esto causará artículos para restablecer sus valores\n          predeterminados cuando vuelven a ingresar a la ventana gráfica.\n        </p>\n\n        <p>\n          Para evitar esto, puede registrar manualmente los campos y luego\n          establece programáticamente el valor del campo.\n        </p>\n\n        <p>\n          A continuación se muestra un ejemplo usando{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport { Link as PageLink } from \"gatsby\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"Сложные примеры\",\n  header: {\n    title: \"Сложные примеры\",\n    description: \"Стройте сложные и доступные формы с React Hook Form.\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"Управляемые вместе с неуправляемыми компонентами\",\n    description: (\n      <p>\n        React Hook Form работает с неуправляемыми компонентами, а так же\n        совместим с управляемыми компонентами. Большинство UI библиотем\n        построены на поддержке только управляемых компонентов, таких как{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        и{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>\n        . К тому же, с React Hook Form ре-рендеринг управляемых компонентов так\n        же был оптимизирован. Ниже пример где мы комбинируем управляемую и\n        неуправляемую валидацию формы.\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"Сообщение об ошибке\",\n    description: (\n      <p>\n        Сообщения об ошибке - это визуальная обратная связь для юзеров,\n        связанная с их вводом. В React Hook Form мы предоставляем объект{\" \"}\n        <code>errors</code>, чтобы вы легко могли извлечь ошибки при\n        необходимости. Однако есть несколько способов улучшить рендериг ошибок\n        на экран.\n      </p>\n    ),\n    register: (\n      <>\n        Вы можете легко передать сообщение об ошибке в <code>value</code>{\" \"}\n        атрибут во время регистрации поля ввода. Например:\n      </>\n    ),\n    component: \"Создайте ErrorMessage компонент чтобы проще выводить ошибки.\",\n    optionalChaining: (\n      <>\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            Оператор опциональной последовательности\n          </a>{\" \"}\n          <code>?.</code> позволяет читать объект <code>errors</code> без\n          необходимости беспокоиться об обращении к несуществующему свойству с{\" \"}\n          <code>null</code> или <code>undefined</code>.\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n    get: (\n      <p>\n        Если вы используете в проекте{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        , тогда вы можете использовать lodash{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        функцию. Например:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n  },\n  accessibility: {\n    title: \"Доступность (A11y)\",\n    description: (\n      <>\n        <p>\n          В React Hook Form есть поддержка нативной валидации, которая позволяет\n          валидировать поля по вашим правилам. Поскольку мы разрабатыеваем формы\n          по уникальным дизайнам и разметкам - важно, чтобы формы были\n          доступными (A11y).\n        </p>\n\n        <p>\n          Следующий пример кода работает как задумано, но может быть улучшен для\n          лучшей доступности.\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          Следующий пример кода улучшен благодаря{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          .\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          После этих изменений, скринридер скажет:{\" \"}\n          <i>“Name, edit, invalid entry, This is required.”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"Wizard Form / Funnel\",\n    description: (\n      <>\n        <p>\n          Довольно распространенный кейс хранить информацию юзера пока он\n          переходит по разным страницам/секциям. Мы рекомендуем использовать\n          библиотеки управления состоянием, для хранения введенных юзером данных\n          на разных страницах/секциях. В этом примере, мы используем{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          как библиотеку для управления состоянием (вы можете заменить ее на{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>\n          , если более знакомы с ней).\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>Шаг 1:</b> Настройте страницы и\n          хранилище.\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Шаг 2:</b> Создайте страницы,\n          настройте их так, чтобы они агрегировали данные, при клике на \"submit\"\n          данные записывались в хранилище и передавались на следующую страницу\n          формы.\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Шаг 3:</b> Настройте финальное\n          действие со всеми данными из хранилища.\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          Следуюя шаблону выше, вы сможете построить \"wizard form/funnel\" для\n          агрегации данных юзера с нескольких страниц.\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"Умный компонент Form\",\n    description: (\n      <>\n        <p>\n          В этом примере показано, как легко вы можете составить композицию\n          формы и полей ввода. Мы создадим <code>Form</code> компонент чтобы\n          автоманически собирать данные.\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>Давайте посмотрим что в каждом из этих компонентов.</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          Компонент <code>Form</code> ответственнен за передачу всех методов{\" \"}\n          <code>react-hook-form</code> дочернему компоненту.\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          Эти компоненты отвечают за их регистрацию в{\" \"}\n          <code>react-hook-form</code>.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          С <code>Form</code> компонентом, передающим{\" \"}\n          <code>react-hook-form</code> <code>props</code> дочернему компоненту,\n          вы можете легко создать сложные формы в вашем приложении.\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"Field Arrays\",\n    description: (\n      <>\n        <p>\n          Это одна из лучших особенностей React Hook Form: вместо подключения\n          сторонних библиотек, вы можете просто улучшить вашу существующую HTML\n          разметку, чтобы достичь желаемой функциональности. Вся суть в{\" \"}\n          <code>name</code> атрибуте. В React Hook Form, <code>name</code>{\" \"}\n          атрибут представляет структуру данных которую вы хотите использовать.\n        </p>\n\n        <p>\n          Следующий пример демонстрирует как вы можете создать Field Arrays\n          манипулируя <code>name</code> атрибутом на поле ввода.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Заметка:</b> если в вашем\n          приложении должна быть следующая функциональность: Delete, Insert,\n          Append, Preprend. Вы можете найти реализацию{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            по этой ссылке.\n          </a>{\" \"}\n          с <PageLink to={\"/api#Controller\"}>Controller</PageLink>.\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"Валидация по схеме\",\n    description: (\n      <>\n        <p>\n          React Hook Form поддерживает валидацию формы по схеме с{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          , где вы можете передать <code>validationSchema</code> в{\" \"}\n          <a href=\"/api#useForm\">useForm</a> как опциональную настройку. React\n          Hook Form будет валидировать ваши поля ввода по схеме и возвращать\n          либо <a href=\"/api#errors\">ошибки</a>, либо валидный результат.\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>Шаг 1:</b> Установите{\" \"}\n          <code>Yup</code> в проект.\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>Шаг 2:</b> Настройте схему данных\n        для валидации и зарегистрируйте поля ввода в React Hook Form.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"Connect Form\",\n    description: (\n      <p>\n        Когда мы строим формы, иногда поля ввода располежены глубоко в дереве\n        компонентов, для таких случаев{\" \"}\n        <a href=\"/api#useFormContext\">FormContext</a> очень полезен. Однако мы\n        можем улучшить опыт разработки созданием <code>ConnectForm</code>{\" \"}\n        компонента с комбинированием{\" \"}\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>{\" \"}\n        React'a. Плюс такого компонента в том, что вы можете подключать ваши\n        поля ввода к React Hook Form откуда угодно.\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"Условные управляемые компоненты\",\n    description: (\n      <>\n        <p>\n          React Hook Form позволяет очень легко работать с условными полями,\n          потому что в момент, когда вы убираете поле ввода из дерева\n          компонентов - оно отпишется автоматически.\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            вот пример\n          </a>{\" \"}\n          для подобного поведения. Однако это не сработает для управляемых\n          компонентов, поскольку они не зарегистрирован с помощью{\" \"}\n          <code>ref</code>, но мы можем сделать следующее:\n        </p>\n        <ul>\n          <li>\n            <p>\n              Подключить <PageLink to=\"/api#Controller\">Controller</PageLink>{\" \"}\n              чтобы обернуть компонент и позволить ему регистрацию и отписку.\n            </p>\n          </li>\n          <li>\n            <p>\n              Использовать{\" \"}\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>{\" \"}\n              с регистрацией.\n            </p>\n          </li>\n        </ul>\n        <p> Примеры использования:</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"FormContext производительность\",\n    description: (\n      <p>\n        React Hook Form{\" \"}\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> построен на{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          React Context\n        </a>{\" \"}\n        API. Он решает проблему передачи данных по дереву компонентов без\n        необходимости вручную передавать данные на каждом уровне. Это так же\n        является причиной вызова ре-рендера дерева компонентов когда React Hook\n        Form вызывает обновление состояния, но мы можем оптимизировать наше\n        приложение если необходим с помощью примера ниже.\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook with Validation Resolver\",\n    description: (\n      <>\n        <p>\n          Вы можете создать пользовательский хук в качестве решателя проверки.\n          Пользовательский крючок может легко интегрироваться с yup / Joi /\n          Superstruct в качестве проверки метод, и будет использоваться внутри\n          решателя проверки.\n        </p>\n        <ul>\n          <li>\n            Определите запомненную схему проверки (или определите ее вне\n            компонент, если у вас нет никаких зависимостей)\n          </li>\n          <li> Используйте пользовательский хук, передав схему проверки </li>\n          <li> Передайте средство проверки правильности в ловушку useForm </li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized list\",\n    description: (\n      <>\n        <p>\n          Imagine um cenário em que você tenha uma tabela de dados. Esta tabela\n          pode contém centenas ou milhares de linhas e cada linha terá entradas.\n          Uma prática comum é renderizar apenas os itens que estão no viewport,\n          no entanto, isso causará problemas quando os itens forem removidos do\n          o DOM quando estão fora de vista e adicionados novamente. Isso causará\n          itens para redefinir seus valores padrão quando eles entrarem\n          novamente na janela de exibição.\n        </p>\n\n        <p>\n          Para contornar isso, você pode registrar manualmente os campos e, em\n          seguida, definir programaticamente o valor do campo.\n        </p>\n\n        <p>\n          Um exemplo é mostrado abaixo usando{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","import advancedEn from \"../data/en/advanced\"\nimport advancedEs from \"../data/es/advanced\"\nimport advancedPt from \"../data/pt/advanced\"\nimport advancedZh from \"../data/zh/advanced\"\nimport advancedJp from \"../data/jp/advanced\"\nimport advancedKr from \"../data/kr/advanced\"\nimport advancedRu from \"../data/ru/advanced\"\n\nexport default {\n  en: advancedEn,\n  es: advancedEs,\n  pt: advancedPt,\n  kr: advancedKr,\n  jp: advancedJp,\n  zh: advancedZh,\n  ru: advancedRu,\n}\n","import * as React from \"react\"\nimport CodeArea from \"./CodeArea\"\nimport SideMenu from \"./SideMenu\"\nimport Footer from \"./Footer\"\nimport fieldArray from \"./codeExamples/fieldArray\"\nimport unregisterControlledComponent from \"./codeExamples/unregisterControlledComponent\"\nimport copyClipBoard from \"./utils/copyClipBoard\"\nimport schemaValidation from \"./codeExamples/schemaValidation\"\nimport connectForm from \"./codeExamples/connectForm\"\nimport formContextPerformance from \"./codeExamples/formContextPerformance\"\nimport StarRepo from \"./StarRepo\"\nimport generic from \"../data/generic\"\nimport { useStateMachine } from \"little-state-machine\"\nimport advancedContent from \"../data/advanced\"\nimport controlledMixedUncontrolled from \"./codeExamples/controlledMixedUncontrolled\"\nimport TabGroup from \"./TabGroup\"\nimport unregisterWrapControlledComponent from \"./codeExamples/unregisterWrapControlledComponent\"\nimport controlledMixedUncontrolledInput from \"./codeExamples/controlledMixedUncontrolledInput\"\nimport useFieldArray from \"./codeExamples/useFieldArray\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport codeAreaStyles from \"./CodeArea.module.css\"\nimport containerStyles from \"../styles/container.module.css\"\nimport getStartedStyles from \"./GetStarted.module.css\"\n\nconst { useRef } = React\nconst advancedEn = advancedContent[\"en\"]\nconst enLinks = [\n  advancedEn.accessibility,\n  advancedEn.wizard,\n  advancedEn.smartForm,\n  advancedEn.fieldArrays,\n  advancedEn.schema,\n  advancedEn.errorMessage,\n  advancedEn.connectForm,\n  advancedEn.formContext,\n  advancedEn.conditionalControlledComponent,\n  advancedEn.controlledMixedWithUnControlled,\n  advancedEn.customHookWithValidationResolver,\n  advancedEn.workingWithVirtualizedList,\n]\n\nfunction Advanced({ defaultLang }: { defaultLang: string }) {\n  const pageContentRef = useRef({\n    AccessibilityA11y: null,\n    WizardFormFunnel: null,\n    SmartFormComponent: null,\n    FieldArrays: null,\n    SchemaValidation: null,\n    ConnectForm: null,\n    FormContextPerformance: null,\n    ErrorMessage: null,\n    ConditionalControlledComponent: null,\n    ControlledmixedwithUncontrolledComponents: null,\n    CustomHookwithValidationResolver: null,\n    Workingwithvirtualizedlist: null,\n  })\n\n  const {\n    state: { language },\n  } = useStateMachine()\n  const { currentLanguage } =\n    language && language.currentLanguage\n      ? language\n      : { currentLanguage: defaultLang }\n  const advanced = advancedContent[currentLanguage]\n\n  const links = [\n    advanced.accessibility,\n    advanced.wizard,\n    advanced.smartForm,\n    advanced.fieldArrays,\n    advanced.schema,\n    advanced.errorMessage,\n    advanced.connectForm,\n    advanced.formContext,\n    advanced.conditionalControlledComponent,\n    advanced.controlledMixedWithUnControlled,\n    advanced.customHookWithValidationResolver,\n    advanced.workingWithVirtualizedList,\n  ]\n\n  const goToSection = name => {\n    const url = window.location.href\n    const hashIndex = url.indexOf(\"#\")\n    const filterName = name.replace(/[^\\w\\s]| /g, \"\")\n\n    if (hashIndex < 0) {\n      history.pushState({}, null, `${url}#${filterName}`)\n    } else {\n      history.pushState({}, null, `${url.substr(0, hashIndex)}#${filterName}`)\n    }\n\n    if (pageContentRef.current[filterName]) {\n      pageContentRef.current[filterName].scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  React.useEffect(() => {\n    if (location.hash)\n      setTimeout(() => goToSection(location.hash.substr(1)), 10)\n  }, [])\n\n  return (\n    <div className={containerStyles.container}>\n      <h1 className={typographyStyles.headingWithTopMargin} id=\"main\">\n        {advanced.header.title}\n      </h1>\n      <p className={typographyStyles.subHeading}>\n        {advanced.header.description}\n      </p>\n\n      <div className={containerStyles.wrapper}>\n        <SideMenu\n          enLinks={enLinks}\n          isStatic\n          links={links}\n          goToSection={goToSection}\n          currentLanguage={currentLanguage}\n        />\n\n        <main>\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.AccessibilityA11y = ref)}\n          >\n            {advanced.accessibility.title}\n          </h2>\n\n          {advanced.accessibility.description}\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.WizardFormFunnel = ref)}\n          >\n            {advanced.wizard.title}\n          </h2>\n\n          <p>\n            In this video tutorial, I have demonstrated the core concept of how\n            to build multiple steps funnel with React Hook Form.\n          </p>\n\n          <iframe\n            width=\"100%\"\n            height=\"528\"\n            title=\"react hook form persist multiple steps forms (Form Wizard) - video tutorial\"\n            src=\"https://www.youtube.com/embed/CeAkxVwsyMU\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n\n          {advanced.wizard.description}\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.SmartFormComponent = ref)}\n          >\n            {advanced.smartForm.title}\n          </h2>\n\n          {advanced.smartForm.description}\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.FieldArrays = ref)}\n          >\n            {advanced.fieldArrays.title}\n          </h2>\n\n          {advanced.fieldArrays.description}\n\n          <TabGroup buttonLabels={[\"Custom hook\", \"register\"]}>\n            <CodeArea\n              rawData={useFieldArray}\n              url=\"https://codesandbox.io/s/react-hook-form-usefieldarray-vy8fv\"\n            />\n            <CodeArea\n              rawData={fieldArray}\n              url=\"https://codesandbox.io/s/6j1760jkjk\"\n            />\n          </TabGroup>\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.SchemaValidation = ref)}\n          >\n            {advanced.schema.title}\n          </h2>\n\n          {advanced.schema.description}\n\n          {advanced.schema.step1}\n\n          <span className={getStartedStyles.installCode}>\n            npm install yup\n            <button\n              className={getStartedStyles.copyButton}\n              onClick={() => {\n                copyClipBoard(\"npm install yup\")\n                alert(\"Code copied into your clipboard.\")\n              }}\n            >\n              {generic.copy[currentLanguage]}\n            </button>\n          </span>\n\n          {advanced.schema.step2}\n\n          <CodeArea\n            rawData={schemaValidation}\n            url=\"https://codesandbox.io/s/928po918qr\"\n          />\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.ErrorMessage = ref)}\n          >\n            {advanced.errorMessage.title}\n          </h2>\n\n          {advanced.errorMessage.description}\n\n          <ul>\n            <li>\n              <h4>Register</h4>\n              <p>\n                {advanced.errorMessage.register}\n                <br />\n                <br />\n                <code>{`<input\n  name=\"test\"\n  ref={register({ maxLength: { value: 2, message: \"error message\" } })}\n/>\n`}</code>\n              </p>\n            </li>\n            <li>\n              <h4>Optional Chaining</h4>\n              {advanced.errorMessage.optionalChaining}\n              <p />\n            </li>\n            <li>\n              <h4>\n                Lodash <code>get</code>\n              </h4>\n              {advanced.errorMessage.get}\n              <p />\n            </li>\n          </ul>\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.ConnectForm = ref)}\n          >\n            {advanced.connectForm.title}\n          </h2>\n\n          {advanced.connectForm.description}\n\n          <CodeArea rawData={connectForm} />\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref => (pageContentRef.current.FormContextPerformance = ref)}\n          >\n            {advanced.formContext.title}\n          </h2>\n\n          {advanced.formContext.description}\n\n          <CodeArea rawData={formContextPerformance} />\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref =>\n              (pageContentRef.current.ConditionalControlledComponent = ref)\n            }\n          >\n            {advanced.conditionalControlledComponent.title}\n          </h2>\n\n          {advanced.conditionalControlledComponent.description}\n\n          <TabGroup buttonLabels={[\"Controller\", \"Custom Register\"]}>\n            <CodeArea rawData={unregisterWrapControlledComponent} />\n            <CodeArea\n              rawData={unregisterControlledComponent}\n              url=\"https://codesandbox.io/s/react-hook-fom-unregister-controlled-component-hu990\"\n            />\n          </TabGroup>\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref =>\n              (pageContentRef.current.ControlledmixedwithUncontrolledComponents = ref)\n            }\n          >\n            {advanced.controlledMixedWithUnControlled.title}\n          </h2>\n\n          {advanced.controlledMixedWithUnControlled.description}\n\n          <TabGroup buttonLabels={[\"Controller\", \"Custom Register\"]}>\n            <CodeArea rawData={controlledMixedUncontrolledInput} />\n            <CodeArea\n              rawData={controlledMixedUncontrolled}\n              url=\"https://codesandbox.io/s/react-hook-form-controlled-mixed-with-uncontrolled-8vh3c\"\n            />\n          </TabGroup>\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref =>\n              (pageContentRef.current.CustomHookwithValidationResolver = ref)\n            }\n          >\n            {advanced.customHookWithValidationResolver.title}\n          </h2>\n\n          {advanced.customHookWithValidationResolver.description}\n\n          <hr />\n\n          <h2\n            className={typographyStyles.questionTitle}\n            ref={ref =>\n              (pageContentRef.current.Workingwithvirtualizedlist = ref)\n            }\n          >\n            {advanced.workingWithVirtualizedList.title}\n          </h2>\n\n          {advanced.workingWithVirtualizedList.description}\n\n          <StarRepo currentLanguage={currentLanguage} />\n\n          <Footer currentLanguage={currentLanguage} />\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default Advanced\n","export default `import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nfunction createArrayWithNumbers(length) {\n  return Array.from({ length }, (_, k) => k + 1);\n}\n\nexport default function App() {\n  const { register, handleSubmit } = useForm();\n  const [size, setSize] = useState(1);\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {createArrayWithNumbers(size).map(index => {\n        return (\n          <>\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              name={\\`firstName[\\${index}]\\`}\n              placeholder=\"first name\"\n              ref={register({ required: true })}\n            />\n            \n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              name={\\`lastName[\\${index}]\\`}\n              placeholder=\"last name\"\n              ref={register({ required: true })}\n            />\n          </>\n        );\n      })}\n\n      <button type=\"button\" onClick={() => setSize(size + 1)} >\n        Add Person\n      </button>\n      \n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  age: yup\n    .number()\n    .required()\n    .positive()\n    .integer(),\n});\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: schema\n  });\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>\n        First Name\n        <input type=\"text\" name=\"firstName\" ref={register} />\n      </label>\n      {errors.firstName && <p>{errors.firstName.message}</p>}\n        \n      <label>\n        Age\n        <input type=\"text\" name=\"age\" ref={register} />\n      </label>\n      {errors.age && <p>{errors.age.message}</p>}\n      \n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import { FormContext, useForm, useFormContext } from \"react-hook-form\";\n\nexport const ConnectForm = ({ children }) => {\n const methods = useFormContext();\n \n return children({\n   ...methods\n });\n};\n\n// The following example will be the usage\nexport const DeepNest = () => (\n  <ConnectForm>\n    {({ register }) => <input ref={register} name=\"deepNestedInput\" />}\n  </ConnectForm>\n);\n\nexport const App = () => {\n  const methods = useForm();\n  \n  return (\n    <FormContext {...methods} >\n      <form>\n       <DeepNest />\n      </form>\n    </FormContext>\n  );\n}\n`\n","export default `import React from \"react\";\nimport { useForm, FormContext, useFormContext } from \"react-hook-form\";\n\nexport default function App() {\n  const methods = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <FormContext {...methods}>\n      // pass all methods into the context\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <NestedInput />\n        <input type=\"submit\" />\n      </form>\n    </FormContext>\n  );\n}\n\nfunction NestedInput() {\n  const {\n    register,\n    formState: { dirty }\n  } = useFormContext();\n  \n  // we can use React.memo to prevent re-render except dirty state changed\n  return React.useMemo(\n    () => (\n      <div>\n        <input name=\"test\" ref={register} />\n        {dirty && <p>This field is dirty</p>}\n      </div>\n    ),\n    [dirty]\n  );\n}\n\n`\n","export default `import React, { useEffect } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { TextField } from \"@material-ui/core\";\n\nfunction App() {\n  const { register, handleSubmit, setValue, watch, control } = useForm();\n  const name = watch(\"name\");\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n\n      <label>Name:</label>\n      <input ref={register} name=\"name\" />\n\n      <label>Conditional Field:</label>\n      {name !== \"bill\" && (\n        <Controller\n          name=\"test\" \n          as={TextField}\n          control={control} \n          defaultValue=\"\"\n        />\n      )}\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst CustomInput = React.memo(({ register, unregister, setValue, name }) => {\n  useEffect(() => {\n    register({ name });\n    return () => unregister(name);\n  }, [name, register, unregister]);\n  \n  return <input onChange={e => setValue(name, e.target.value)} />;\n});\n\nfunction App() {\n  const { register, unregister, handleSubmit, setValue, watch } = useForm();\n  const name = watch(\"name\");\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h1>Unregister Controlled Component</h1>\n\n      <label>Name:</label>\n      <input ref={register} name=\"name\" />\n\n      <label>Conditional Field:</label>\n      {name !== \"bill\" && (\n        <CustomInput {...{ register, unregister, setValue, name: \"test\" }} />\n      )}\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import React, { useEffect } from \"react\";\nimport { Input, Select, MenuItem } from \"@material-ui/core\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nconst defaultValues = {\n  select: \"\",\n  input: \"\"\n};\n\nfunction App() {\n  const { handleSubmit, reset, watch, control } = useForm({ defaultValues });\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        as={\n          <Select>\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        }\n        control={control}\n        name=\"select\"\n        defaultValue={10}\n      />\n      \n      <Input inputRef={register} name=\"input\" />\n\n      <button type=\"button\" onClick={() => reset({ defaultValues })}>Reset</button>\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\n`\n","export default `import React, { useEffect } from \"react\";\nimport { Input, Select, MenuItem } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\n\nconst defaultValues = {\n  select: \"\",\n  input: \"\"\n};\n\nfunction App() {\n  const { register, handleSubmit, setValue, reset, watch } = useForm({ defaultValues });\n  const selectValue = watch(\"select\");\n  const onSubmit = data => console.log(data);\n\n  useEffect(() => {\n    register({ name: \"select\" });\n  }, [register]);\n\n  const handleChange = e => setValue(\"select\", e.target.value);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Select value={selectValue} onChange={handleChange}>\n        <MenuItem value={10}>Ten</MenuItem>\n        <MenuItem value={20}>Twenty</MenuItem>\n        <MenuItem value={30}>Thirty</MenuItem>\n      </Select>\n      <br />\n      <Input inputRef={register} name=\"input\" />\n\n      <button type=\"button\" onClick={() => reset({ ...defaultValues })}>Reset</button>\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\n`\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label for=\"name\">Name</label>\n      <input type=\"text\" id=\"name\" ref={register({ required: true, maxLength: 30 })} />\n      {errors.name && errors.name.type === \"required\" && <span>This is required</span>}\n      {errors.name && errors.name.type === \"maxLength\" && <span>Max length exceeded</span> }\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import React from \"react\";\nimport { FormContext, useForm, useFormContext } from \"react-hook-form\";\nimport { VariableSizeList as List } from \"react-window\";\n\nconst items = Array.from(Array(1000).keys()).map((i) => ({\n  title: \"List \\${i}\",\n  quantity: Math.floor(Math.random() * 10),\n}));\n\nconst WindowedRow = React.memo(({ index, style, data, getValues, setValue }) => {\n  const values = getValues();\n  const qtyKey = \"[\\${index}].quantity\";\n  const qty = values[qtyKey];\n\n  return (\n    <div>\n      <span>{data[index].title}</span>\n      <input\n        // Rather than ref={register}, we use defaultValue and setValue\n        defaultValue={qty}\n        onChange={(e) => {\n          setValue(\n            qtyKey,\n            isNaN(Number(e.target.value)) ? 0 : Number(e.target.value)\n          );\n        }}\n      />\n    </div>\n  );\n});\n\nexport default React.memo(({ items }) => {\n  const formMethods = useForm({ defaultValues: items });\n  const onSubmit = (data) => console.log(data);\n\n  // We manually call register here for each field.\n  React.useEffect(() => {\n    if (items) {\n      items.forEach((item, idx) => {\n        formMethods.register(\"[\\${idx}].quantity\");\n      });\n    }\n  }, [formMethods, items]);\n\n  return (\n    <form onSubmit={formMethods.handleSubmit(onSubmit)}>\n      <List\n        height={300}\n        itemCount={items.length}\n        itemSize={() => 50}\n        width={300}\n        itemData={items}\n        {{ ...formMethods }}\n      >\n        {WindowedRow}\n      </List>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n});\n`\n","import * as React from \"react\"\nimport colors from \"../styles/colors\"\nimport generic from \"../data/generic\"\nimport { useStateMachine } from \"little-state-machine\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport styles from \"./SideMenu.module.css\"\n\nconst activateStyle = { borderBottom: `1px solid ${colors.lightPink}` }\n\nfunction SideMenu({\n  links,\n  goToSection,\n  enLinks,\n  isStatic,\n  currentLanguage,\n  activeIndex,\n}: {\n  links: any\n  goToSection: Function\n  isStatic?: boolean\n  enLinks: any\n  currentLanguage: string\n  activeIndex: number\n}) {\n  const { state } = useStateMachine()\n  const lightMode = state?.setting?.lightMode\n\n  return (\n    <aside className={`${styles.menu} ${lightMode ? styles.lightMenu : \"\"}`}>\n      <div>\n        <div className={styles.titleList}>\n          <h2\n            className={typographyStyles.title}\n            style={{\n              fontSize: 16,\n              color: colors.lightBlue,\n            }}\n          >\n            {generic.menu[currentLanguage]}\n          </h2>\n        </div>\n\n        <ul className=\"scrollArea\">\n          {links.map((rawLink, index) => {\n            const link =\n              typeof rawLink === \"function\" ? rawLink().title : rawLink.title\n            const enLink =\n              typeof enLinks[index] === \"function\"\n                ? enLinks[index]().title\n                : enLinks[index].title\n\n            let linkName = link.startsWith(\"use\") ? `♆ ${link}` : link\n\n            if (\n              /^[A-Z]/.test(link[0]) &&\n              !link.includes(\" \") &&\n              link !== \"TypeScript\"\n            ) {\n              linkName = \"❒ \" + linkName\n            }\n\n            if (\n              [\n                \"useformcontext\",\n                \"controller\",\n                \"usefieldarray\",\n                \"errormessage\",\n                \"validationschema\",\n                \"validationresolver\",\n                \"browser built-in validation\",\n              ].includes((link || \"\").toLowerCase()) ||\n              isStatic\n            ) {\n              return (\n                <li key={link}>\n                  <span className={styles.code}>{`</>`}</span>\n                  {isStatic ? (\n                    <button\n                      onClick={() => {\n                        goToSection(enLink, index)\n                      }}\n                      style={{\n                        top: \"-3px\",\n                        position: \"relative\",\n                        ...(activeIndex === index ? activateStyle : {}),\n                      }}\n                    >\n                      {linkName}\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        goToSection(enLink, index)\n                      }}\n                      style={{\n                        top: \"-3px\",\n                        position: \"relative\",\n                        ...(link === \"Quick Start\" ? { paddingLeft: 0 } : null),\n                        ...(activeIndex === index ? activateStyle : {}),\n                      }}\n                    >\n                      {linkName}\n                    </button>\n                  )}\n                </li>\n              )\n            }\n\n            return (\n              <li\n                key={link}\n                onClick={() => goToSection(enLink, index)}\n                style={{\n                  ...(index > 0\n                    ? {\n                        marginLeft: 10,\n                        ...(index !== links.length - 8\n                          ? { borderLeft: `1px solid ${colors.lightPink}` }\n                          : null),\n                        ...(index === 3\n                          ? { paddingTop: 10, marginTop: -15 }\n                          : null),\n                      }\n                    : null),\n                }}\n              >\n                <span\n                  className={`${styles.arrow} ${\n                    index === links.length - 8 ? styles.arrowLast : \"\"\n                  }`}\n                >\n                  {index > 0 && (\n                    <span\n                      style={{\n                        left: 1,\n                        top: -1,\n                        position: \"relative\",\n                      }}\n                    >\n                      ╴\n                    </span>\n                  )}\n                </span>\n                {link !== \"Quick Start\" && (\n                  <span className={styles.code}>{`</>`}</span>\n                )}{\" \"}\n                <button\n                  style={{\n                    top: \"-3px\",\n                    position: \"relative\",\n                    ...(link === \"Quick Start\" ? { paddingLeft: 0 } : null),\n                    ...(activeIndex === index ? activateStyle : {}),\n                  }}\n                >\n                  {linkName}\n                </button>\n              </li>\n            )\n          })}\n\n          <li>\n            <span className={styles.code}>{`</>`}</span>\n            <a\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/bluebill1049/react-hook-form/tree/master/examples\"\n              target=\"_blank\"\n            >\n              {generic.codeExample[currentLanguage]}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </aside>\n  )\n}\n\nexport default React.memo(SideMenu)\n","import * as React from \"react\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { Link as PageLink } from \"gatsby\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"Uso Avançado\",\n  header: {\n    title: \"Avançado\",\n    description:\n      \"Construa formulários complexos e acessíveis, utilizando React Hook Form.\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"Controlado misto com componente não controlados\",\n    description: (\n      <p>\n        React Hook Form faz uso de componentes não controlados e também\n        controlados. A maioria das bibliotecas de interface é construída para\n        suportar apenas componentes controlados como{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        e{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>\n        . Além disso, com React Hook Form a re-renderização de componentes\n        controlados também é otimizada. Aqui um exemplo onde combinamos a\n        validação de um formulário com componentes controlados e não controlados\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"Mensagem de erro\",\n    description: (\n      <p>\n        Mensagens de erro são feedbacks visuais para os usuários, quando algum\n        problema ocorre associado aos campos. No React Hook Form, nós provemos\n        objetos de erros facilmente. Entretanto, há diferentes formas para nós\n        renderizar-mos o erro em tela.\n      </p>\n    ),\n    register: (\n      <>\n        Mensagem de erro incorporado ao <code>register</code>, você pode\n        facilmente inserir a mensagem de erro no atributo <code>value</code>.\n        Ex:\n      </>\n    ),\n    component:\n      \"Criar um componente de ErrorMessage para ajudar a imprimir o erro.\",\n    optionalChaining: (\n      <>\n        <p>\n          O{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            optional chaining\n          </a>{\" \"}\n          operador <code>?.</code> permite ler o objeto <code>errors</code> sem\n          preocupação com a causa do erro devido ao <code>null</code> ou{\" \"}\n          <code>undefined</code>.\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n    get: (\n      <p>\n        Se seu projeto usar{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        , então você pode utilizar do lodash{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        function. Eg:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n  },\n  accessibility: {\n    title: \"Acessibilidade (A11y)\",\n    description: (\n      <>\n        <p>\n          O React Hook Form oferece suporte à validação nativa de formulários,\n          que permite validar os campos com suas próprias regras, já que a\n          maioria de nós precisamos criar formulários em um design e layout\n          personalizado, e é nossa responsabilidade garantir que nossos\n          formulários estejam acessíveis (A11y).\n        </p>\n\n        <p>\n          O código a seguir trabalha como planejado para validação; entretanto,\n          isso pode ser implementado para acessibilidade.\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          O código a seguir é uma versão aprimorada{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          .\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          Depois desta melhoria, a tela mostrará:{\" \"}\n          <i>“Name, edit, invalid entry, This is required.”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"Formulário em etapas/funil\",\n    description: (\n      <>\n        <p>\n          É muito comum coletar informações do usuário através de diferentes\n          páginas e seções. Nós recomendamos uma biblioteca de gerenciamento de\n          estados para armazenar os dados do usuário entre os diferentes campos,\n          páginas / seções. Neste exemplo, nós iremos usar{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          como nossa biblioteca de gerencia de estado (você pode substituir por{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>\n          , se você for mais familiar com ele).\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>Passo 1:</b> Construir as rotas e\n          o armazenamento (store).\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Passo 2:</b> Criar suas páginas,\n          faça-o coletar seus dados, submeter e armazenar os dados na \"store\" e\n          passar para próxima página do formulário.\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>Passo 3:</b> Faça a submissão\n          final com o dado na store ou exiba os dados em tela.\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          Seguindo o padrão acima, você deve ser capaz de construir um\n          formulário em etapas e coletar os dados do usuário de diversas\n          páginas.\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"Formulário inteligente\",\n    description: (\n      <>\n        <p>\n          Com esta ideia você pode facilmente compor seu formulário com campos.\n          Nós iremos criar um componente <code>Form</code> para automaticamente\n          capturar os dados do formulário.\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>Vamos dar uma olhada em cada um destes componentes.</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          O componente <code>Form</code> é responsável por injetar todos os\n          métodos do <code>react-hook-form</code> dentro do componente filho.\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          A responsabilidade desses componentes de entrada é registrá-los no{\" \"}\n          <code>react-hook-form</code>.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          Com o componente <code>Form</code> injetando{\" \"}\n          <code>react-hook-form props</code>\n          no componente filho, você pode facilmente criar e construir\n          formulários dinâmicos para sua aplicação.\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"Campo Arrays\",\n    description: (\n      <>\n        <p>\n          Essa é uma das melhoras funcionalidades do React Hook Form: ao invés\n          de importar componentes (como outras bibliotecas) para utilizar esta\n          funcionalidade, você pode utilizar o próprio HTML. A chave está dentro\n          do atributo <code>name</code>. No React Hook Form, o atributo{\" \"}\n          <code>name</code> representa a estrutura do dado que quer usar.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota:</b>\n          Nós construimos também um <code>custom hook</code> com um cenário\n          complexo: <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>.\n        </p>\n\n        <p>\n          O exemplo a seguir demonstra como você cria campos de array para\n          manipular o campo de atributo <code>name</code>.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota:</b> Se sua aplicação\n          necessita de funcionalidades como: Delete, Insert, Append, Preprend.\n          Aqui está{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            link para esta implementação.\n          </a>{\" \"}\n          com <PageLink to={\"/api#Controller\"}>Controller</PageLink>.\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"Validação de formulário\",\n    description: (\n      <>\n        <p>\n          React Hook Form suporta esquema baseado na validação do formulário com{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          , aqui você utiliza o <code>validationSchema</code> para{\" \"}\n          <a href=\"/api#useForm\">useForm</a> como configuração opcional. React\n          Hook Form irá validar o campo com base no esquema e retornará com{\" \"}\n          <a href=\"/api#errors\">errors</a> ou um valor válido.\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>Passo 1:</b> Instale o{\" \"}\n          <code>Yup</code> em seu projeto.\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>Passo 2:</b> Crie um esquema para\n        validação e registre (<code>register</code>) os campos com React Hook\n        Form.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"Conectar Formulário\",\n    description: (\n      <p>\n        Quando construimos formulário, as vezes nosso campo está presente muitos\n        níveis abaixo da árvore do componente, e isso é quando o{\" \"}\n        <a href=\"/api#useFormContext\">FormContext</a> é muito útil. Entretanto,\n        podemos futuramente melhorar a experiência do desenvolvedor usando o\n        componente <code>ConnectForm</code> para alavancar o React{\" \"}\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>. A\n        vantagem desse componente é que você pode conectar seu campo com o React\n        Hook Form de qualquer lugar.\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"Componente controlado condicional\",\n    description: (\n      <>\n        <p>\n          Em termos de campos condicionais, React Hook Form faz o uso muito\n          simples, porque a partir do momento que você remove um campo a\n          hierarquia de componentes, irá receber o <code>unregister</code>{\" \"}\n          automaticamente,{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            aqui um exemplo\n          </a>{\" \"}\n          de tal comportamento. Entretanto, este não é o mesmo caso do\n          componente controlado, caso o <code>ref</code> não tenha sido\n          registrado, podemos fazer o seguinte:\n        </p>\n        <ul>\n          <li>\n            <p>\n              Importe <PageLink to=\"/api#Controller\">Controller</PageLink> para\n              englobar seu componente e deixe-o gerenciar o{\" \"}\n              <code>register</code> e<code>unregister</code>\n            </p>\n          </li>\n          <li>\n            <p>\n              Fazer o uso do{\" \"}\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>{\" \"}\n              com um <code>register</code> customizado\u001d\n            </p>\n          </li>\n        </ul>\n        <p> Aqui está os exemplos:</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"Performance do FormContext\",\n    description: (\n      <p>\n        React Hook Form's{\" \"}\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> é construído\n        sob a{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          React's Context API.\n        </a>{\" \"}\n        Que resolve o problema em que os dados são passados pela árvore de\n        componentes sem precisar passar a props manualmente em todos os níveis.\n        Isso também faz com que a árvore de componentes acione uma nova\n        renderização quando o React Hook Form acionar uma atualização de estado,\n        mas ainda podemos otimizar nosso aplicativo, se necessário, através do\n        exemplo a seguir.\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook com Validation Resolver\",\n    description: (\n      <>\n        <p>\n          Você pode construir um custom hook como validação no{\" \"}\n          <code>resolver</code>. Um custom hook pode ser facilmente integrado\n          com yup/Joi/Superstruct como método de validação e pode ser usado\n          dentro do <code>resolver</code> de validação.\n        </p>\n        <ul>\n          <li>\n            Defina um schema memo (ou defina fora do seu componente se você não\n            tem dependências)\n          </li>\n          <li>Use um custom hook passando o schema de validação</li>\n          <li>\n            Passe o <code>resolver</code> de validação para usar o{\" \"}\n            <code>useForm</code> hook\n          </li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized list\",\n    description: (\n      <>\n        <p>\n          Imagine um cenário em que você tenha uma tabela de dados. Esta tabela\n          pode conter centenas ou milhares de linhas e cada linha terá entradas.\n          Uma prática comum é renderizar apenas os itens que estão no viewport,\n          no entanto, isso causará problemas quando os itens forem removidos do\n          DOM quando estão fora de vista e adicionados novamente. Isso causará\n          itens para redefinir seus valores padrão quando eles entrarem\n          novamente na janela de exibição.\n        </p>\n\n        <p>\n          Para contornar isso, você pode registrar manualmente os campos e, em\n          seguida, definir programaticamente o valor do campo.\n        </p>\n\n        <p>\n          Um exemplo é mostrado abaixo usando{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","export default `import React from \"react\";\n\nexport function Input({ register, name, ...rest }) {\n  return <input name={name} ref={register} {...rest} />;\n}\n\nexport function Select({ register, options, name, ...rest }) {\n  return (\n    <select name={name} ref={register} {...rest}>\n      {options.map(value => (\n        <option value={value}>{value}</option>\n      ))}\n    </select>\n  );\n}\n`\n","import * as React from \"react\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport { Link as PageLink } from \"gatsby\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"高级用法\",\n  header: {\n    title: \"高级\",\n    description: \"使用 React Hook Form 建设复杂且易于访问的表单.\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"受控制与不受控制的组件同存\",\n    description: (\n      <p>\n        React Hook Form 拥护你们使用不受控制的组件，与此同时也兼容受控制的组件。\n        大多数UI库的构建仅限于支持受控组件，如\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>\n        和\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          And\n        </a>\n        。此外,我们也优化了受控组件的多次render.\n        以下这是一个我们结合受控和不受控制的表单验证的例子。\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"错误信息\",\n    description: (\n      <p>\n        当有问题时，错误消息是对我们的用户的可视化反馈。 在react hook\n        form，我们提供的错误对象让你轻松地检索错误。 然而，有几个\n        不同的方式ra让我们减少render错误。\n      </p>\n    ),\n    register: (\n      <>\n        Embed error message during <code>register</code>, you can easily insert\n        your error message in the <code>value</code> attribute. Eg:\n      </>\n    ),\n    component: \"Create a ErrorMessage component to help your print out error.\",\n    get: (\n      <p>\n        If your project is using{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        , then you can leverage what lodash{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        function. Eg:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n    optionalChaining: (\n      <>\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            optional chaining\n          </a>\n          运算符<code>?.</code>\n          。允许您读取错误对象，而不必担心由于<code>null</code>或\n          <code>undefined</code>而导致错误。\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n  },\n  accessibility: {\n    title: \"辅助功能 (A11y)\",\n    description: (\n      <>\n        <p>\n          React Hook Form\n          支持本机表单验证。可是因为我们大多数人都必须在自定义设计和布局中构建表单，于此同时这也变成我们的责任去确保表单形式是有可访问性的（A11y）。\n        </p>\n\n        <p>下面的代码示例可用于验证；但是, 它可以改善可访问性。</p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          下面的代码示例是通过利用\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          改进的版本。\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          这种改进后，屏幕阅读器会说: <i>\"名称，编辑是必需的。”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"向导形式表格\",\n    description: (\n      <>\n        <p>\n          通过不同的页面和部分收集用户信息是很常见的。\n          我们建议使用状态管理库通过不同的页面/部分去存储用户输入。\n          在这个例子中，我们将使用\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>\n          作为我们的状态管理库（如果您更熟悉它，您可以用\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>\n          替换它）。\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>步骤1:</b>{\" \"}\n          设置你的routes和store。\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>步骤2:</b>{\" \"}\n          创建您的网页，让他们收集数据，提交该数据存储并推送到下一页你的表格。\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>步骤3:</b>{\" \"}\n          让您的最终提交所有的数据存储并且显示生成的数据。\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          按照上述模式，您应该能够构建向导表单收集来自多个页面的用户输入数据。\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"智能表单组件\",\n    description: (\n      <>\n        <p>\n          这里的想法是，你可以很容易地用输入来组合你的表单。\n          我们将创建一个表单组件来自动收集表单数据。\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>让我们来看看这些组件中的每个组件。</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          这个组件的责任是将所有<code>react-hook-form</code>方法注入到子组件中\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          这个输入组件的责任是将它们注册到 <code>react-hook-form</code>.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          随着<code>Form</code>组件将<code>react-hook-form</code>\n          的功能注入到child组件中，您可以轻松地在应用中创建和撰写复杂的表单。\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"自动生成表单\",\n    description: (\n      <>\n        <p>\n          这是React Hook\n          Form的最佳功能之一：您可以利用现有的HTML，而不需要导入其他的组件来实现此功能。\n          键位于name属性中。 在React Hook Form中，name属性表示要使用的数据结构。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意:</b>{\" \"}\n          我们还建立自定义挂钩了为了复杂的情况:{\" \"}\n          <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>.\n        </p>\n\n        <p>下面的示例演示如何通过操作输入名称属性来创建自动生成表单。</p>\n\n        <p>\n          <b className={typographyStyles.note}>注意:</b>\n          如果您的应用程序需要功能，例如：删除，插入，追加，前置。 这里是这种\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            实现的链接\n          </a>\n          混合了\n          <PageLink to={\"/api#Controller\"}>Controller</PageLink>。\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"架构验证\",\n    description: (\n      <>\n        <p>\n          React Hook Form支持使用\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          进行基于模式的表单验证，您可以在<a href=\"/api#useForm\">useForm</a>\n          其中通过\n          <code>validationSchema</code>将表单用作可选配置。 React Hook\n          Form将根据模式验证您的输入数据，并返回<a href=\"/api#errors\">错误</a>\n          或有效结果。\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>步骤1:</b> 将<code>Yup</code>\n          安装到您的项目中。\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>步骤2:</b>{\" \"}\n        准备您的架构以进行验证和注册 输入到React Hook Form.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"连接表单\",\n    description: (\n      <p>\n        当我们构建表单时，有时候我们的输入会在深度嵌套的组件树中，而这时\n        <a href=\"/api#useFormContext\">FormContext</a>让一切变得非常方便。\n        但是，我们可以通过创建连接表单组件并利用React的\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>\n        来进一步改善开发人员体验。\n        这样一个组件的好处是你可以从任何地方连接你的输入与React Hook Form。\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"条件控制组件\",\n    description: (\n      <>\n        <p>\n          在条件显示表格方面，React Hook\n          Form对我们来说非常简单，因为当你删除了组件树的输入时，它会自动取消注册，这里就有一个\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            例子\n          </a>\n          。 但是，由于没有注册ref，因此受控组件不是同一种情况，以下有两个方案\n        </p>\n        <ul>\n          <li>\n            <p>\n              我们可以利用\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>\n              的使用来实现。\n            </p>\n          </li>\n          <li>\n            <p>\n              使用\n              <PageLink to=\"/api#Controller\">Controller</PageLink>\n              来包裹您的受控组件从而做到自动注册于取消注册功能\n            </p>\n          </li>\n        </ul>\n        <p>例子如下:</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"FormContext 性能优化\",\n    description: (\n      <p>\n        React Hook Form的\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink>\n        是建立在React的\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Context\n        </a>\n        API上。 它解决了数据通过组件树传递而不必在每个级别手动传递的问题。\n        这也会导致组件树在React Hook\n        Form触发状态更新时触发重新render，但如果需要通过示例，我们仍然可以优化我们的应用程序。\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Custom Hook with Validation Resolver\",\n    description: (\n      <>\n        <p>\n          您可以构建一个自定义钩子作为验证解析器。定制挂钩\n          可以轻松地与yup/Joi/Superstruct集成为验证方法，并在验证解析器(validationResolver)中使用。\n        </p>\n        <ul>\n          <li>\n            定义一个记忆化的验证模式或在您的外部定义它组件如果您没有任何依赖性）\n          </li>\n          <li>通过传递验证模式来使用自定义钩子</li>\n          <li>将验证解析器传递给useForm钩子</li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"Working with virtualized list\",\n    description: (\n      <>\n        <p>\n          想象一下您有一个数据表的情况。该表可能包含数百或数千行，并且每一行都有输入。\n          一种常见的做法是仅渲染位于视口，但是这将导致问题，因为从当DOM不在视野中时，并重新添加。这会导致物品\n          重新进入视口时重置为默认值。\n        </p>\n\n        <p>若要解决此问题，您可以手动注册字段，然后以编程方式设置字段的值。</p>\n\n        <p>\n          下面是一个使用示例{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>\n          .\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport { Link as PageLink } from \"gatsby\"\nimport CodeArea from \"../../components/CodeArea\"\nimport accessibleCodeBase from \"../../components/codeExamples/accessibleCodeBase\"\nimport accessibleCodeFinal from \"../../components/codeExamples/accessibleCodeFinal\"\nimport { step1, step2, step3 } from \"../../components/codeExamples/formWizard\"\nimport smartForm from \"../../components/codeExamples/smartForm\"\nimport form from \"../../components/codeExamples/form\"\nimport input from \"../../components/codeExamples/input\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport customHookWithValidationResolver from \"../../components/codeExamples/customHookWithValidationResolver\"\nimport virtualizedList from \"../../components/codeExamples/virtualizedList\"\n\nexport default {\n  title: \"고급 사용법\",\n  header: {\n    title: \"고급 사용법\",\n    description: \"React Hook Form 으로 복잡하고 접근성 있는 폼을 만들기\",\n  },\n  controlledMixedWithUnControlled: {\n    title: \"제어 폼과 비제어 폼의 조합\",\n    description: (\n      <p>\n        React Hook Form 은 비제어 컴포넌트를 활용하고 있지만 제어 컴포넌트와도\n        함께 사용할 수 있습니다. 대부분의 UI 라이브러리들은 오로지 제어\n        컴포넌트만 지원하고 있습니다. 예를 들어{\" \"}\n        <a\n          href=\"https://github.com/mui-org/material-ui\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Material-UI\n        </a>{\" \"}\n        나{\" \"}\n        <a\n          href=\"https://github.com/ant-design/ant-design\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Antd\n        </a>{\" \"}\n        같은 라이브러리 말이죠. 뿐만 아니라 React Hook Form 을 활용하면 제어\n        컴포넌트의 리랜더링 또한 최적화됩니다. 아래에 제어되는 폼과 비제어 폼이\n        결합된 상태에서 폼 유효성 검사흘 하는 예를 보실 수 있습니다.\n      </p>\n    ),\n  },\n  errorMessage: {\n    title: \"에러 메세지\",\n    description: (\n      <p>\n        에러 메세지는 입력값에 관하여 문제가 있을 때 사용자에게 시각적으로\n        피드백을 주는 것입니다. React Hook Form 은 쉽게 에러를 되짚을 수 있도록\n        에러 객체를 제공합니다. 하지만 더 나은 방식으로 에러를 스크린에\n        랜더링하기 위해 몇 가지 다른 방법이 있습니다.\n      </p>\n    ),\n    register: (\n      <>\n        <code>register</code> 하면서 에러 메세지를 심어보세요. 쉽게{\" \"}\n        <code>value</code> 속성에 에러 메세지를 넣을 수 있습니다. 예:\n      </>\n    ),\n    component: \"에러 출력을 돕기 위해 ErrorMessage 컴포넌트를 만들어보세요.\",\n    get: (\n      <p>\n        만약 여러분의 프로젝트가{\" \"}\n        <a href=\"https://lodash.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          lodash\n        </a>\n        를 사용하고 있다면, lodash의{\" \"}\n        <code>\n          <a\n            href=\"https://lodash.com/docs/4.17.15#get\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            get\n          </a>\n        </code>{\" \"}\n        함수를 활용할 수 있습니다. 예:\n        <br />\n        <br />\n        <code>{`get(errors, 'firstName.message')`}</code>\n      </p>\n    ),\n    optionalChaining: (\n      <>\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\n          >\n            옵셔널 체이닝\n          </a>{\" \"}\n          접근자 <code>?.</code> 는 <code>errors</code> 객체를 읽을 때{\" \"}\n          <code>null</code> 이나 <code>undefined</code> 인 속성 때문에 에러가\n          발생할 걱정을 하지 않고 속성에 접근할 수 있습니다.\n        </p>\n        <p>\n          <code>{`errors?.firstName?.message`}</code>\n        </p>\n      </>\n    ),\n  },\n  accessibility: {\n    title: \"접근성 (A11y)\",\n    description: (\n      <>\n        <p>\n          React Hook Form 은 네이티브 폼 유효성 검사를 지원합니다. 그래서 고유의\n          규칙을 설정하여 입력값을 검증할 수 있습니다. 우리는 대부분 커스텀\n          디자인과 레이아웃을 적용하여 폼을 만들기 때문에 폼의 접근성(A11y)이\n          보장되도록 만들어야 할 책임이 있습니다.\n        </p>\n\n        <p>\n          아래의 코드 예제는 의도된 대로 유효성 검사가 잘 동작하지만, 접근성을\n          더 끌어올릴 수 있습니다.\n        </p>\n\n        <CodeArea rawData={accessibleCodeBase} />\n\n        <p>\n          아래의 예제는{\" \"}\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\"\n            target=\"_blank\"\n          >\n            ARIA\n          </a>\n          를 활용하여 향상된 접근성을 제공합니다.\n        </p>\n        <CodeArea rawData={accessibleCodeFinal} />\n\n        <p>\n          이렇게 바꾸고 나면 스크린 리더는 보이는 화면을 이렇게 읽어줍니다:{\" \"}\n          <i>“Name, edit, invalid entry, This is required.”</i>\n        </p>\n      </>\n    ),\n  },\n  wizard: {\n    title: \"마법사 폼 / 퍼널\",\n    description: (\n      <>\n        <p>\n          서로 다른 페이지와 섹션에 걸쳐 사용자의 정보를 저장하는 일은 꽤\n          흔합니다. 이럴 때는 상태 관리 라이브러리를 활용하여 다른 페이지와\n          섹션에 걸쳐 사용자의 입력값을 저장해두는 것을 추천합니다. 이번\n          예제에서는{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/bluebill1049/little-state-machine\"\n            target=\"_blank\"\n          >\n            little state machine\n          </a>{\" \"}\n          을 상태 관리 라이브러리로 사용합니다 (더 친숙하다면{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://github.com/reduxjs/redux\"\n            target=\"_blank\"\n          >\n            redux\n          </a>\n          로 교체할 수도 있습니다).\n        </p>\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>\n          <b className={typographyStyles.note}>1단계:</b> 라우트와 스토어를\n          설정합니다.\n        </p>\n        <CodeArea\n          rawData={step1}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>2단계:</b> 페이지를 생성하고,\n          폼을 제출할 때 데이터를 스토어에 저장하도록 만든 뒤 다음 페이지로\n          이동하도록 만듭니다.\n        </p>\n        <CodeArea\n          rawData={step2}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          <b className={typographyStyles.note}>3단계:</b> 스토어에 모아진 모든\n          데이터를 사용하여 마지막 폼을 제출하거나 결과물을 출력하세요.\n        </p>\n        <CodeArea\n          rawData={step3}\n          url=\"https://codesandbox.io/s/form-wizard-pages-kkg7m\"\n        />\n\n        <p>\n          위의 패턴을 사용하면 여러 페이지에 걸쳐 사용자의 입력값을 모으는\n          마법사 폼이나 퍼널을 만들 수 있습니다.\n        </p>\n      </>\n    ),\n  },\n  smartForm: {\n    title: \"스마트 폼 컴포넌트\",\n    description: (\n      <>\n        <p>\n          손쉽게 폼과 인풋 필드를 조합하는 방법 중 하나를 소개합니다.{\" \"}\n          <code>Form</code> 컴포넌트를 만들어서 자동으로 폼 데이터를 모을 수\n          있도록 만들겠습니다.\n        </p>\n\n        <CodeArea\n          rawData={smartForm}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p style={{ textAlign: \"center\" }}>♦</p>\n\n        <p>각각의 컴포넌트가 어떻게 이루어져 있는지 살펴보겠습니다.</p>\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Form</h2>\n        </div>\n\n        <p>\n          <code>Form</code> 컴포넌트가 하는 일은 모든{\" \"}\n          <code>react-hook-form</code> 메서드를 자손 컴포넌트로 넘기는 것입니다.\n        </p>\n\n        <CodeArea\n          rawData={form}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <div className={typographyStyles.codeHeading}>\n          <h2>Input / Select</h2>\n        </div>\n\n        <p>\n          인풋 컴포넌트의 역할은 자기 자신을 <code>react-hook-form</code> 에\n          등록하는 것입니다.\n        </p>\n        <CodeArea\n          rawData={input}\n          url=\"https://codesandbox.io/s/react-hook-form-smart-form-component-eqb3n\"\n        />\n\n        <p>\n          <code>Form</code> 컴포넌트를 사용하여 <code>react-hook-form</code> 의\n          props를 자손 컴포넌트로 주입할 수 있고, 덕분에 쉽게 복잡한 폼을 만들고\n          조합할 수 있습니다.\n        </p>\n      </>\n    ),\n  },\n  fieldArrays: {\n    title: \"필드 배열\",\n    description: (\n      <>\n        <p>\n          이 기능은 React Hook Form 이 제공하는 제일 좋은 기능 중 하나입니다. 이\n          기능을 구현하기 위해 (다른 라이브러리같은) 컴포넌트를 불러오는 대신에\n          이미 있는 HTML 마크업을 활용할 수 있습니다. 핵심은 그 안에 있는{\" \"}\n          <code>name</code> 속성입니다. React Hook Form 에서는 <code>name</code>{\" \"}\n          속성이 여러분이 사용하고자 하는 자료 구조를 대변합니다.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> we have also build a\n          custom hook for complex scenario:{\" \"}\n          <PageLink to=\"/api#useFieldArray\">useFieldArray</PageLink>.\n        </p>\n\n        <p>\n          아래의 예시는 인풋의 <code>name</code> 속성을 조작하여 어떻게 필드\n          배열을 만들 수 있는지 보여줍니다.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> if your application\n          requires functionality such as: Delete, Insert, Append, Preprend. Here\n          is the{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/react-hook-form-field-array-advanced-with-delete-insert-append-edit-gvgg4\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            link for such implementation.\n          </a>{\" \"}\n          with <PageLink to={\"/api#Controller\"}>Controller</PageLink>.\n        </p>\n      </>\n    ),\n  },\n  schema: {\n    title: \"스키마 유효성 검사\",\n    description: (\n      <>\n        <p>\n          React Hook Form 은{\" \"}\n          <a href=\"https://github.com/jquense/yup\" target=\"_blank\">\n            Yup\n          </a>\n          을 활용하여 스키마 기반의 폼 유효성 검사를 제공합니다.{\" \"}\n          <code>validationSchema</code> 를 <a href=\"/api#useForm\">useForm</a> 에\n          넘겨주어 추가 설정을 할 수 있습니다. React Hook Form 은 입력된\n          데이터를 스키마와 비교하여 <a href=\"/api#errors\">에러</a> 혹은 알맞은\n          결과를 표시합니다.\n        </p>\n      </>\n    ),\n    step1: (\n      <>\n        <p>\n          <b className={typographyStyles.note}>1단계:</b> <code>Yup</code> 을\n          프로젝트에 설치합니다.\n        </p>\n      </>\n    ),\n    step2: (\n      <p>\n        <b className={typographyStyles.note}>2단계:</b> 유효성 검사를 위한\n        스키마를 작성하고 React Hook Form 을 사용하여 인풋을 등록합니다.\n      </p>\n    ),\n  },\n  connectForm: {\n    title: \"폼 연결하기\",\n    description: (\n      <p>\n        폼을 만들 때, 인풋이 아주 깊게 중첩된 컴포넌트 트리 안에 남아있어야 하는\n        때가 있습니다. 그럴 때 <a href=\"/api#useFormContext\">FormContext</a> 가\n        아주 유용합니다. 하지만 <code>ConnectForm</code> 을 만들고 리액트의{\" \"}\n        <a href=\"https://reactjs.org/docs/render-props.html\">renderProps</a>{\" \"}\n        패턴을 활용하여 개발자 경험을 향상시킬 수 있습니다. 이러한 컴포넌트를\n        사용할 때의 이점은 어디서나 인풋을 React Hook Form과 연결할 수 있다는\n        것입니다.\n      </p>\n    ),\n  },\n  conditionalControlledComponent: {\n    title: \"조건부 제어 컴포넌트\",\n    description: (\n      <>\n        <p>\n          React Hook Form 를 사용하면 조건부 필드를 다루기 무척 쉬워집니다.\n          인풋이 컴포넌트 트리에서 제거되는 순간 자동으로{\" \"}\n          <code>unregister</code> 되기 때문입니다.{\" \"}\n          <a\n            href=\"https://codesandbox.io/s/13ykqx4wx7\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            여기 예제가 있습니다.\n          </a>{\" \"}\n          하지만 이러한 동작은 제어 컴포넌트에는 적용하기 어려운데,{\" \"}\n          <code>ref</code> 가 등록되어있지 않기 때문입니다. 이럴 때는 아래의\n          방법을 사용할 수 있습니다.\n        </p>\n        <ul>\n          <li>\n            <p>\n              <PageLink to=\"/api#Controller\">Controller</PageLink> 를 불러와서\n              컴포넌트를 감싸면 알아서 register 와 unregister 처리를 합니다.\n            </p>\n          </li>\n          <li>\n            <p>\n              <code>\n                <a\n                  href=\"https://reactjs.org/docs/hooks-effect.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  useEffect\n                </a>\n              </code>\n              를 활용할 수 있습니다.\n            </p>\n          </li>\n        </ul>\n        <p>여기 활용 예제가 있습니다.</p>\n      </>\n    ),\n  },\n  formContext: {\n    title: \"FormContext 퍼포먼스\",\n    description: (\n      <p>\n        React Hook Form 의{\" \"}\n        <PageLink to=\"/api/#useFormContext\">FormContext</PageLink> 는{\" \"}\n        <a\n          href=\"https://reactjs.org/docs/context.html\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          리액트의 Context\n        </a>{\" \"}\n        API를 기반으로 만들어졌습니다. 이를 통해 컴포넌트 트리에 걸쳐 매\n        단계마다 props를 전달해줘야 하는 문제를 해결할 수 있습니다. 하지만 React\n        Hook Form 이 상태 업데이트를 할 때마다 컴포넌트 트리가 리랜더링 되는\n        문제를 일으킵니다. 필요하다면 여전히 아래의 예제처럼 앱을 최적화할 수\n        있습니다.\n      </p>\n    ),\n  },\n  customHookWithValidationResolver: {\n    title: \"Validation Resolver 를 커스텀 훅으로 정의하기\",\n    description: (\n      <>\n        <p>\n          유효성 검사에 쓸 리졸버(resolver)를 커스텀 훅으로 만들 수 있습니다.\n          커스텀 훅은 yup/Joi/Superstruct 같은 유효성 검사 방법과 쉽게 결합될 수\n          있으며, 이런 방법들을 유효성 검사 리졸버 내부에서 사용할 수 있습니다.\n        </p>\n        <ul>\n          <li>\n            메모이즈 된 유효성 검사 스키마(혹은 컴포펀트 바깥에 선언하여\n            의존성이 생기지 않도록)를 정의하세요\n          </li>\n          <li>커스텀 훅을 호출하면서 유효성 검사 스키마를 전달하세요</li>\n          <li>useForm 훅에 유효성 검사 리졸버를 전달하세요</li>\n        </ul>\n\n        <CodeArea rawData={customHookWithValidationResolver} />\n      </>\n    ),\n  },\n  workingWithVirtualizedList: {\n    title: \"시각화된 리스트를 다루기\",\n    description: (\n      <>\n        <p>\n          데이터 표를 다루는 시나리오를 상상해봅시다. 이 테이블은 아마\n          수백게에서 수천 개의 행을 포함하고 있고, 각각의 행은 인풋을 가지고\n          있을 것입니다. 가장 이상적인 처리 방법은 뷰포트에 나타나는 아이템만\n          랜더링하는 것이겠지만, 뷰에서 벗어난 DOM 을 아예 제거해버렸다가 다시\n          추가하는 동작이 일어날 수 있습니다. 그러면 이전 아이템이 나타나야하는\n          뷰포트로 돌아갔을 때 해당 아이템이 기본값으로 초기화될 것입니다.\n        </p>\n\n        <p>\n          이 문제를 해결하기 위해서 필드를 수동으로 등록한 다음 프로그램적으로\n          필드의 값을 설정해야 합니다.\n        </p>\n\n        <p>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/bvaughn/react-window\"\n          >\n            react-window\n          </a>{\" \"}\n          를 사용할 때의 예제는 다음과 같습니다.\n        </p>\n\n        <CodeArea\n          rawData={virtualizedList}\n          url=\"https://codesandbox.io/s/react-hook-form-with-react-window-b4j8n\"\n        />\n      </>\n    ),\n  },\n}\n","export default `import React from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\n\nfunction App() {\n  const { register, control, handleSubmit } = useForm({\n    // defaultValues: {}; you can populate the fields by this attribute \n  });\n  const { fields, append, prepend, remove } = useFieldArray({\n    control,\n    name: \"test\"\n  });\n  \n  return (\n    <form onSubmit={handleSubmit(data => console.log(\"data\", data))}>\n      <ul>\n        {fields.map((item, index) => (\n          <li key={item.id}>\n            <input name={\\`test[\\${index}].name\\`} defaultValue={item.name} ref={register()} />\n            <button onClick={() => remove(index)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      <section>\n        <button type=\"button\" onClick={() => append({ name: \"test\" })} >\n          append\n        </button>\n        <button type=\"button\" onClick={() => prepend({ name: \"test1\" })}>\n          prepend\n        </button>\n      </section>\n    </form>\n  );\n}\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"SideMenu-module--menu--WeHDU\",\"arrow\":\"SideMenu-module--arrow--3QN_Z\",\"arrowLast\":\"SideMenu-module--arrowLast--3oMQI\",\"lightMenu\":\"SideMenu-module--lightMenu--XYEOq\",\"titleList\":\"SideMenu-module--titleList--YlD4k\",\"code\":\"SideMenu-module--code--L4G67\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"installCode\":\"GetStarted-module--installCode--3pcx3\",\"lightInstallCode\":\"GetStarted-module--lightInstallCode--26Z3P\",\"copyButton\":\"GetStarted-module--copyButton--vgJmz\"};","export default `import { useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nconst useYupValidationResolver = validationSchema =>\n  useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nconst validationSchema = useMemo(\n  () =>\n    yup.object({\n      firstName: yup.string().required(\"Required\"),\n      lastName: yup.string().required(\"Required\")\n    }),\n  []\n);\n\nconst validationResolver = useYupValidationResolver(validationSchema);\n\nconst form = useForm({ validationResolver });\n`\n","import * as React from \"react\"\nimport generic from \"../data/generic\"\nimport buttonStyles from \"../styles/button.module.css\"\nimport containerStyles from \"../styles/container.module.css\"\n\nexport default function StarRepo({\n  currentLanguage,\n}: {\n  currentLanguage: string\n}) {\n  return (\n    <div\n      className={containerStyles.centerContent}\n      style={{ marginTop: 100, maxWidth: 600 }}\n    >\n      <h1>{generic.needYourSupport[currentLanguage].title}</h1>\n      <p>{generic.needYourSupport[currentLanguage].description}</p>\n      <button\n        className={buttonStyles.primaryButton}\n        onClick={() => {\n          window.open(\"https://github.com/react-hook-form/react-hook-form\")\n        }}\n        style={{ margin: \"40px auto\" }}\n      >\n        {generic.needYourSupport[currentLanguage].buttonText}\n      </button>\n    </div>\n  )\n}\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label for=\"name\">Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        {/* use aria-invalid to indicate field contain error */}\n        aria-invalid={errors.name ? \"true\" : \"false\"}\n        {/* use aria-describedby to associate with error messages */}\n        aria-describedby=\"error-name-required error-name-maxLength\"\n        ref={register({ required: true, maxLength: 30 })}\n      />\n      {/* the id field is used to associated with aria-describedby*/}\n      <span\n        role=\"alert\"\n        id=\"error-name-required\"\n        style={{\n          display: errors.name && errors.name.type === \"required\"\n            ? \"block\"\n            : \"none\"\n        }}\n      >\n        This is required\n      </span>\n      <span\n        role=\"alert\"\n        id=\"error-name-maxLength\"\n        style={{\n          display: errors.name && errors.name.type === \"maxLength\"\n            ? \"block\"\n            : \"none\"\n        }}\n      >\n        Max length exceeded\n      </span>\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n","export default `import React from \"react\";\nimport { Form, Input, Select } from \"./Components\";\n\nexport default function App() {\n  const onSubmit = data => console.log(data);\n\n  return (\n    <>\n      <h1>Smart Form Component</h1>\n      <Form onSubmit={onSubmit}>\n        <Input name=\"firstName\" />\n        <Input name=\"lastName\" />\n        <Select name=\"sex\" options={[\"female\", \"male\"]} />\n\n        <Input type=\"submit\" value=\"Submit\" />\n      </Form>\n    </>\n  );\n}\n`\n"],"sourceRoot":""}