{"version":3,"sources":["webpack:///./src/data/jp/api-v5.tsx","webpack:///./src/pages/v5/api.jp.tsx"],"names":["Popup","typographyStyles","note","colors","lightPink","buttonStyles","links","codeBlock","typeText","CodeArea","useFieldArrayArgument","ApiZh","location","defaultLang","title","api","ApiPage"],"mappings":"6PAUe,EACN,aAQH,WA6BA,WAgBA,WAaA,WAOA,WAKA,WAyEGA,EAAA,EAUH,WAOkBC,IAAiBC,KAgCnC,WASkBD,IAAiBC,KAUnC,WAWkBD,IAAiBC,KAYNC,IAAOC,UAMrBC,IAAaC,MA6D1B,WAkBF,WAMkBL,IAAiBC,KAmBnC,WAOA,WAKA,WA+CA,WAaA,WA0BE,WAoBF,WAKqBD,IAAiBM,UAKpBN,IAAiBC,KAKdD,IAAiBM,UAmDtC,WAGkBN,IAAiBC,KAiCnC,WA2BkBD,IAAiBC,KAgBnC,WA2BA,WAGkBD,IAAiBC,KAgBpBG,IAAaC,MAoBLL,IAAiBO,SAUjBP,IAAiBO,SAejBP,IAAiBO,SAcjBP,IAAiBO,SAQlBP,IAAiBC,KAKjBD,IAAiBC,KAahBD,IAAiBO,SAYjBP,IAAiBO,SAWjCC,EAAA,EAYgBR,IAAiBO,SAejBP,IAAiBO,SA2BjBP,IAAiBO,SAejBP,IAAiBO,SAaxC,WAsDA,WAIqBP,IAAiBO,SAIpBP,IAAiBC,KAgCZD,IAAiBO,SAUjBP,IAAiBO,SAYjBP,IAAiBO,SAUjBP,IAAiBO,SAejBP,IAAiBO,SAgBlBP,IAAiBC,KAYvC,WAOkBD,IAAiBC,KAUnC,WAgBGO,EAAA,EAAkBC,IAGHT,IAAiBC,KAgC5BO,EAAA,EAuCP,WAMuBR,IAAiBO,SAQlBP,IAAiBC,KAehBD,IAAiBO,SAWjBP,IAAiBO,SAWjBP,IAAiBO,SAWjBP,IAAiBO,SAWjBP,IAAiBO,SAOlBP,IAAiBC,KAahBD,IAAiBO,SAexC,WAyBkBP,IAAiBC,KAOjBD,IAAiBC,KAKjBD,IAAiBC,KAOjBD,IAAiBC,KCtvC1BS,UAdD,SAAC,GAAD,IACZC,EADY,EACZA,SADY,OAQZ,gBAAC,IAAD,CAAQA,SAAUA,EAAUC,YAAY,MACtC,gBAAC,IAAD,CAAKC,MAAOC,EAAWH,SAAUA,IACjC,gBAACI,EAAA,EAAD,CAASH,YAAY","file":"component---src-pages-v-5-api-jp-tsx-a8d16cbadf65f0fd41a0.js","sourcesContent":["import * as React from \"react\"\nimport colors from \"../../styles/colors\"\nimport Popup from \"../../components/Popup\"\nimport generic from \"../generic\"\nimport CodeArea from \"../../components/CodeArea\"\nimport useFieldArrayArgument from \"../../components/codeExamples/useFieldArrayArgument\"\nimport typographyStyles from \"../../styles/typography.module.css\"\nimport buttonStyles from \"../../styles/button.module.css\"\nimport code from \"../../components/codeExamples/defaultExample\"\n\nexport default {\n  title: \"API ドキュメント\",\n  header: {\n    description:\n      \"は API をシンプルにすることにより、最高な DX を提供することに焦点を当てています。\",\n  },\n  useForm: {\n    title: \"useForm\",\n    intro: (\n      <>\n        <code>useForm</code>{\" \"}\n        を呼び出すことにより、次のメソッドを受け取ることができます。{\" \"}\n      </>\n    ),\n    description: (\n      <p>\n        <code>useForm</code> は<b>省略可能</b>な引数もあります。\n        下記の例は、全てのオプションのデフォルト値を示します。\n      </p>\n    ),\n    validationResolver: (goToSection) => (\n      <>\n        <p>\n          このコールバック関数を使用すると、任意のスキーマバリデーションまたはカスタムバリデーションを実行できます。\n          この関数は引数としてフォーム全体の <code>values</code> を持ち、\n          その値を検証して <code>values</code> と <code>errors</code>{\" \"}\n          の両方を返す必要があります。詳細については{\" \"}\n          <button\n            className={buttonStyles.codeAsLink}\n            onClick={() => goToSection(\"validationResolver\")}\n          >\n            validationResolver\n          </button>{\" \"}\n          セクションをご覧ください。\n        </p>\n      </>\n    ),\n    validateContext: (\n      <>\n        <p>\n          このコンテキストオブジェクトは、<code>validationResolver</code>{\" \"}\n          の第二引数または{\" \"}\n          <a\n            href=\"https://github.com/jquense/yup\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Yup\n          </a>{\" \"}\n          バリデーションのコンテキストオブジェクトに渡されます。\n        </p>\n      </>\n    ),\n    validateCriteriaMode: (\n      <>\n        <p>\n          デフォルトの設定である <code>firstError</code>{\" \"}\n          は、全てのフィールドのバリデーションを行い、最初に発生したエラーを収集します。\n        </p>\n        <p>\n          このオプションを <code>all</code>{\" \"}\n          に設定すると、全てのフィールドのバリデーションが実行され、\n          発生した全てのエラーが収集されます。\n        </p>\n      </>\n    ),\n    validateOnSubmit: (\n      <>\n        <code>submit</code> イベントからバリデーションがトリガーされ、\n        無効な入力は <code>onChange</code>{\" \"}\n        イベントリスナーをアタッチして再度バリデーションを行います。\n      </>\n    ),\n    validateOnBlur: (\n      <>\n        <code>blur</code> イベントからバリデーションがトリガーされます。\n      </>\n    ),\n    validateOnChange: (\n      <>\n        入力の度に <code>change</code>{\" \"}\n        イベントからバリデーションがトリガーされ、複数の再レンダリングが行われます。\n        非推奨: これをパフォーマンスの悪い習慣と考えてください。\n      </>\n    ),\n    defaultValues: (goToSection) => (\n      <>\n        <p>\n          <code>defaultValue/defaultChecked</code> を使用して input\n          のデフォルト値を設定するか{\" \"}\n          <a\n            className={buttonStyles.links}\n            href=\"https://reactjs.org/docs/uncontrolled-components.html\"\n          >\n            (詳細については React ドキュメントを参照)\n          </a>{\" \"}\n          、<code>defaultValues</code>{\" \"}\n          を省略可能な引数として渡してフォーム全体のデフォルト値を設定することができます。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>重要:</b>{\" \"}\n          <code>defaultValues</code> はカスタムフック内にキャッシュされます。{\" \"}\n          <code>defaultValues</code> をリセットしたい場合は、{\" \"}\n          <button\n            className={buttonStyles.codeAsLink}\n            onClick={() => goToSection(\"reset\")}\n          >\n            reset\n          </button>{\" \"}\n          API を使用してください。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          <code>defaultValues</code> で定義された値は <code>defaultValue</code>{\" \"}\n          として{\" \"}\n          <button\n            className={buttonStyles.codeAsLink}\n            onClick={() => goToSection(\"watch\")}\n          >\n            watch\n          </button>{\" \"}\n          に注入されます。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b> 手動で{\" \"}\n          <code>register</code> を適用したフィールドでは React Hook Form に{\" \"}\n          <code>ref</code> を提供しないため、 手動で登録した input (例:{\" \"}\n          <code>{`register({ name: 'test' })`}</code>) に{\" \"}\n          <code>defaultValues</code> は自動設定されません。\n        </p>\n      </>\n    ),\n    validationSchema: (goToSection) => (\n      <p>\n        スキーマレベルで <code>Yup</code>{\" \"}\n        を使用してフォームバリデーションルールを適用します。{\" \"}\n        <button\n          className={buttonStyles.codeAsLink}\n          onClick={() => goToSection(\"validationSchema\")}\n        >\n          validationSchema\n        </button>{\" \"}\n        セクションを参照してください。\n      </p>\n    ),\n    reValidateMode: (\n      <p>\n        このオプションを使用すると、エラーのある入力が再度バリデーションされるタイミングを設定することができます。{\" \"}\n        (デフォルトでは、入力変更時にバリデーションがトリガーされます。){\" \"}\n        <Popup />\n      </p>\n    ),\n    validationFields: (\n      <p>\n        フィールドの配列を指定すると、含まれているフィールドのみがバリデーションが行われます。\n        このオプションは、バリデーションが必要なフィールドを切り替えたい時に便利です。\n      </p>\n    ),\n    submitFocusError: (\n      <>\n        <p>\n          デフォルトでは、ユーザーがフォームを送信してそのフォームにエラーが含まれている時、\n          エラーのある最初のフィールドがフォーカスされます。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b> <code>ref</code>{\" \"}\n          を持つ登録したフィールドのみが機能します。 手動で登録した input\n          では機能しません。例：{\" \"}\n          <code>{`register({ name: 'test' }) // doesn't work`}</code>{\" \"}\n        </p>\n      </>\n    ),\n    nativeValidation: (goToSection) => (\n      <p>\n        このオプションを <code>true</code>{\" \"}\n        に設定すると、ブラウザーネイティブバリデーションが有効になります。\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n        >\n          ビルトインブラウザーバリデーションの詳細を確認\n        </a>\n        できます。詳細と例については{\" \"}\n        <button\n          className={buttonStyles.codeAsLink}\n          onClick={() => goToSection(\"nativeValidation\")}\n        >\n          nativeValidation\n        </button>{\" \"}\n        セクションを参照してください。\n      </p>\n    ),\n  },\n  unregister: {\n    title: \"unregister\",\n    description: (\n      <>\n        <p>\n          このメソッドでは、単一の input または input の配列に{\" \"}\n          <code>unregister</code> を適用することができます。 これは、{\" \"}\n          <code>useEffect</code> でカスタム登録として input を登録 (\n          <code>register</code>) し、\n          コンポーネントのアンマウント後に登録を解除する場合に便利です。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b> input を登録解除 (\n          <code>unregister</code>) すると、\n          その値は送信されたフォームデータに含まれなくなります。\n        </p>\n      </>\n    ),\n  },\n  register: {\n    title: \"register\",\n    description: (\n      <>\n        <p>\n          このメソッドを使用すると、input/select の <code>Ref</code>{\" \"}\n          とバリデーションルールを React Hook Form に登録 (<code>register</code>\n          ) することができます。\n        </p>\n        <p>\n          バリデーションルールは全て HTML\n          標準に基づいており、カスタムバリデーションも可能です。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>重要：</b> <code>name</code>{\" \"}\n          属性は<b>必須</b>かつ\n          <b>ユニーク</b>です。 input の name\n          属性はドット記法およびブラケット記法もサポートしているため、\n          ネストされたフォームフィールドを簡単に作成することができます。例は下記の通りです：\n        </p>\n      </>\n    ),\n    fieldArray: (\n      <p\n        style={{\n          paddingLeft: 10,\n          borderLeft: `4px solid ${colors.lightPink}`,\n        }}\n      >\n        <code>arrays/array</code> フィールドを使用する場合、input の name 属性を{\" \"}\n        <code>name[index]</code> のように割り当てることができます。\n        <a\n          className={buttonStyles.links}\n          href=\"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx\"\n          title=\"example for Field Array\"\n        >\n          フィールド配列の例をご覧ください\n        </a>\n        。\n      </p>\n    ),\n    example: \"フォームの送信結果\",\n    selectHelp:\n      \"登録オプションを選択すると、下記の API テーブルが更新されます。\",\n    options: {\n      title: \"登録オプション\",\n      registerWithValidation: \"バリデーションのみで登録\",\n      registerWithValidationMessage: \"バリデーションとエラーメッセージで登録\",\n      note: (goToSection) => (\n        <>\n          <h2 className={typographyStyles.title}>カスタム登録</h2>\n          <p>\n            また、input を手動で登録 (manual <code>register</code>)\n            することもできます。 これは、カスタムコンポーネントを操作していて{\" \"}\n            <code>Ref</code> にアクセスできない場合に便利です。 React Native や{\" \"}\n            <a\n              href=\"https://github.com/JedWatson/react-select\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              react-select\n            </a>{\" \"}\n            のようなカスタムコンポーネントを使用している場合がこれに該当します。\n          </p>\n\n          <p>\n            カスタム登録を使用すると、 input の ref は登録されていないため、{\" \"}\n            <button\n              className={buttonStyles.codeAsLink}\n              onClick={() => goToSection(\"setValue\")}\n            >\n              setValue\n            </button>{\" \"}\n            で入力値を更新する必要があります。\n          </p>\n\n          <p>\n            <code\n              className={typographyStyles.codeBlock}\n            >{`register({ name: 'firstName' }, { required: true, min: 8 })`}</code>\n          </p>\n\n          <p>\n            <b className={typographyStyles.note}>注意：</b>{\" \"}\n            値の更新中に、カスタム登録した input\n            で再レンダリングをトリガーしたい場合は、 登録した input に type\n            属性を指定する必要があります。\n          </p>\n        </>\n      ),\n    },\n    validation: {\n      required: (\n        <>\n          Boolean の値。true\n          の場合、フォームを送信する前に入力値が必須であることを示します。\n          <code>errors</code>{\" \"}\n          オブジェクトにエラーメッセージを返す文字列を割り当てることができます。\n        </>\n      ),\n      maxLength: \"input が受け付ける最大文字数。\",\n      minLength: \"input が取りうる妥当と判断される最小文字数。\",\n      max: \"input が受け付ける最大数。\",\n      min: \"input が取りうる妥当と判断される最小数。\",\n      pattern: \"input の内容が一致する必要がある正規表現。\",\n      validate: `引数として、単一のバリデーションを行うためにはコールバック関数を渡すことができ、複数のバリデーションを行うためにはコールバック関数のオブジェクトを渡すことができます。 (例を参照)`,\n    },\n  },\n  formState: {\n    title: \"formState\",\n    description: (\n      <>\n        <p>\n          このオブジェクトには、フォームの状態に関する情報が含まれています。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>重要:</b> <code>formState</code>{\" \"}\n          はレンダリングパフォーマンスの改善のために{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Proxy\n          </a>{\" \"}\n          にラップされているので、状態の更新を有効にするには、\n          <code>render</code> 前に <code>formState</code>{\" \"}\n          を呼び出すか、読み込む必要があります。\n          この再レンダリング機能の削減機能は、Webプラットフォームにのみ適用されます。\n          React Nativeでの<code>Proxy</code>のサポートについて。\n        </p>\n      </>\n    ),\n    dirty: \"ユーザが入力操作した後 true に設定します。\",\n    dirtyFields: (\n      <>\n        ユーザーが変更したフィールドの一意の <code>Set</code> オブジェクト。\n      </>\n    ),\n    isSubmitted:\n      \"ユーザーがフォームを送信した後 true に設定します。フォームの送信後、その状態は、resetメソッドで呼び出されるまで送信されたままになります。\",\n    touched: (\n      <>\n        操作された全ての input の <code>name</code> の配列。\n      </>\n    ),\n    isSubmitting: (\n      <>\n        フォームの送信中は <code>true</code> に設定し、 フォームの送信後は{\" \"}\n        <code>false</code> に設定します。\n      </>\n    ),\n    submitCount: \"フォームの送信回数。\",\n    isValid: \"エラーがない場合は true に設定します。\",\n  },\n  errors: {\n    title: \"errors\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          オブジェクトには、各 input{\" \"}\n          のフォームのエラーまたはエラーメッセージが含まれています。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>\n            {generic.note[currentLanguage]}:\n          </b>{\" \"}\n          V3 と V4 の違い:\n        </p>\n\n        <ul>\n          <li>\n            <p>V4: ネストされたオブジェクト</p>\n            <p>\n              <strong>理由:</strong> Optional chaining{\" \"}\n              はコミュニティの間でより一般的になり、型のサポートが向上するため。\n            </p>\n            <p>\n              <code>{`errors?.yourDetail?.firstName;`}</code>\n            </p>\n          </li>\n          <li>\n            <p>V3: フラットなオブジェクト</p>\n            <p>\n              <strong>理由:</strong> エラーがシンプルでアクセスしやすいため。\n            </p>\n            <p>\n              <code>{`errors['yourDetail.firstName'];`}</code>\n            </p>\n          </li>\n        </ul>\n      </>\n    ),\n    types: (\n      <>\n        これは、単一のフィールドで複数のエラーを返す必要がある、\n        パスワードのルールのような input のバリデーションに役立ちます。\n        この機能を有効にするには、 <code>validateCriteriaMode: 'all'</code>{\" \"}\n        を設定してください。\n      </>\n    ),\n    message: `メッセージはデフォルトでは空文字です。ただし、バリデーションとエラーメッセージで登録するとエラーメッセージが返されます。`,\n    ref: `input 要素の参照。`,\n  },\n  watch: {\n    title: \"watch\",\n    description: (\n      <>\n        <p>これは指定された input/inputs を監視し、その値を返します。</p>\n\n        <ul>\n          <li>\n            <p>\n              <code>defaultValue</code> が定義されていない場合、\n              <code>watch</code> の初回のレンダリングは <code>register</code>{\" \"}\n              の前に呼び出されるため <code>undefined</code> を返しますが、\n              第2引数として <code>defaultValue</code>{\" \"}\n              を設定して値を返すことができます。\n            </p>\n          </li>\n          <li>\n            <p>\n              ただし、引数として <code>useForm</code> で{\" \"}\n              <code>defaultValues</code> が初期化された場合、\n              初回のレンダリングは <code>defaultValues</code>{\" \"}\n              で指定された値を返します。\n            </p>\n          </li>\n        </ul>\n      </>\n    ),\n    tableTitle: {\n      single: (\n        <>\n          input の値を name から監視します (lodash の{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://lodash.com/docs/4.17.15#get\"\n          >\n            get\n          </a>{\" \"}\n          関数に似ています)\n        </>\n      ),\n      multiple: \"複数の input を監視します\",\n      all: \"全ての input を監視します\",\n      nest: \"すべての入力を監視し、ネストされたオブジェクトを返します\",\n    },\n  },\n  handleSubmit: {\n    title: \"handleSubmit\",\n    description: (\n      <>\n        <p>\n          この関数は、フォームバリデーションに成功するとフォームデータを渡します。また、リモートで呼び出すこともできます。\n        </p>\n        <p>\n          <code className={typographyStyles.codeBlock}>\n            handleSubmit(onSubmit)()\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          非同期バリデーションのための <code>async</code>{\" \"}\n          関数を渡すことができます。例：{\" \"}\n        </p>\n        <p>\n          <code className={typographyStyles.codeBlock}>\n            handleSubmit(async (data) => await fetchAPI(data))\n          </code>\n        </p>\n      </>\n    ),\n  },\n  reset: (goToSection) => ({\n    title: \"reset\",\n    description: (\n      <>\n        <p>\n          この関数は、フォーム内のフィールドの値とエラーをリセット (\n          <code>reset</code>) します。<code>omitResetState</code>\n          を指定することにより、次のことができます。\n          特定の状態のみをリセットします。 省略可能な引数として{\" \"}\n          <code>values</code> を渡すと、\n          割り当てられたデフォルト値でフォームをリセットできます。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b> <code>ref</code>{\" \"}\n          を公開しない <code>React-Select</code>{\" \"}\n          のような制御されたコンポーネントの場合は、{\" \"}\n          手動で入力値をリセットするために{\" \"}\n          <button\n            className={buttonStyles.codeAsLink}\n            onClick={() => goToSection(\"setValue\")}\n          >\n            setValue\n          </button>{\" \"}\n          を使用するか、{\" \"}\n          <button\n            className={buttonStyles.codeAsLink}\n            onClick={() => goToSection(\"Controller\")}\n          >\n            Controller\n          </button>{\" \"}\n          コンポーネントを使用して制御されたコンポーネントをラップする必要があります。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          <code>Controller</code> コンポーネントの値をリセットするには、\n          <code>useForm</code> に <code>defaultValues</code>{\" \"}\n          を指定する必要があります。\n        </p>\n      </>\n    ),\n  }),\n  setError: {\n    title: \"setError\",\n    description: (\n      <>\n        <p>単一または複数の input のエラーを手動で設定できます。</p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b>{\" \"}\n          このメソッドはエラーを保存せず、フォームの送信をブロックしません。\n          非同期バリデーション後にユーザーへエラーをフィードバックしたい場合は、{\" \"}\n          <code>handleSubmit</code> 関数内で使用してください。\n        </p>\n      </>\n    ),\n  },\n  clearError: {\n    title: \"clearError\",\n    description: (\n      <ul>\n        <li>\n          <p>\n            <code>undefined</code>: 全てのエラーをリセット\n          </p>\n        </li>\n        <li>\n          <p>\n            <code>string</code>: 単一のエラーをリセット\n          </p>\n        </li>\n        <li>\n          <p>\n            <code>string[]</code>: 複数のエラーをリセット\n          </p>\n        </li>\n      </ul>\n    ),\n  },\n  setValue: {\n    title: \"setValue\",\n    description: (\n      <>\n        <p>\n          この関数を使用すると、input/select の値を動的に設定できます。 setValue\n          は不要な再レンダリングを避けようとしますが、\n          以下の条件でのみ再レンダリングをトリガーします。\n        </p>\n        <ul>\n          <li>\n            <p>値の更新によってエラーがトリガーされるとき</p>\n          </li>\n          <li>\n            <p>値の更新によってエラーが修正されるとき</p>\n          </li>\n          <li>\n            <p>\n              setValue が初めて実行され、 formState の <code>dirty</code> が\n              true に設定されたとき\n            </p>\n          </li>\n          <li>\n            <p>\n              setValue が実行され、 formState の <code>touched</code>{\" \"}\n              が更新されたとき\n            </p>\n          </li>\n        </ul>\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          このメソッドを呼び出すことで、\n          <code>formState</code> は input の <code>name</code> を{\" \"}\n          <code>touched</code> にプッシュします。\n        </p>\n        <p>\n          <code>shouldValidate</code> を <code>true</code> に設定すると、\n          フィールドのバリデーションがトリガーされます。 例：{\" \"}\n          <code>setValue('name', 'value', true)</code>\n        </p>\n      </>\n    ),\n  },\n  getValues: {\n    title: \"getValues\",\n    description: (\n      <>\n        <p>この関数は、フォーム全体のデータを返します。</p>\n\n        <ul>\n          <li>\n            <p>\n              デフォルトでは、<code>getValues()</code>{\" \"}\n              はフォームデータをフラットな構造で返します。 例：{\" \"}\n              <code>{`{ test: 'data', test1: 'data1'}`}</code>\n            </p>\n          </li>\n          <li>\n            <p>\n              定義されたフォームフィールドで、\n              <code>getValues({`{ nest: true }`})</code> は input の{\" \"}\n              <code>name</code>{\" \"}\n              属性に基づいてネストされた構造でデータを返します。 例：{\" \"}\n              <code>{`{ test: [1, 2], test1: { data: '23' } }`}</code>\n            </p>\n          </li>\n        </ul>\n      </>\n    ),\n  },\n  triggerValidation: {\n    title: \"triggerValidation\",\n    description: (\n      <>\n        <p>フォームで input/select のバリデーションを手動でトリガーします。</p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          バリデーションが失敗すると、<code>errors</code>{\" \"}\n          オブジェクトが更新されます。\n        </p>\n      </>\n    ),\n  },\n  validationSchema: {\n    title: \"validationSchema\",\n    description: (\n      <p>\n        外部バリデーションスキーマでバリデーションルールを一元管理したい場合は、\n        省略可能な引数として <code>useForm</code> に{\" \"}\n        <code>validationSchema</code> を適用できます。 React Hook Form\n        は現在、オブジェクトスキーマバリデーションで{\" \"}\n        <a\n          className={buttonStyles.links}\n          href=\"https://github.com/jquense/yup\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Yup\n        </a>{\" \"}\n        をサポートしています。\n      </p>\n    ),\n  },\n  Controller: {\n    title: \"Controller\",\n    table: (\n      <tbody>\n        <tr>\n          <td>\n            <code>name</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td>✓</td>\n          <td>input のユニークな name 。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>as</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              React.ElementType | string\n            </code>\n          </td>\n          <td>✓</td>\n          <td>\n            制御されたコンポーネント。 例: <code>as=\"input\"</code> または{\" \"}\n            <code>{`as={<TextInput />}`}</code>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>control</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>Object</code>\n          </td>\n          <td>✓</td>\n          <td>\n            <code>control</code> オブジェクトは <code>useForm</code>{\" \"}\n            から呼び出されます。 ただし、 FormContext\n            を使用している場合は省略できます。\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>defaultValue</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>any</code>\n          </td>\n          <td></td>\n          <td>\n            非制御コンポーネントの <code>defaultValue</code> と同じですが、{\" \"}\n            <code>boolean</code> 値を指定すると、チェックボックスの input\n            として扱われます。\n            <p>\n              <b className={typographyStyles.note}>注意:</b>{\" \"}\n              <code>useForm</code> で <code>defaultValue</code> または{\" \"}\n              <code>defaultValues</code> のどちらかを指定する必要があります。\n            </p>\n            <p>\n              <b className={typographyStyles.note}>注意:</b>{\" \"}\n              フォーム内でデフォルト値を引数として <code>reset</code>{\" \"}\n              を呼び出す場合、 インラインの <code>defaultValue</code>{\" \"}\n              を設定する代わりに、 useForm で <code>defaultValues</code>{\" \"}\n              を指定する必要があります。\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>rules</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>Object</code>\n          </td>\n          <td></td>\n          <td>\n            <code>register</code> によるバリデーションルール。\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>onChange</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (args: any | EventTarget) => any\n            </code>\n          </td>\n          <td></td>\n          <td>\n            この prop を使用すると、戻り値をカスタマイズすることができます。\n            外部 UI コンポーネントの <code>value</code> prop{\" \"}\n            の形状を確認してください。 ペイロードの形状が <code>type</code>{\" \"}\n            属性を含むオブジェクトの場合、<code>value</code> または{\" \"}\n            <code>checked</code> 属性が読み込まれます。\n            <CodeArea\n              withOutCopy\n              rawData={`onChange={{([ event ]) => event.target.value}}\nonChange={{([ { checked } ]) => ({ checked })}}`}\n            />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>onChangeName</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td></td>\n          <td>\n            この prop{\" \"}\n            を使用すると、特定のイベント名をターゲットにすることができます。\n            例えば、 <code>onChange</code> イベントが <code>onTextChange</code>{\" \"}\n            と命名されている場合。\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>onFocus</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>() => void</code>\n          </td>\n          <td></td>\n          <td>\n            <p>\n              This callback allows the custom hook to focus on the input when\n              there is an error. This function is applicable for both React and\n              React-Native components as long as they can be focused.\n            </p>\n            <p>\n              Here is a{\" \"}\n              <a\n                href=\"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                working example with MUI\n              </a>\n              .\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>onBlurName</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td></td>\n          <td>\n            この prop{\" \"}\n            を使用すると、特定のイベント名をターゲットにすることができます。\n            例えば、 <code>onBlur</code> イベントが <code>onTextBlur</code>{\" \"}\n            と命名されている場合。\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>valueName</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td></td>\n          <td>\n            この prop を使用すると、<code>value</code> prop をオーバーライドし、\n            <code>value</code> prop\n            を使用しない他のコンポーネントをサポートできます。 例えば、{\" \"}\n            <code>checked</code>, <code>selected</code> 等...\n          </td>\n        </tr>\n      </tbody>\n    ),\n    description: (\n      <>\n        <p>\n          React Hook Form は、非制御コンポーネントとネイティブ HTML input{\" \"}\n          をサポートしていますが、{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/JedWatson/react-select\"\n          >\n            React-Select\n          </a>{\" \"}\n          や{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/ant-design/ant-design\"\n          >\n            AntD\n          </a>{\" \"}\n          、{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://material-ui.com/\"\n          >\n            Material-UI\n          </a>\n          などの外部の制御された UI{\" \"}\n          コンポーネントライブラリと組み合わせての使用​​を避けることは難しいです。\n          このラッパーコンポーネントにより、制御されたコンポーネントと組み合わせて簡単に使用​​できるようになります。\n        </p>\n        <p>\n          Controllerコンポーネントへ渡す全ての props は、\n          <code>as</code> prop で指定した Component インスタンスに転送されます。\n          つまり、<code>label</code> prop を必要とするカスタム{\" \"}\n          <code>Switch</code> コンポーネントがあるとします。 この{\" \"}\n          <code>label</code> prop を Controller{\" \"}\n          コンポーネントに直接渡すことができます。\n          <code>name</code> prop{\" \"}\n          は、主に後でフォームから値にアクセスするために使用されます。\n        </p>\n      </>\n    ),\n  },\n  useFormContext: {\n    title: \"useFormContext\",\n    introduction: (\n      <p>\n        フォームコンテキストは、コンポーネントツリーに深くネストされた input\n        があり、 メソッドを <code>props</code>{\" \"}\n        として深く渡すことが苦痛になる場合の問題を解決することを目的としています。\n      </p>\n    ),\n    description: (\n      <>\n        <p>\n          フォームが <code>FormContext</code> でラップされると、\n          ラップされた子コンポーネントで <code>useFormContext</code> を使用して{\" \"}\n          <code className={typographyStyles.typeText}>function</code>{\" \"}\n          を呼び出すことができます。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          <code>useFormContext</code> を呼び出すと全ての <code>useForm</code>{\" \"}\n          フック関数が得られます。\n        </p>\n      </>\n    ),\n  },\n  control: {\n    title: \"control\",\n    description: (\n      <p>\n        このオブジェクトは、 React Hook Form の Controller{\" \"}\n        コンポーネント用に作成され、 React Hook Form{\" \"}\n        に制御されたコンポーネントを登録するためのメソッドが含まれています。\n      </p>\n    ),\n  },\n  ErrorMessage: {\n    title: \"ErrorMessage\",\n    description: (\n      <p>\n        関連する input{\" \"}\n        のエラーメッセージを表示するためのシンプルなコンポーネント。\n      </p>\n    ),\n    table: (\n      <tbody>\n        <tr>\n          <td>\n            <code>name</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td>✓</td>\n          <td>関連するフィールド名</td>\n        </tr>\n        <tr>\n          <td>\n            <code>errors</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>object</code>\n          </td>\n          <td>✓</td>\n          <td>\n            React Hook Form の <code>errors</code> オブジェクト\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>message</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>string</code>\n          </td>\n          <td></td>\n          <td>インラインエラーメッセージ。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>as</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              React.ElementType | string\n            </code>\n          </td>\n          <td></td>\n          <td>\n            ラッパーコンポーネント、または HTML タグ。 例:{\" \"}\n            <code>as=\"span\"</code> または <code>{`as={<Text />}`}</code>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>children</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              ({`{ message: string, messages?: string[]}`}) => any\n            </code>\n          </td>\n          <td></td>\n          <td>\n            これは、単一または複数のエラーメッセージをレンダリングするための{\" \"}\n            <a\n              href=\"https://reactjs.org/docs/render-props.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              render prop\n            </a>{\" \"}\n            です。\n            <p>\n              <b className={typographyStyles.note}>注意:</b>{\" \"}\n              <code>messages</code> を使用するためには、 validateCriteriaMode を{\" \"}\n              'all' に設定する必要があります。\n            </p>\n          </td>\n        </tr>\n      </tbody>\n    ),\n  },\n  NativeValidation: {\n    title: \"Browser built-in validation\",\n    description: (\n      <>\n        <p>\n          下記の例は、ブラウザバリデーションを活用する方法を示しています。\n          <code>nativeValidation</code> を <code>true</code> に設定するだけで、\n          残りの構文は標準のバリデーションと同じになります。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意</b>:\n          この機能は使用率が低いため V4 で削除されましたが、 V3{\" \"}\n          では引き続き使用できます。\n        </p>\n      </>\n    ),\n  },\n  useFieldArray: {\n    title: \"useFieldArray\",\n    description: (\n      <>\n        <p>\n          フィールド配列（動的な複数の input）を操作するためのカスタムフック。\n          このフックの背後にある動機は、より良いユーザーエクスペリエンスとフォームのパフォーマンスを提供することです。\n          <a\n            href=\"https://www.youtube.com/watch?v=Q7lrHuUfgIs\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            この短いビデオ\n          </a>\n          で、制御されたフィールド配列と非制御フィールド配列を比較できます。\n        </p>\n\n        <p>このフックは、次のオブジェクトと関数を提供します。</p>\n\n        <CodeArea rawData={useFieldArrayArgument} />\n\n        <p>\n          <b className={typographyStyles.note}>重要:</b>{\" \"}\n          <code>useFieldArray</code>{\" \"}\n          は非制御コンポーネントに基づいて構築されます。\n          下記の注意事項は、実装時の動作を理解し、注意するのに役立ちます。\n        </p>\n\n        <ul>\n          <li>\n            <p>\n              <code>useForm</code> フックで <code>defaultValues</code>{\" \"}\n              を指定することにより、 <code>fields</code>{\" \"}\n              配列に値を格納することができます。\n            </p>\n          </li>\n          <li>\n            <p>\n              <code>fields</code> オブジェクトから <code>id</code>{\" \"}\n              をコンポーネントの <code>key</code>{\" \"}\n              に割り当てていることを確認してください。\n            </p>\n          </li>\n          <li>\n            <p>\n              必ず<code>defaultValue</code>をに設定してください\n              <code>fields[index]</code>デフォルト値を設定する場合、\n              入力で削除またはリセットします。\n            </p>\n          </li>\n          <li>\n            <p>\n              次々とアクションを呼び出すことはできません。アクションはレンダリングごとにトリガーする必要があります。\n            </p>\n            <CodeArea\n              withOutCopy\n              rawData={`// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            `}\n            />\n          </li>\n          <li>\n            <p>\n              <code>useFieldArray</code> を使用する際には、\n              <code>{`ref={register}`}</code> ではなく{\" \"}\n              <code>{`ref={register()}`}</code> を適用して、 <code>map</code>{\" \"}\n              中に <code>register</code> が呼び出されるようにすることが\n              <strong>重要</strong>です。\n            </p>\n          </li>\n          <li>\n            <code>useEffect</code>のカスタムレジスタでは機能しません。\n          </li>\n        </ul>\n      </>\n    ),\n    table: (\n      <>\n        <tr>\n          <td>\n            <code>fields</code>\n          </td>\n          <td width={320}>\n            <code className={typographyStyles.typeText}>\n              object & {`{ id: string }`}\n            </code>\n          </td>\n          <td>\n            このオブジェクトは、input\n            をマップおよびレンダリングするための信頼できる情報源です。\n            <p>\n              <b className={typographyStyles.note}>重要:</b> 各 input{\" \"}\n              は制御することができないため、 マップされたコンポーネントには{\" \"}\n              <code>id</code> が必須です。 これは、React{\" \"}\n              が変更、追加もしくは削除されたのかを識別するのに役立ちます。\n            </p>\n            <p>\n              eg: <code>{`{fields.map(d => <input key={d.id} />)}`}</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>append</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (obj: object | object[]) => void\n            </code>\n          </td>\n          <td>フィールドの最後に input を追加します。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>prepend</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (obj: object | object[]) => void\n            </code>\n          </td>\n          <td>フィールドの先頭に input を追加します。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>insert</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (index: number, value: object) => void\n            </code>\n          </td>\n          <td>特定の位置に input を挿入します。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>swap</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (from: number, to: number) => void\n            </code>\n          </td>\n          <td>input の位置を入れ替えます。</td>\n        </tr>\n        <tr>\n          <td>\n            <code>move</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (from: number, to: number) => void\n            </code>\n          </td>\n          <td>\n            input を別の位置に移動します。\n            <p>\n              <b className={typographyStyles.note}>注意:</b> <code>move</code>{\" \"}\n              と <code>swap</code> の違いは、\n              <code>move</code> を呼び出し続けると input{\" \"}\n              が円を描いて押し込まれるのに対して、\n              <code>swap</code> は2つの input の位置を変更するだけです。\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <code>remove</code>\n          </td>\n          <td>\n            <code className={typographyStyles.typeText}>\n              (index?: number | number[]) => void\n            </code>\n          </td>\n          <td>\n            特定の位置の input を削除します。引数で index を渡さない場合は全ての{\" \"}\n            input を削除します。\n          </td>\n        </tr>\n      </>\n    ),\n  },\n  validationResolver: {\n    title: \"validationResolver\",\n    description: (\n      <>\n        <p>\n          この関数を使用すると、\n          <a\n            href=\"https://github.com/hapijs/joi\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Joi\n          </a>\n          、\n          <a\n            href=\"https://github.com/ianstormtaylor/superstruct\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Superstruct\n          </a>{\" \"}\n          などの任意の外部のバリデーションメソッドを実行できます。 実際には、Yup{\" \"}\n          を外部の（スキーマ）バリデーションライブラリとして制限するだけがゴールではありません。\n          私たちは React Hook Form{\" \"}\n          で動作する多くのバリデーションライブラリをサポートしたいと思っています。\n          カスタムバリデーションロジックを作成して検証することもできます。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b> <code>values</code> と{\" \"}\n          <code>errors</code>{\" \"}\n          を含むオブジェクトを返していることを確認してください。\n          デフォルト値は空のオブジェクト <code>{`{}`}</code>{\" \"}\n          である必要があります。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b> 返す{\" \"}\n          <code>errors</code> オブジェクトのキーは、フォーム内の input（\n          <code>name</code>属性）に関連させる必要があります。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b> この関数は{\" \"}\n          <code>validationSchema</code>{\" \"}\n          と同様にカスタムフック内にキャッシュされますが、{\" \"}\n          <code>validationContext</code>{\" \"}\n          は再レンダリングのたびに変更できるミュータブルなオブジェクトです。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b>{\" \"}\n          ライブラリ自体が特定のフィールドに対してエラーオブジェクトを評価し、\n          それに応じて再レンダリングをトリガーするため、ユーザーの入力中、一度に一つのフィールドでのみ{\" \"}\n          input の再検証が発生します。\n        </p>\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport Layout from \"../../components/layout\"\nimport Seo from \"../../components/seo\"\nimport ApiPage from \"../../components/ApiPage\"\nimport api from \"../../data/jp/api-v5\"\n\nconst ApiZh = ({\n  location,\n}: {\n  location: {\n    search: string\n    pathname: string\n  }\n}) => (\n  <Layout location={location} defaultLang=\"jp\">\n    <Seo title={api.title} location={location} />\n    <ApiPage defaultLang=\"jp\" />\n  </Layout>\n)\n\nexport default ApiZh\n"],"sourceRoot":""}