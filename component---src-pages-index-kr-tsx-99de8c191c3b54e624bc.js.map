{"version":3,"sources":["webpack:///./src/components/FormFields.module.css","webpack:///./src/components/HomePage.tsx","webpack:///./src/components/FormFields.tsx","webpack:///./src/components/Form.tsx","webpack:///./src/pages/index.kr.tsx"],"names":["module","exports","useState","React","useRef","useEffect","options","rootMargin","threshold","location","defaultLang","submitData","updateSubmitData","showBuilder","toggleBuilder","HomeRef","isPlayFeature","setFeaturePlay","isPlayCodeCompare","setCodeComparePlay","isIsolatePlay","setIsolatePlay","isCardPlay","isPlayRender","setRenderPlay","formUpdated","setFormUpdated","language","useStateMachine","state","currentLanguage","search","startsWith","setTimeout","current","scrollIntoView","behavior","IntersectionObserver","featureList","document","querySelector","codeComparison","rendering","isolate","observer","entries","forEach","entry","isIntersecting","target","observe","disconnect","className","styles","root","homeRef","ref","onSubmit","data","containerStyles","centerContent","typographyStyles","h1","home","findInteresting","heading","description","buttonStyles","buttonsGroup","style","maxWidth","primaryButton","onClick","navigate","translateLink","getStarted","errorStyle","border","colors","secondary","background","errorPink","borderLeft","lightPink","FormFields","formData","errors","register","map","field","type","aria-label","name","required","key","marginBottom","value","split","filter","Boolean","option","placeholder","maxLength","minLength","radioGroup","color","autoComplete","pattern","RegExp","max","min","animationProps","start","opacity","end","duration","methods","devTool","useForm","mode","handleSubmit","watch","formState","reset","touched","Object","keys","generic","liveDemo","play","transform","delay","render","note","wrapper","demoForm","title","example","pinkButton","submit","fontSize","margin","darkButton","goToBuilder","edit","watchTitle","length","code","JSON","stringify","errorTitle","error","reduce","previous","rest","touchedTitle","IndexPage","kr"],"mappings":"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","file":"component---src-pages-index-kr-tsx-99de8c191c3b54e624bc.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"radioGroup\":\"FormFields-module--radioGroup--3idzI\"};","import * as React from \"react\"\nimport { navigate } from \"@reach/router\"\nimport Form from \"./Form\"\nimport Header from \"./Header\"\nimport CodeCompareSection from \"./CodeCompareSection\"\nimport CodePerfCompareSection from \"./CodePerfCompareSection\"\nimport IsolateRender from \"./IsolateRender\"\nimport FooterContent from \"./Footer\"\nimport Builder from \"./BuilderPage\"\nimport FeaturesList from \"./FeaturesList\"\nimport { useStateMachine } from \"little-state-machine\"\nimport home from \"../data/home\"\nimport translateLink from \"./logic/translateLink\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport containerStyles from \"../styles/container.module.css\"\nimport buttonStyles from \"../styles/button.module.css\"\nimport styles from \"./HomePage.module.css\"\n\nconst { useState, useRef, useEffect } = React\n\nconst options = {\n  rootMargin: \"0px 0px\",\n  threshold: [1],\n}\n\nfunction HomePage({\n  location,\n  defaultLang,\n}: {\n  location: {\n    search: string\n    pathname: string\n  }\n  defaultLang: string\n}) {\n  const [submitData, updateSubmitData] = useState({})\n  const [showBuilder, toggleBuilder] = useState(false)\n  const HomeRef = useRef(null)\n  const [isPlayFeature, setFeaturePlay] = useState(false)\n  const [isPlayCodeCompare, setCodeComparePlay] = useState(false)\n  const [isIsolatePlay, setIsolatePlay] = useState(false)\n  const [isCardPlay, setCardPlay] = useState(false)\n  const [isPlayRender, setRenderPlay] = useState(false)\n  const [formUpdated, setFormUpdated] = useState(false)\n  const {\n    state: { language },\n  } = useStateMachine()\n  const { currentLanguage } =\n    language && language.currentLanguage\n      ? language\n      : { currentLanguage: defaultLang }\n\n  const onSubmit = (data) => {\n    updateSubmitData(data)\n  }\n\n  useEffect(() => {\n    if (location.search.startsWith(\"?goToDemo\")) {\n      setTimeout(() => {\n        HomeRef.current.scrollIntoView({ behavior: \"smooth\" })\n\n        if (location.search.startsWith(\"?goToDemo&updated=true\")) {\n          setFormUpdated(true)\n        }\n      }, 100)\n    }\n\n    if (!IntersectionObserver) {\n      setFeaturePlay(true)\n      setCodeComparePlay(true)\n    }\n\n    const featureList = document.querySelector(\"#featureLast\")\n    const codeComparison = document.querySelector(\"#codeComparison\")\n    const rendering = document.querySelector(\"#rendering\")\n    const isolate = document.querySelector(\"#isolate\")\n    const card = document.querySelector(\"#card\")\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (entry.target === featureList && !isPlayFeature) {\n            setFeaturePlay(true)\n          }\n          if (entry.target === codeComparison && !isPlayCodeCompare) {\n            setCodeComparePlay(true)\n          }\n          if (entry.target === rendering && !isPlayRender) {\n            setRenderPlay(true)\n          }\n          if (entry.target === isolate && !isIsolatePlay) {\n            setIsolatePlay(true)\n          }\n          // if (entry.target === card && !isCardPlay) {\n          //   setCardPlay(true)\n          // }\n        }\n      })\n    }, options)\n\n    observer.observe(featureList)\n    observer.observe(codeComparison)\n    observer.observe(rendering)\n    observer.observe(isolate)\n    // observer.observe(card)\n\n    return () => observer.disconnect()\n  }, [])\n\n  return (\n    <div className={styles.root}>\n      {showBuilder && (\n        <Builder\n          showBuilder\n          toggleBuilder={toggleBuilder}\n          HomeRef={HomeRef}\n          defaultLang={defaultLang}\n        />\n      )}\n\n      <Header\n        isCardPlay={isCardPlay}\n        homeRef={HomeRef}\n        defaultLang={defaultLang}\n      />\n\n      <FeaturesList\n        isPlayFeature={isPlayFeature}\n        currentLanguage={currentLanguage}\n      />\n\n      <CodeCompareSection\n        isPlayCodeCompare={isPlayCodeCompare}\n        currentLanguage={currentLanguage}\n      />\n\n      <IsolateRender\n        isIsolatePlay={isIsolatePlay}\n        currentLanguage={currentLanguage}\n      />\n\n      <CodePerfCompareSection\n        isPlayRender={isPlayRender}\n        currentLanguage={currentLanguage}\n      />\n\n      <div ref={HomeRef} />\n\n      <Form\n        {...{\n          onSubmit,\n          submitData,\n          toggleBuilder,\n          formUpdated,\n          currentLanguage,\n        }}\n      />\n\n      <section className={containerStyles.centerContent}>\n        <h1 className={typographyStyles.h1}>\n          {home.findInteresting[currentLanguage].heading}\n        </h1>\n        <p>{home.findInteresting[currentLanguage].description}</p>\n        <div\n          className={buttonStyles.buttonsGroup}\n          style={{\n            maxWidth: 500,\n          }}\n        >\n          <button\n            className={buttonStyles.primaryButton}\n            onClick={() => {\n              navigate(translateLink(\"get-started\", currentLanguage))\n            }}\n          >\n            {home.getStarted[currentLanguage]}\n          </button>\n          <button\n            className={buttonStyles.primaryButton}\n            onClick={() => {\n              navigate(translateLink(\"api\", currentLanguage))\n            }}\n          >\n            API\n          </button>\n        </div>\n      </section>\n\n      <FooterContent currentLanguage={currentLanguage} />\n    </div>\n  )\n}\n\nexport default React.memo(HomePage)\n","import * as React from \"react\"\nimport colors from \"../styles/colors\"\nimport styles from \"./FormFields.module.css\"\n\nconst errorStyle = {\n  border: `1px solid ${colors.secondary}`,\n  background: colors.errorPink,\n  borderLeft: `10px solid ${colors.lightPink}`,\n}\n\nconst FormFields = ({ formData, errors, register }) => {\n  return (formData || []).map((field) => {\n    switch (field.type) {\n      case \"select\":\n        return (\n          <select\n            aria-label={field.name}\n            name={field.name}\n            ref={register({ required: field.required })}\n            key={field.name}\n            style={{\n              marginBottom: 20,\n              ...(errors[field.name] ? errorStyle : null),\n            }}\n          >\n            <option value=\"\">Select...</option>\n            {field.options &&\n              field.options\n                .split(\";\")\n                .filter(Boolean)\n                .map((option) => {\n                  return <option key={option}>{option}</option>\n                })}\n          </select>\n        )\n      case \"textarea\":\n        return (\n          <textarea\n            aria-label={field.name}\n            name={field.name}\n            placeholder={field.name}\n            ref={register({\n              required: field.required,\n              ...(field.maxLength ? { maxLength: field.maxLength } : null),\n              ...(field.minLength ? { minLength: field.minLength } : null),\n            })}\n            key={field.name}\n            style={{\n              marginBottom: 20,\n              ...(errors[field.name] ? errorStyle : null),\n            }}\n          />\n        )\n      case \"radio\":\n        return (\n          <div\n            className={styles.radioGroup}\n            key={field.name}\n            style={{ marginBottom: 20 }}\n            aria-label={field.name}\n          >\n            {field.options &&\n              field.options\n                .split(\";\")\n                .filter(Boolean)\n                .map((name) => (\n                  <label\n                    key={name}\n                    style={{\n                      ...(errors[field.name]\n                        ? { color: colors.lightPink }\n                        : null),\n                    }}\n                  >\n                    {name}\n                    &nbsp;\n                    <input\n                      type=\"radio\"\n                      name={field.name}\n                      value={name}\n                      ref={register({ required: field.required })}\n                    />\n                  </label>\n                ))}\n          </div>\n        )\n      default:\n        return (\n          <input\n            style={{\n              marginBottom: 20,\n              ...(errors[field.name] ? errorStyle : null),\n            }}\n            aria-label={field.name}\n            autoComplete=\"off\"\n            key={field.name}\n            type={field.type}\n            name={field.name}\n            placeholder={field.name}\n            ref={register({\n              required: field.required,\n              ...(field.pattern\n                ? { pattern: new RegExp(field.pattern) }\n                : null),\n              ...(field.max ? { max: field.max } : null),\n              ...(field.min ? { min: field.min } : null),\n              ...(field.maxLength ? { maxLength: field.maxLength } : null),\n              ...(field.minLength ? { minLength: field.minLength } : null),\n            })}\n          />\n        )\n    }\n  })\n}\n\nexport default FormFields\n","import * as React from \"react\"\nimport { Animate } from \"react-simple-animate\"\nimport { useStateMachine } from \"little-state-machine\"\nimport FormFields from \"./FormFields\"\nimport goToBuilder from \"./utils/goToBuilder\"\nimport { useForm } from \"react-hook-form\"\nimport home from \"../data/home\"\nimport generic from \"../data/generic\"\nimport buttonStyles from \"../styles/button.module.css\"\nimport containerStyles from \"../styles/container.module.css\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport styles from \"./Form.module.css\"\n\nconst animationProps = {\n  start: {\n    opacity: 0,\n  },\n  end: {\n    opacity: 1,\n  },\n  duration: 0.8,\n}\n\nfunction Form({\n  onSubmit,\n  submitData,\n  toggleBuilder,\n  formUpdated,\n  currentLanguage,\n  methods,\n  devTool,\n}: {\n  onSubmit: any\n  submitData: Object\n  toggleBuilder: (state: boolean) => void\n  formUpdated: boolean\n  currentLanguage: string\n  methods?: any\n  devTool?: boolean\n}) {\n  const { register, errors, handleSubmit, watch, formState, reset } =\n    methods ||\n    useForm({\n      mode: \"onChange\",\n    })\n  const touched = Object.keys(formState.touched)\n  const {\n    state: { formData },\n  } = useStateMachine()\n\n  return (\n    <>\n      {!devTool && (\n        <div className={containerStyles.centerContent}>\n          <h1 className={typographyStyles.h1}>\n            {generic.liveDemo[currentLanguage]}\n          </h1>\n          {formUpdated && (\n            <Animate\n              play={formUpdated}\n              start={{ opacity: 0, transform: \"translateY(20px)\" }}\n              end={{ opacity: 1 }}\n              delay={1.5}\n              render={({ style }) => (\n                <p style={{ marginBottom: 20, ...style }}>\n                  <b className={typographyStyles.note}>Note:</b> your form has\n                  been updated.\n                </p>\n              )}\n            />\n          )}\n          <p>{home.liveDemo[currentLanguage].description}</p>\n        </div>\n      )}\n\n      <div className={styles.wrapper}>\n        <form className={styles.demoForm} onSubmit={handleSubmit(onSubmit)}>\n          <h2 className={typographyStyles.title}>\n            {generic.example[currentLanguage]}\n          </h2>\n\n          <FormFields {...{ formData, errors, register }} />\n\n          <button className={buttonStyles.pinkButton}>\n            {home.liveDemo[currentLanguage].submit}\n          </button>\n\n          {!devTool && (\n            <>\n              <h2\n                className={typographyStyles.title}\n                style={{\n                  fontSize: 14,\n                  maxWidth: \"80%\",\n                  margin: \"0 auto\",\n                }}\n              >\n                or\n              </h2>\n\n              <button\n                className={buttonStyles.darkButton}\n                type=\"button\"\n                onClick={() => {\n                  reset()\n                  toggleBuilder(true)\n                  goToBuilder()\n                }}\n              >\n                {generic.edit[currentLanguage]}\n              </button>\n            </>\n          )}\n        </form>\n\n        {!devTool && (\n          <>\n            <section>\n              <h2 className={typographyStyles.title}>\n                {home.liveDemo[currentLanguage].watchTitle}\n              </h2>\n              <p>ⓘ {home.liveDemo[currentLanguage].watch}</p>\n              <Animate\n                play={Object.keys(watch()).length > 0}\n                {...animationProps}\n                render={({ style }) => (\n                  <pre className={styles.code} style={style}>\n                    {JSON.stringify(watch(), null, 2)}\n                  </pre>\n                )}\n              />\n            </section>\n            <section>\n              <h2 className={typographyStyles.title}>\n                {home.liveDemo[currentLanguage].errorTitle}\n              </h2>\n              <p>ⓘ {home.liveDemo[currentLanguage].error}</p>\n              <Animate {...animationProps} play={!!Object.keys(errors).length}>\n                <pre className={styles.code}>\n                  {Object.keys(errors).length > 0 &&\n                    JSON.stringify(\n                      Object.entries(errors).reduce(\n                        (previous, [key, { ref, ...rest }]) => {\n                          previous[key] = rest\n                          return previous\n                        },\n                        {}\n                      ),\n                      null,\n                      2\n                    )}\n                </pre>\n              </Animate>\n            </section>\n\n            <section>\n              <h2 className={typographyStyles.title}>\n                {home.liveDemo[currentLanguage].touchedTitle}\n              </h2>\n              <p>ⓘ {home.liveDemo[currentLanguage].touched}</p>\n              <Animate\n                play={!!touched.length}\n                {...animationProps}\n                render={({ style }) => (\n                  <pre className={styles.code} style={style}>\n                    {JSON.stringify(touched, null, 2)}\n                  </pre>\n                )}\n              />\n            </section>\n\n            {!!Object.keys(submitData).length && (\n              <section>\n                <h2 className={typographyStyles.title}>\n                  {home.liveDemo[currentLanguage].submit}\n                </h2>\n                <Animate\n                  play={!!Object.keys(submitData).length}\n                  {...animationProps}\n                  render={({ style }) => (\n                    <pre className={styles.code} style={style}>\n                      {Object.keys(submitData).length > 0 &&\n                        JSON.stringify(submitData, null, 2)}\n                    </pre>\n                  )}\n                />\n              </section>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(Form)\n","import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Home from \"../components/HomePage\"\nimport home from \"../data/home\"\n\nconst IndexPage = ({\n  location,\n}: {\n  location: {\n    search: string\n    pathname: string\n  }\n}) => (\n  <Layout location={location} defaultLang=\"kr\">\n    <Seo\n      title={home.title.kr}\n      description={home.description.kr}\n      location={location}\n    />\n    <Home location={location} defaultLang=\"kr\" />\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}