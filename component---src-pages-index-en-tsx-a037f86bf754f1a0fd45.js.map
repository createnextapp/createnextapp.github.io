{"version":3,"sources":["webpack:///./src/pages/index.en.tsx","webpack:///./src/components/HomeePage.tsx"],"names":["IndexPage","location","defaultLang","title","homee","en","description","useState","React","useRef","useEffect","options","rootMargin","threshold","showBuilder","toggleBuilder","HomeRef","isPlayFeature","setFeaturePlay","isPlayCodeCompare","setCodeComparePlay","isIsolatePlay","setIsolatePlay","isCardPlay","isPlayRender","setRenderPlay","setFormUpdated","language","useStateMachine","state","currentLanguage","search","startsWith","setTimeout","current","scrollIntoView","behavior","IntersectionObserver","featureList","document","querySelector","codeComparison","rendering","isolate","observer","entries","forEach","entry","isIntersecting","target","observe","disconnect","className","styles","root","homeRef","ref","containerStyles","centerContent","typographyStyles","h1","home","findInteresting","heading","buttonStyles","buttonsGroup","style","maxWidth","primaryButton","onClick","navigate","translateLink","getStarted"],"mappings":"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","file":"component---src-pages-index-en-tsx-a037f86bf754f1a0fd45.js","sourcesContent":["import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Homee from \"../components/HomeePage\"\nimport homee from \"../data/home\"\n\nconst IndexPage = ({\n  location,\n}: {\n  location: {\n    search: string\n    pathname: string\n  }\n}) => (\n  <Layout location={location} defaultLang=\"en\">\n    <Seo\n      title={homee.title.en}\n      description={homee.description.en}\n      location={location}\n    />\n    <Homee location={location} defaultLang=\"en\" />\n  </Layout>\n)\n\nexport default IndexPage\n","import * as React from \"react\"\nimport { navigate } from \"@reach/router\"\nimport Form from \"./Form\"\nimport Headerr from \"./Header\"\nimport CodeCompareSection from \"./CodeCompareSection\"\nimport CodePerfCompareSection from \"./CodePerfCompareSection\"\nimport IsolateRender from \"./IsolateRender\"\nimport FooterContent from \"./Footer\"\nimport Builder from \"./BuilderPage\"\nimport FeaturesList from \"./FeaturesList\"\nimport { useStateMachine } from \"little-state-machine\"\nimport home from \"../data/home\"\nimport translateLink from \"./logic/translateLink\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport containerStyles from \"../styles/container.module.css\"\nimport buttonStyles from \"../styles/button.module.css\"\nimport styles from \"./HomePage.module.css\"\n\nconst { useState, useRef, useEffect } = React\n\nconst options = {\n  rootMargin: \"0px 0px\",\n  threshold: [1],\n}\n\nfunction HomePage({\n  location,\n  defaultLang,\n}: {\n  location: {\n    search: string\n    pathname: string\n  }\n  defaultLang: string\n}) {\n  const [submitData, updateSubmitData] = useState({})\n  const [showBuilder, toggleBuilder] = useState(false)\n  const HomeRef = useRef(null)\n  const [isPlayFeature, setFeaturePlay] = useState(false)\n  const [isPlayCodeCompare, setCodeComparePlay] = useState(false)\n  const [isIsolatePlay, setIsolatePlay] = useState(false)\n  const [isCardPlay, setCardPlay] = useState(false)\n  const [isPlayRender, setRenderPlay] = useState(false)\n  const [formUpdated, setFormUpdated] = useState(false)\n  const {\n    state: { language },\n  } = useStateMachine()\n  const { currentLanguage } =\n    language && language.currentLanguage\n      ? language\n      : { currentLanguage: defaultLang }\n\n  const onSubmit = (data) => {\n    updateSubmitData(data)\n  }\n\n  useEffect(() => {\n    if (location.search.startsWith(\"?goToDemo\")) {\n      setTimeout(() => {\n        HomeRef.current.scrollIntoView({ behavior: \"smooth\" })\n\n        if (location.search.startsWith(\"?goToDemo&updated=true\")) {\n          setFormUpdated(true)\n        }\n      }, 100)\n    }\n\n    if (!IntersectionObserver) {\n      setFeaturePlay(true)\n      setCodeComparePlay(true)\n    }\n\n    const featureList = document.querySelector(\"#featureLast\")\n    const codeComparison = document.querySelector(\"#codeComparison\")\n    const rendering = document.querySelector(\"#rendering\")\n    const isolate = document.querySelector(\"#isolate\")\n    const card = document.querySelector(\"#card\")\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (entry.target === featureList && !isPlayFeature) {\n            setFeaturePlay(true)\n          }\n          if (entry.target === codeComparison && !isPlayCodeCompare) {\n            setCodeComparePlay(true)\n          }\n          if (entry.target === rendering && !isPlayRender) {\n            setRenderPlay(true)\n          }\n          if (entry.target === isolate && !isIsolatePlay) {\n            setIsolatePlay(true)\n          }\n          // if (entry.target === card && !isCardPlay) {\n          //   setCardPlay(true)\n          // }\n        }\n      })\n    }, options)\n\n    observer.observe(featureList)\n    observer.observe(codeComparison)\n    observer.observe(rendering)\n    observer.observe(isolate)\n    // observer.observe(card)\n\n    return () => observer.disconnect()\n  }, [])\n\n  return (\n    <div className={styles.root}>\n      {showBuilder && (\n        <Builder\n          showBuilder\n          toggleBuilder={toggleBuilder}\n          HomeRef={HomeRef}\n          defaultLang={defaultLang}\n        />\n      )}\n\n      <Headerr\n        isCardPlay={isCardPlay}\n        homeRef={HomeRef}\n        defaultLang={defaultLang}\n      />\n\n      <FeaturesList\n        isPlayFeature={isPlayFeature}\n        currentLanguage={currentLanguage}\n      />\n\n      <CodeCompareSection\n        isPlayCodeCompare={isPlayCodeCompare}\n        currentLanguage={currentLanguage}\n      />\n\n      <IsolateRender\n        isIsolatePlay={isIsolatePlay}\n        currentLanguage={currentLanguage}\n      />\n\n      <CodePerfCompareSection\n        isPlayRender={isPlayRender}\n        currentLanguage={currentLanguage}\n      />\n\n      <div ref={HomeRef} />\n\n      <section className={containerStyles.centerContent}>\n        <h1 className={typographyStyles.h1}>\n          {home.findInteresting[currentLanguage].heading}\n        </h1>\n        <p>{home.findInteresting[currentLanguage].description}</p>\n        <div\n          className={buttonStyles.buttonsGroup}\n          style={{\n            maxWidth: 500,\n          }}\n        >\n          <button\n            className={buttonStyles.primaryButton}\n            onClick={() => {\n              navigate(translateLink(\"get-started\", currentLanguage))\n            }}\n          >\n            {home.getStarted[currentLanguage]}\n          </button>\n          <button\n            className={buttonStyles.primaryButton}\n            onClick={() => {\n              navigate(translateLink(\"api\", currentLanguage))\n            }}\n          >\n            API\n          </button>\n        </div>\n      </section>\n\n      <FooterContent currentLanguage={currentLanguage} />\n    </div>\n  )\n}\n\nexport default React.memo(HomePage)\n"],"sourceRoot":""}