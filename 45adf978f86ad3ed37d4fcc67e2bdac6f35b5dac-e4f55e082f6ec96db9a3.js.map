{"version":3,"sources":["webpack:///./src/components/TabGroup.tsx","webpack:///./src/data/pt/getStarted.tsx","webpack:///./src/components/TabGroup.module.css","webpack:///./src/components/GetStarted.tsx","webpack:///./src/components/codeExamples/defaultExample.ts","webpack:///./src/components/codeExamples/defaultExampleTs.tsx","webpack:///./src/data/es/getStarted.tsx","webpack:///./src/data/ru/getStarted.tsx","webpack:///./src/data/getStarted.tsx","webpack:///./src/components/GetStartedPage.tsx","webpack:///./src/components/codeExamples/reactNative.ts","webpack:///./src/components/codeExamples/typeScript.ts","webpack:///./src/components/codeExamples/getStarted.ts","webpack:///./src/components/SideMenu.tsx","webpack:///./src/components/codeExamples/reactNativeController.ts","webpack:///./src/data/en/getStarted.tsx","webpack:///./src/components/SideMenu.module.css","webpack:///./src/components/GetStarted.module.css","webpack:///./src/data/kr/getStarted.tsx","webpack:///./src/components/learnMore.tsx","webpack:///./src/data/zh/getStarted.tsx","webpack:///./src/data/jp/getStarted.tsx"],"names":["children","buttonLabels","state","useStateMachine","React","index","setIndex","lightMode","setting","className","styles","buttonTabGroup","lightButtonTabGroup","style","marginBottom","marginTop","map","label","currentIndex","key","cursor","borderTop","disabled","onClick","child","display","title","header","description","video","install","linkTitle","example","register","typographyStyles","note","to","applyValidation","currentLanguage","href","target","rel","translateLink","adapting","controlledInput","workWithUI","rawData","uiLibraryHookInput","globalState","reactNative","typeScript","errors","module","exports","GetStarted","quickStartRef","getStarted","ref","installCode","lightInstallCode","copyButton","copyClipBoard","alert","generic","copied","codeAreaStyles","copyIcon","copy","CodeArea","tsRawData","url","en","getStartedEn","es","getStartedEs","pt","getStartedPt","kr","getStartedKr","jp","getStartedJp","zh","getStartedZh","ru","getStartedRu","useRef","useEffect","getStartedContent","enLinks","Faq","location","defaultLang","language","links","sectionsRef","quickstart","videotutorial","adaptingexistingform","workwithuilibrary","controlledinput","integrateglobalstate","handleerrors","registerfields","applyvalidation","reactnative","typescript","goToSection","name","console","log","window","hashIndex","indexOf","filterName","replace","history","pushState","substr","refName","toLowerCase","current","scrollIntoView","behavior","hash","setTimeout","containerStyles","container","headingWithTopMargin","id","subHeading","wrapper","SideMenu","isStatic","textAlign","width","height","src","frameBorder","allow","allowFullScreen","registerCode","migrateCode","uiLibrary","controlledComponent","TabGroup","isExpo","reactNativeController","Footer","activateStyle","borderBottom","colors","lightPink","activeIndex","menu","lightMenu","titleList","fontSize","color","lightBlue","rawLink","link","enLink","linkName","startsWith","test","includes","code","top","position","paddingLeft","marginLeft","length","borderLeft","paddingTop","arrow","arrowLast","left","codeExample","LearnMore","centerContent","learnMore","buttonStyles","primaryButton","navigate","margin","buttonText"],"mappings":"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","file":"45adf978f86ad3ed37d4fcc67e2bdac6f35b5dac-e4f55e082f6ec96db9a3.js","sourcesContent":["import * as React from \"react\"\nimport { useStateMachine } from \"little-state-machine\"\nimport styles from \"./TabGroup.module.css\"\n\nexport default ({ children, buttonLabels }) => {\n  const { state } = useStateMachine()\n  const [index, setIndex] = React.useState(0)\n  const lightMode = state?.setting?.lightMode\n\n  return (\n    <div>\n      <div\n        className={`${styles.buttonTabGroup} ${\n          lightMode ? styles.lightButtonTabGroup : \"\"\n        }`}\n        style={{ marginBottom: -15, marginTop: 30 }}\n      >\n        {buttonLabels.map((label, currentIndex) => (\n          <button\n            key={label}\n            style={{\n              ...(currentIndex === index\n                ? { cursor: \"default\", borderTop: \"1px solid transparent\" }\n                : {}),\n            }}\n            disabled={currentIndex === index}\n            onClick={() => setIndex(currentIndex)}\n          >\n            {label}\n          </button>\n        ))}\n      </div>\n      {children.map((child, currentIndex) => {\n        return (\n          <div\n            key={currentIndex}\n            style={{\n              display: index === currentIndex ? \"block\" : \"none\",\n            }}\n          >\n            {child}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"@reach/router\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"Comece agora\",\n  header: {\n    title: \"Comece agora\",\n    description: \"Simples validação de formulário com React Hook Form.\",\n  },\n  video: {\n    title: \"Vídeo Tutorial\",\n    description: `Neste vídeo tutorial, é demonstrado o uso o conceito e uso básico usando React Hook Form.`,\n  },\n  install: {\n    linkTitle: \"Instalação\",\n    title: \"Começo rápido\",\n    description: `Instalar o React Hook Form necessita apenas de um único comando e você estará pronto pra rodar.`,\n  },\n  example: {\n    title: \"Examplo\",\n    description: `O seguinte código vai demonstrar o uso básico:`,\n  },\n  register: {\n    title: \"Registro dos campos\",\n    description: (\n      <>\n        <p>\n          Um dos principais conceitos do React Hook Form é{\" \"}\n          <strong>\n            <code>register</code>\n          </strong>{\" \"}\n          seu componente incontrolado no Hook e consequentemente habilitando o\n          valor, para ser validado e coletado para submissão.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota:</b> Cada campo{\" \"}\n          <strong>obrigatório</strong> precisa ter um único <code>name</code>{\" \"}\n          como chave do processo de registro.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota: </b>React Native vai\n          precisar do uso manual do comando de registro:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code> or\n          usando <Link to=\"/api#Controller\">Controller</Link> para englobar e\n          registrar automaticamente seu componente. Você também pode ler mais na\n          Seção <Link to=\"/api/#ReactNative\">React Native</Link>.\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"Aplicar validação\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form cria validação de formulário simples, alinhado com os\n          existentes{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HTML padrão para validação de formulário\n          </a>\n          .\n        </p>\n\n        <p>Lista de regras validações suportadas:</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          Você pode ler mais detalhes em cada uma das regras em{\" \"}\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            seção de registro\n          </Link>\n          .\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"Adaptando um formulário existente\",\n    description: (\n      <>\n        Trabalhar com um formulário existente é simples. Um passo importante a\n        ser feito <code>register</code> dentro do componente existente com{\" \"}\n        <code>ref</code>.\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"Campo Controlado\",\n    description: (\n      <p>\n        O React Hook Form adota componentes não controlados e entradas deHTML\n        nativo, no entanto, é difícil evitar trabalhar com controladores\n        externos componente como{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/JedWatson/react-select\"\n        >\n          React-Select\n        </a>\n        ,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/ant-design/ant-design\"\n        >\n          AntD\n        </a>{\" \"}\n        e{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://material-ui.com/\"\n        >\n          Material-UI\n        </a>\n        , consequentemente precisamos construir um componente por volta:{\" \"}\n        <Link to=\"/api#Controller\">Controller</Link> para agilizar o processo de\n        integração e ainda oferecer a você liberdade de usar o registro\n        personalizado com suas necessidades.\n      </p>\n    ),\n  },\n  workWithUI: {\n    title: \"Trabalhe com uma biblioteca de interface\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form é bem fácil de ser integrado com componentes externos\n          de interface.\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Opção 1:</b> A melhor forma é\n          checar se o componente que deseja expõe um <code>innerRef</code> ou{\" \"}\n          <code>ref</code> isso pode ser utilizado para{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              registrar\n            </Link>\n          </code>\n          . Por exemplo: Material-UI's <code>TextField</code> aceita{\" \"}\n          <code>inputRef</code> como props. Passando simplesmente o{\" \"}\n          <code>register</code> para ele.\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Opção 2:</b> As vezes componentes\n          não expõe uma prop para registrar, por exemplo{\" \"}\n          <code>react-select</code> ou <code>react-datepicker</code>.\n        </p>\n        <p>\n          A forma mais fácil de usar é{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> utilizar um componente\n          por volta, que irá tomar conta de registrar customizadamente o\n          processo para você.\n        </p>\n\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>Opção 3:</b> Por último, podemos\n          setar um registro customizado usando{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          Hook e atualizar o valor via{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>\n          .\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"Integre com o estado global\",\n    description: `React Hook Form não requer, que você tenha um gerenciador de estado para armazenar os dados, mas você pode facilmente integrar-lo a um.`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        Você obterá o mesmo aprimoramento de desempenho de um Componente Não\n        Controlado. No entanto, existem certas APIs que não são compatíveis com\n        React Native (devido a diferença de API da Web e nativa). Você terá que\n        usar um <b>registro manual</b> como mostra o seguinte exemplo.\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form é construído com <code>Typescript</code>, então você\n        pode definir um tipo <code>FormData</code> para suportar os valores do\n        formulário.\n      </p>\n    ),\n  },\n  errors: {\n    title: \"Lide com erros\",\n    description: (\n      <>\n        React Hook Form provê um objeto de <code>errors</code> para exibir que\n        seu formulário possui erros.\n      </>\n    ),\n  },\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonTabGroup\":\"TabGroup-module--buttonTabGroup--2yFrr\",\"lightButtonTabGroup\":\"TabGroup-module--lightButtonTabGroup--2_pAv\"};","import CodeArea from \"./CodeArea\"\nimport code from \"./codeExamples/defaultExample\"\nimport codeTs from \"./codeExamples/defaultExampleTs\"\nimport * as React from \"react\"\nimport generic from \"../data/generic\"\nimport copyClipBoard from \"./utils/copyClipBoard\"\nimport styles from \"./GetStarted.module.css\"\nimport codeAreaStyles from \"./CodeArea.module.css\"\nimport { useStateMachine } from \"little-state-machine\"\n\nexport default function GetStarted({\n  quickStartRef,\n  currentLanguage,\n  getStarted,\n}: {\n  quickStartRef: any\n  currentLanguage: string\n  getStarted: any\n}) {\n  const { state } = useStateMachine()\n  const lightMode = state?.setting?.lightMode\n\n  return (\n    <>\n      <h2 ref={quickStartRef}>{getStarted.install.linkTitle}</h2>\n      <p>{getStarted.install.description}</p>\n\n      <span\n        className={`${styles.installCode} ${\n          lightMode ? styles.lightInstallCode : \"\"\n        }`}\n      >\n        npm install react-hook-form\n        <button\n          className={styles.copyButton}\n          onClick={() => {\n            copyClipBoard(\"npm install react-hook-form\")\n            alert(generic.copied[currentLanguage])\n          }}\n        >\n          <span className={codeAreaStyles.copyIcon}>\n            <span />\n          </span>{\" \"}\n          {generic.copy[currentLanguage]}\n        </button>\n      </span>\n\n      <h2\n        style={{\n          marginTop: 50,\n        }}\n      >\n        {getStarted.example.title}\n      </h2>\n      <p>{getStarted.example.description}</p>\n      <CodeArea\n        rawData={code}\n        tsRawData={codeTs}\n        url=\"https://codesandbox.io/s/kw7z2q2n15\"\n      />\n    </>\n  )\n}\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, handleSubmit, watch, errors } = useForm();\n  const onSubmit = data => console.log(data);\n\n  console.log(watch(\"example\")); // watch input value by passing the name of it\n\n  return (\n    {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\n    <form onSubmit={handleSubmit(onSubmit)}>\n    {/* register your input into the hook by invoking the \"register\" function */}\n      <input name=\"example\" defaultValue=\"test\" ref={register} />\n      \n      {/* include validation with required or other standard HTML validation rules */}\n      <input name=\"exampleRequired\" ref={register({ required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n      \n      <input type=\"submit\" />\n    </form>\n  );\n}`\n","export default `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\ntype Inputs = {\n  example: string,\n  exampleRequired: string,\n};\n\nexport default function App() {\n  const { register, handleSubmit, watch, errors } = useForm<Inputs>();\n  const onSubmit = data => console.log(data);\n\n  console.log(watch(\"example\")) // watch input value by passing the name of it\n\n  return (\n    {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\n    <form onSubmit={handleSubmit(onSubmit)}>\n    {/* register your input into the hook by invoking the \"register\" function */}\n      <input name=\"example\" defaultValue=\"test\" ref={register} />\n      \n      {/* include validation with required or other standard HTML validation rules */}\n      <input name=\"exampleRequired\" ref={register({ required: true })} />\n      {/* errors will return when field validation fails  */}\n      {errors.exampleRequired && <span>This field is required</span>}\n      \n      <input type=\"submit\" />\n    </form>\n  );\n}`\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"@reach/router\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"Comenzar\",\n  header: {\n    title: \"Comenzar\",\n    description: \"Validación simple de formularios con React Hook Form.\",\n  },\n  video: {\n    title: \"Video Tutorial\",\n    description: `En este video tutorial, muestro el uso básico y los conceptos al utilizar React Hook Form.`,\n  },\n  install: {\n    linkTitle: \"Instalación\",\n    title: \"Quick start\",\n    description: `Para instalar React Hook Form solo debes correr un comando y estarás listo para comenzar.`,\n  },\n  example: {\n    title: \"Ejemplo\",\n    description: `El siguiente código muestra el uso básico:`,\n  },\n  register: {\n    title: \"Registro de campos\",\n    description: (\n      <>\n        <p>\n          Uno de los principales conceptos de React Hook Form es{\" \"}\n          <strong>\n            <code>registrar</code>\n          </strong>{\" \"}\n          un componente no controlado en el Hook y, por lo tanto, habilitar su\n          valor para ser validado y recogido en el submit.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota:</b> Cada campo{\" \"}\n          <strong>required</strong> necesita tener un único <code>name</code>{\" \"}\n          como key para el proceso de registración.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Nota: </b>En React Native es\n          necesario utilizar un comando de registro manual:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code> o\n          utilizar <Link to=\"/api#Controller\">Controller</Link> para wrappear y\n          auto registrar tu componente. Puedes leer mas en la sección de{\" \"}\n          <Link to=\"/api/#ReactNative\">React Native</Link>.\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"Aplicar validación\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form facilita la validación de formularios al alinearse con{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Validación de formulario HTML estándar\n          </a>\n          .\n        </p>\n\n        <p>Lista de reglas de validación soportadas:</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          Puedes leer más acerca de cada una en la sección{\" \"}\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            register\n          </Link>\n          .\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"Adaptando formularios existentes\",\n    description: (\n      <>\n        Trabajar en un formulario existente es simple. El punto más importante\n        es aplicar el objeto <code>register</code> de RHF en las referencias{\" \"}\n        <code>ref</code> de los componentes existentes.\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"Input controlado\",\n    description: (\n      <p>\n        React Hook Form fomenta el uso de componentes no controlados e inputs\n        nativos, sin embargo es dificil evitar trabajar con componentes\n        controlados externos como{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/JedWatson/react-select\"\n        >\n          React-Select\n        </a>\n        ,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/ant-design/ant-design\"\n        >\n          AntD\n        </a>{\" \"}\n        y{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://material-ui.com/\"\n        >\n          Material-UI\n        </a>\n        , por lo que hemos construído un componente que los envuelve:{\" \"}\n        <Link to=\"/api#Controller\">Controller</Link> para guiar el proceso de\n        integración mientras mantenemos la libertad de usar un registro\n        personalizado según tus necesidades.\n      </p>\n    ),\n  },\n  workWithUI: {\n    title: \"Trabajar con una librería UI\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form facilita la integración con componentes de librerías\n          de UI externas.\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Opción 1:</b> La mejor manera es\n          chequear si el componente que pretendes utilizar expone una referencia\n          interna <code>innerRef</code>o una referencia <code>ref</code> pueda\n          ser utilizada para registración el componente con{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>\n          . Por ejemplo: El <code>TextField</code> de Material-UI acepta{\" \"}\n          <code>inputRef</code> en sus propiedades. Simplemente debes pasar el\n          objeto <code>register</code> de RHF en ella.\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Opción 2:</b> Algunas veces los\n          componentes no exponen una propiedad que se pueda utilizar para\n          registar, como es el caso de <code>react-select</code> o{\" \"}\n          <code>react-datepicker</code>.\n        </p>\n        <p>\n          La siguiente forma más fácil es utilizar el componente{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link>, cuando utilizas este\n          componente, él se encarga de realizar el proceso de registro por ti.\n        </p>\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>Opción 3:</b> Por último, puedes\n          configurar un registro personalizado utilizando el hook{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          y actualizar el valor a través de{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>\n          .\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"Integrar el estado global\",\n    description: `React Hook Form no requiere que utilices una librería de manejo de estados, \n    pero puedes integrarlo facilmente de ser necesario.`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        Obtendrás la misma mejora de rendimiento que un Componente no\n        controlado. Sin embargo, hay ciertas API que no son compatibles con\n        React Native (debido a la diferencia entre las API web y nativa).\n        Tendrás que utilizar un <b> registro manual </b> como se muestra en el\n        siguiente ejemplo.\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form está programado en <code>Typecript</code>, por lo que\n        puedes definir un tipo <code>FormData</code> para admitir valores de\n        formulario.\n      </p>\n    ),\n  },\n  errors: {\n    title: \"Manejo de errores\",\n    description: (\n      <>\n        React Hook Form proporciona el objeto <code> errors </code>\n        para exponer los errores que hayan en el formulario.\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"gatsby\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"Начать\",\n  header: {\n    title: \"Начать\",\n    description: \"Простая валидация форм с React Hook Form.\",\n  },\n  video: {\n    title: \"Видеоурок\",\n    description:\n      \"В этом видеоуроке я продемонстрировал концепцию и основы использования React Hook Form.\",\n  },\n  install: {\n    linkTitle: \"Установка\",\n    title: \"Быстрый старт\",\n    description:\n      \"Установка React Hook Form выполняется всего одной командой и можно пользоваться.\",\n  },\n  example: {\n    title: \"Пример\",\n    description: \"Следующий код продемонстрирует основы использования:\",\n  },\n  register: {\n    title: \"Регистрация полей\",\n    description: (\n      <>\n        <p>\n          Одна из ключевых концепций React Hook Form - это регистрация{\" \"}\n          <strong>\n            <code>register</code>\n          </strong>{\" \"}\n          вашего неконтролируемого компонента в Hook(е) и, следовательно,\n          возможность валидации его значения и сбора для отправки.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Примечание:</b> Каждое{\" \"}\n          <strong>обязательное</strong> поле должно иметь уникальное имя{\" \"}\n          <code>name</code> в качестве ключа для процесса регистрации.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Примечание: </b>В React Native\n          нужно будет вручную ввести команду для регистрации:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code> или\n          использовать <Link to=\"/api#Controller\">Controller</Link> для\n          оборачивания и автоматической регистрации вашего компонента. Вы можете\n          узнать больше в разделе{\" \"}\n          <Link to=\"/api/#ReactNative\">React Native</Link>.\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"Применение валидации\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form делает валидацию проще за счёт использования\n          существующей{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            в HTML стандартной валидации форм\n          </a>\n          .\n        </p>\n\n        <p>Список поддерживаемых атрибутов валидации форм:</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          Вы можете детально ознакомиться с каждым атрибутом в{\" \"}\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            разделе о регистрации\n          </Link>\n          .\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"Адаптация существующей формы\",\n    description: (\n      <>\n        Работать с существующей формой просто. Самый важный шаг - это\n        регистрация <code>register</code> в <code>ref</code> существующего\n        компонента.\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"Контролируемый Input\",\n    description: (\n      <>\n        <p>\n          React Hook Form включает в себя неконтролируемые компоненты и нативные\n          HTML input(ы), однако трудно избежать работы с внешним контролируемым\n          компонентом, таким как{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/JedWatson/react-select\"\n          >\n            React-Select\n          </a>\n          ,{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/ant-design/ant-design\"\n          >\n            AntD\n          </a>{\" \"}\n          and{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://material-ui.com/\"\n          >\n            Material-UI\n          </a>\n          , поэтому мы должны создать компонент-обёртку:{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> для упрощения процесса\n          интеграции, предоставляя при этом свободу использования\n          пользовательского ввода в соответствии с вашими потребностями.\n        </p>\n        <p>\n          Каждое свойство, которое вы передаёте в компонет Controller, будет\n          передано в Component instance, который вы передадите в свойстве{\" \"}\n          <code>as</code>. Например, у вас есть кастомный компонент{\" \"}\n          <code>Switch</code>, у которого есть обязательное свойство{\" \"}\n          <code>label</code>. Вы можете передать это свойство в Controller\n          напрямую. Свойство <code>name</code> будет использоваться для\n          получения значения лэйбла внутри формы.\n        </p>\n\n        <p>\n          Если вы используете свойство <code>defaultValue</code>, то оно будет\n          иметь приоритет над значением <code>defaultValues</code> из{\" \"}\n          <code>useForm</code>\n          для соответствующего поля со свойством <code>name</code>.\n        </p>\n      </>\n    ),\n  },\n  workWithUI: {\n    title: \"Работа с UI библиотеками\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form был создан для простой интеграции в компоненты\n          сторонних UI библиотек.\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Вариант 1:</b> Лучший способ -\n          это проверить, содержит ли нужный вам компонент, <code>innerRef</code>{\" \"}\n          или <code>ref</code>, которые можно использовать для передачи свойства{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>\n          . Наример: <code>TextField</code> из Material-UI принимает{\" \"}\n          <code>inputRef</code> как одно из подобных свойств. Просто передайте{\" \"}\n          <code>register</code> в него.\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Вариант 2:</b> Иногда компоненты\n          не имеют отдельного свойства для ригистрации, например{\" \"}\n          <code>react-select</code> или <code>react-datepicker</code>.\n        </p>\n        <p>\n          В этом случае, самый простой способ - это использование\n          компонента-обёртки <Link to=\"/api#Controller\">Controller</Link>,\n          который сам позаботится о регистрации.\n        </p>\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>Вариант 3:</b> И, наконец, мы\n          можем создать кастомную регистрацию с помощью{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          Hook(а) и обновить значение с использованием метода{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>\n          .\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"Интеграция глобального состояния\",\n    description: `React Hook Form не требует обязательно использовать state management\n    для хранения ваших данных, однако вы легко можете интегрировать один из его вариантов.`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        Вы получите такое же повышение производительности от неконтролируемого\n        компонента. Тем не менее, существуют определенные API, которые не\n        совместимы с React Native (по причине отличий API для вэба и нативных\n        окружений). Вам нужно будет <b>зарегистрировать компонент вручную</b>,\n        как показано в следующем примере.\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form создан с использованием <code>Typescript</code>, поэтому\n        вы можете создать тип <code>FormData</code> для поддержки значений полей\n        формы.\n      </p>\n    ),\n  },\n  errors: {\n    title: \"Обработка ошибок\",\n    description: (\n      <>\n        React Hook Form предоставляет объект <code>errors</code> демонстрации\n        ошибок внутри формы.\n      </>\n    ),\n  },\n}\n","import getStartedEn from \"../data/en/getStarted\"\nimport getStartedEs from \"../data/es/getStarted\"\nimport getStartedPt from \"../data/pt/getStarted\"\nimport getStartedZh from \"../data/zh/getStarted\"\nimport getStartedJp from \"../data/jp/getStarted\"\nimport getStartedKr from \"../data/kr/getStarted\"\nimport getStartedRu from \"../data/ru/getStarted\"\n\nexport default {\n  en: getStartedEn,\n  es: getStartedEs,\n  pt: getStartedPt,\n  kr: getStartedKr,\n  jp: getStartedJp,\n  zh: getStartedZh,\n  ru: getStartedRu,\n}\n","import * as React from \"react\"\nimport GetStarted from \"../components/GetStarted\"\nimport SideMenu from \"../components/SideMenu\"\nimport CodeArea from \"../components/CodeArea\"\nimport {\n  registerCode,\n  migrateCode,\n  uiLibrary,\n  globalState,\n  errors,\n  applyValidation,\n  controlledComponent,\n} from \"./codeExamples/getStarted\"\nimport LearnMore from \"../components/learnMore\"\nimport Footer from \"../components/Footer\"\nimport { useStateMachine } from \"little-state-machine\"\nimport getStartedContent from \"../data/getStarted\"\nimport TabGroup from \"./TabGroup\"\nimport reactNative from \"./codeExamples/reactNative\"\nimport reactNativeController from \"./codeExamples/reactNativeController\"\nimport typeScript from \"./codeExamples/typeScript\"\nimport containerStyles from \"../styles/container.module.css\"\nimport typographyStyles from \"../styles/typography.module.css\"\n\nconst { useRef, useEffect } = React\nconst getStartedEn = getStartedContent[\"en\"]\nconst enLinks = [\n  getStartedEn.install,\n  getStartedEn.video,\n  getStartedEn.register,\n  getStartedEn.applyValidation,\n  getStartedEn.adapting,\n  getStartedEn.workWithUI,\n  getStartedEn.controlledInput,\n  getStartedEn.globalState,\n  getStartedEn.errors,\n  getStartedEn.reactNative,\n  getStartedEn.typeScript,\n]\n\nconst Faq = ({\n  location,\n  defaultLang,\n}: {\n  location: {\n    search: string\n    pathname: string\n    hash: string\n  }\n  defaultLang: string\n}) => {\n  const {\n    state: { language },\n  } = useStateMachine()\n  const { currentLanguage } =\n    language && language.currentLanguage\n      ? language\n      : { currentLanguage: defaultLang }\n  const getStarted = getStartedContent[currentLanguage]\n\n  const links = [\n    getStarted.install,\n    getStarted.video,\n    getStarted.register,\n    getStarted.applyValidation,\n    getStarted.adapting,\n    getStarted.workWithUI,\n    getStarted.controlledInput,\n    getStarted.globalState,\n    getStarted.errors,\n    getStarted.reactNative,\n    getStarted.typeScript,\n  ]\n\n  const sectionsRef = useRef({\n    quickstart: null,\n    videotutorial: null,\n    adaptingexistingform: null,\n    workwithuilibrary: null,\n    controlledinput: null,\n    integrateglobalstate: null,\n    handleerrors: null,\n    registerfields: null,\n    applyvalidation: null,\n    reactnative: null,\n    typescript: null,\n  })\n\n  const goToSection = (name) => {\n    console.log(name)\n    const url = window.location.href\n    const hashIndex = url.indexOf(\"#\")\n    const filterName = name.replace(/ /g, \"\")\n\n    if (hashIndex < 0) {\n      history.pushState({}, null, `${url}#${filterName}`)\n    } else {\n      history.pushState({}, null, `${url.substr(0, hashIndex)}#${filterName}`)\n    }\n\n    const refName = name.replace(/ /g, \"\").toLowerCase()\n    if (sectionsRef.current[refName]) {\n      sectionsRef.current[refName].scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  useEffect(() => {\n    if (location.hash)\n      setTimeout(() => goToSection(location.hash.substr(1)), 10)\n  }, [])\n\n  return (\n    <div className={containerStyles.container}>\n      <h1 className={typographyStyles.headingWithTopMargin} id=\"main\">\n        {getStarted.header.title}\n      </h1>\n      <p className={typographyStyles.subHeading}>\n        {getStarted.header.description}\n      </p>\n\n      <div className={containerStyles.wrapper}>\n        <SideMenu\n          enLinks={enLinks}\n          isStatic\n          links={links}\n          goToSection={goToSection}\n          currentLanguage={currentLanguage}\n        />\n        <main>\n          <GetStarted\n            getStarted={getStarted}\n            quickStartRef={(ref) => {\n              sectionsRef.current.quickstart = ref\n            }}\n            currentLanguage={currentLanguage}\n          />\n\n          <p\n            style={{\n              textAlign: \"center\",\n            }}\n          >\n            ♦\n          </p>\n\n          <h2 ref={(ref) => (sectionsRef.current.videotutorial = ref)}>\n            {getStarted.video.title}\n          </h2>\n          <p>{getStarted.video.description}</p>\n\n          <iframe\n            width=\"100%\"\n            height=\"528\"\n            title=\"react hook form video tutorial\"\n            src=\"https://www.youtube.com/embed/-mFXqOaqgZk\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.registerfields = ref\n            }}\n          >\n            {getStarted.register.title}\n          </h2>\n\n          {getStarted.register.description}\n\n          <CodeArea rawData={registerCode} />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.applyvalidation = ref\n            }}\n          >\n            {getStarted.applyValidation.title}\n          </h2>\n\n          {getStarted.applyValidation.description(currentLanguage)}\n\n          <CodeArea rawData={applyValidation} />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.adaptingexistingform = ref\n            }}\n          >\n            {getStarted.adapting.title}\n          </h2>\n\n          {getStarted.adapting.description}\n\n          <CodeArea\n            rawData={migrateCode}\n            url=\"https://codesandbox.io/s/adapting-existing-form-3mspt\"\n          />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.workwithuilibrary = ref\n            }}\n          >\n            {getStarted.workWithUI.title}\n          </h2>\n\n          {getStarted.workWithUI.description(currentLanguage)}\n\n          <CodeArea\n            rawData={uiLibrary}\n            url=\"https://codesandbox.io/s/72j69vnk1x\"\n          />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.controlledinput = ref\n            }}\n          >\n            {getStarted.controlledInput.title}\n          </h2>\n\n          {getStarted.controlledInput.description}\n\n          <CodeArea\n            rawData={controlledComponent}\n            url=\"https://codesandbox.io/s/react-hook-form-controller-079xx\"\n          />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.integrateglobalstate = ref\n            }}\n          >\n            {getStarted.globalState.title}\n          </h2>\n\n          {getStarted.globalState.description}\n\n          <CodeArea rawData={globalState} />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.handleerrors = ref\n            }}\n          >\n            {getStarted.errors.title}\n          </h2>\n\n          {getStarted.errors.description}\n\n          <CodeArea rawData={errors} />\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.reactnative = ref\n            }}\n          >\n            React Native\n          </h2>\n\n          {getStarted.reactNative.description}\n\n          <TabGroup buttonLabels={[\"Controller\", \"Custom Register\"]}>\n            <CodeArea\n              isExpo\n              rawData={reactNativeController}\n              url=\"https://snack.expo.io/@bluebill1049/react-hook-form-input\"\n            />\n            <CodeArea\n              isExpo\n              rawData={reactNative}\n              url=\"https://snack.expo.io/@bluebill1049/react-hook-form\"\n            />\n          </TabGroup>\n\n          <h2\n            className={typographyStyles.title}\n            ref={(ref) => {\n              sectionsRef.current.typescript = ref\n            }}\n          >\n            TypeScript\n          </h2>\n\n          {getStarted.typeScript.description}\n\n          <CodeArea\n            rawData={typeScript}\n            url=\"https://codesandbox.io/s/react-hook-form-typescript-mmdrc\"\n          />\n\n          <LearnMore currentLanguage={currentLanguage} />\n\n          <Footer currentLanguage={currentLanguage} />\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default Faq\n","export default `import React from \"react\";\nimport { Text, View, TextInput, Button, Alert } from \"react-native\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, setValue, handleSubmit, errors } = useForm();\n  const onSubmit = data => Alert.alert(\"Form Data\", JSON.stringify(data));\n  \n  useEffect(() => {\n    register({ name: \"firstName\"}, { required: true });\n    register({ name: \"lastName\"});\n  }, [register]);\n\n  return (\n    <View>\n      <Text>First name</Text>\n      <TextInput\n        onChangeText={text => setValue(\"firstName\", text, true)}\n      />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Text>Last name</Text>\n      <TextInput\n        onChangeText={text => setValue(\"lastName\", text)}\n      />\n\n      <Button onPress={handleSubmit(onSubmit)} />\n    </View>\n  );\n}\n`\n","export default `import * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\ntype FormData = {\n  firstName: string;\n  lastName: string;\n};\n\nexport default function App() {\n  const { register, setValue, handleSubmit, errors } = useForm<FormData>();\n  const onSubmit = handleSubmit(({ firstName, lastName }) => {\n    console.log(firstName, lastName);\n  }); // firstName and lastName will have correct type\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>First Name</label>\n      <input name=\"firstName\" ref={register} />\n      <label>Last Name</label>\n      <input name=\"lastName\" ref={register} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setValue(\"lastName\", \"luo\"); // ✅\n          setValue(\"firstName\", true); // ❌: true is not string\n          errors.bill; // ❌: property bill does not exist\n        }}\n      >\n        SetValue\n      </button>\n    </form>\n  );\n}\n`\n","export const registerCode = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n   \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name=\"firstName\" ref={register} />\n      <select name=\"gender\" ref={register}>\n        <option value=\"male\">male</option>\n        <option value=\"female\">female</option>\n      </select>\n      <input type=\"submit\" />\n    </form>\n  );\n}`\n\nexport const migrateCode = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n// The following component is an example of your existing Input Component \nconst Input = ({ label, register, required }) => ( \n  <>\n    <label>{label}</label>\n    <input name={label} ref={register({ required })} />\n  </>\n);\n\n// you can use React.forwardRef to pass the ref too\nconst Select = React.forwardRef(({ label, register }, ref) => ( \n  <>\n    <label>{label}</label>\n    <select name={label} ref={ref}>\n      <option value=\"20\">20</option>\n      <option value=\"30\">30</option>\n    </select>\n  </>\n));\n\nexport default function App() {\n  const { register, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n   \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input label=\"First Name\" register={register} required />\n      <Select label=\"Age\" ref={register} />\n      <input type=\"submit\" />\n    </form>\n  );\n}`\n\nexport const uiLibrary = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Select from \"react-select\";\nimport Input from \"@material-ui/core/Input\";\nimport { Input as InputField } from \"antd\";\n\nexport default function App() {\n  const { register, handleSubmit, setValue } = useForm();\n  const onSubmit = data => console.log(data);\n  const [values, setReactSelectValue] = useState({ selectedOption: [] });\n\n  const handleMultiChange = selectedOption => {\n    setValue(\"reactSelect\", selectedOption);\n    setReactSelectValue({ selectedOption });\n  }\n  \n  const handleChange = (e) => {\n    setValue(\"AntdInput\", e.target.value);\n  }\n  \n  React.useEffect(() => {\n    register({ name: \"reactSelect\" }); // custom register react-select \n    register({ name: \"AntdInput\" }); // custom register antd input\n  }, [register])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input name=\"HelloWorld\" inputRef={register} />\n      <InputField name=\"AntdInput\" onChange={handleChange} />\n      <Select\n        value={values.selectedOption}\n        options={options}\n        onChange={handleMultiChange}\n        isMulti\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n\nexport const uiLibraryHookInput = `import React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Select from \"react-select\";\nimport Input from \"@material-ui/core/Input\";\nimport { Input as InputField } from \"antd\";\n\nexport default function App() {\n  const { control, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller as={Input} name=\"HelloWorld\" control={control} defaultValue=\"\" />\n      <Controller as={InputField} name=\"AntdInput\" control={control} defaultValue=\"\" />\n      <Controller\n        as={Select}\n        name=\"reactSelect\"\n        control={control}\n        onChange={([selected]) => {\n          // React Select return object instead of value for selection\n          return { value: selected };\n        }}\n        defaultValue={{}}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n\nexport const controlledComponent = `import React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport ReactSelect from \"react-select\";\nimport { TextField, Checkbox } from \"@material-ui/core\";\n\nfunction App() {\n  const methods = useForm();\n  const { handleSubmit, control, reset } = methods;\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Option 1 (preferred): pass a component to the Controller. */}\n      <Controller as={TextField} name=\"TextField\" control={control} defaultValue=\"\" />\n      \n      {/* Option 2: pass a JSX element to the Controller. */}\n      {/* Note that any prop passed to the element will be overriden. */}\n      {/* In this case, \"SomeName\" will be changed to \"MyCheckbox\". */}\n      <Controller\n        as={<Checkbox name=\"SomeName\"/>}\n        name=\"MyCheckbox\"\n        value=\"test\"\n        control={control}\n        defaultValue={false}\n      />\n\n      <button>Submit</button>\n    </form>\n  );\n}\n`\n\nexport const globalState = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport updateAction from \"./actions\";\n\nexport default function App(props) {\n  const { register, handleSubmit, setValue } = useForm();\n  // Submit your data into Redux store\n  const onSubmit = data => props.updateAction(data);\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input name=\"firstName\" defaultValue={props.firstName} ref={register} />\n      <Input name=\"lastName\" defaultValue={props.lastName} ref={register} />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\n// Connect your component with redux\nconnect(({ firstName, lastName }) => ({ firstName, lastName }), updateAction)(YourForm);\n`\n\nexport const errors = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm();\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input name=\"firstName\" ref={register({ required: true })} />\n      {errors.firstName && \"First name is required\"}\n      <Input name=\"lastName\" ref={register({ required: true })} />\n      {errors.lastName && \"Last name is required\"}\n      <input type=\"submit\" />\n    </form>\n  );\n}\n`\n\nexport const applyValidation = `import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function App() {\n  const { register, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n   \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name=\"firstName\" ref={register({ required: true, maxLength: 20 })} />\n      <input name=\"lastName\" ref={register({ pattern: /^[A-Za-z]+$/i })} />\n      <input name=\"age\" type=\"number\" ref={register({ min: 18, max: 99 })} />\n      <input type=\"submit\" />\n    </form>\n  );\n}`\n","import * as React from \"react\"\nimport colors from \"../styles/colors\"\nimport generic from \"../data/generic\"\nimport { useStateMachine } from \"little-state-machine\"\nimport typographyStyles from \"../styles/typography.module.css\"\nimport styles from \"./SideMenu.module.css\"\n\nconst activateStyle = { borderBottom: `1px solid ${colors.lightPink}` }\n\nfunction SideMenu({\n  links,\n  goToSection,\n  enLinks,\n  isStatic,\n  currentLanguage,\n  activeIndex,\n}: {\n  links: any\n  goToSection: Function\n  isStatic?: boolean\n  enLinks: any\n  currentLanguage: string\n  activeIndex: number\n}) {\n  const { state } = useStateMachine()\n  const lightMode = state?.setting?.lightMode\n\n  return (\n    <aside className={`${styles.menu} ${lightMode ? styles.lightMenu : \"\"}`}>\n      <div>\n        <div className={styles.titleList}>\n          <h2\n            className={typographyStyles.title}\n            style={{\n              fontSize: 16,\n              color: colors.lightBlue,\n            }}\n          >\n            {generic.menu[currentLanguage]}\n          </h2>\n        </div>\n\n        <ul className=\"scrollArea\">\n          {links.map((rawLink, index) => {\n            const link =\n              typeof rawLink === \"function\" ? rawLink().title : rawLink.title\n            const enLink =\n              typeof enLinks[index] === \"function\"\n                ? enLinks[index]().title\n                : enLinks[index].title\n\n            let linkName = link.startsWith(\"use\") ? `♆ ${link}` : link\n\n            if (\n              /^[A-Z]/.test(link[0]) &&\n              !link.includes(\" \") &&\n              link !== \"TypeScript\"\n            ) {\n              linkName = \"❒ \" + linkName\n            }\n\n            if (\n              [\n                \"useformcontext\",\n                \"controller\",\n                \"usefieldarray\",\n                \"errormessage\",\n                \"validationschema\",\n                \"validationresolver\",\n                \"browser built-in validation\",\n              ].includes((link || \"\").toLowerCase()) ||\n              isStatic\n            ) {\n              return (\n                <li key={link}>\n                  <span className={styles.code}>{`</>`}</span>\n                  {isStatic ? (\n                    <button\n                      onClick={() => {\n                        goToSection(enLink, index)\n                      }}\n                      style={{\n                        top: \"-3px\",\n                        position: \"relative\",\n                        ...(activeIndex === index ? activateStyle : {}),\n                      }}\n                    >\n                      {linkName}\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        goToSection(enLink, index)\n                      }}\n                      style={{\n                        top: \"-3px\",\n                        position: \"relative\",\n                        ...(link === \"Quick Start\" ? { paddingLeft: 0 } : null),\n                        ...(activeIndex === index ? activateStyle : {}),\n                      }}\n                    >\n                      {linkName}\n                    </button>\n                  )}\n                </li>\n              )\n            }\n\n            return (\n              <li\n                key={link}\n                onClick={() => goToSection(enLink, index)}\n                style={{\n                  ...(index > 0\n                    ? {\n                        marginLeft: 10,\n                        ...(index !== links.length - 8\n                          ? { borderLeft: `1px solid ${colors.lightPink}` }\n                          : null),\n                        ...(index === 3\n                          ? { paddingTop: 10, marginTop: -15 }\n                          : null),\n                      }\n                    : null),\n                }}\n              >\n                <span\n                  className={`${styles.arrow} ${\n                    index === links.length - 8 ? styles.arrowLast : \"\"\n                  }`}\n                >\n                  {index > 0 && (\n                    <span\n                      style={{\n                        left: 1,\n                        top: -1,\n                        position: \"relative\",\n                      }}\n                    >\n                      ╴\n                    </span>\n                  )}\n                </span>\n                {link !== \"Quick Start\" && (\n                  <span className={styles.code}>{`</>`}</span>\n                )}{\" \"}\n                <button\n                  style={{\n                    top: \"-3px\",\n                    position: \"relative\",\n                    ...(link === \"Quick Start\" ? { paddingLeft: 0 } : null),\n                    ...(activeIndex === index ? activateStyle : {}),\n                  }}\n                >\n                  {linkName}\n                </button>\n              </li>\n            )\n          })}\n\n          <li>\n            <span className={styles.code}>{`</>`}</span>\n            <a\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/bluebill1049/react-hook-form/tree/master/examples\"\n              target=\"_blank\"\n            >\n              {generic.codeExample[currentLanguage]}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </aside>\n  )\n}\n\nexport default React.memo(SideMenu)\n","export default `import React from \"react\";\nimport { Text, View, TextInput, Button, Alert } from \"react-native\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function App() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = data => Alert.alert(\n    \"Form Data\",\n    JSON.stringify(data),\n  );\n\n  return (\n    <View>\n      <Text>First name</Text>\n      <Controller\n        as={TextInput}\n        control={control}\n        name=\"firstName\"\n        onChange={args => args[0].nativeEvent.text}\n        rules={{ required: true }}\n        defaultValue=\"\"\n      />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Text>Last name</Text>\n      <Controller\n        as={TextInput}\n        control={control}\n        name=\"lastName\"\n        onChange={args => args[0].nativeEvent.text}\n        defaultValue=\"\"\n      />\n\n      <Button title=\"Submit\" onPress={handleSubmit(onSubmit)} />\n    </View>\n  );\n}\n`\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"@reach/router\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"Get Started\",\n  header: {\n    title: \"Get Started\",\n    description: \"Simple form validation with React Hook Form.\",\n  },\n  video: {\n    title: \"Video Tutorial\",\n    description: `This video tutorial illustrates the basic usage and concepts of React Hook Form.`,\n  },\n  install: {\n    linkTitle: \"Installation\",\n    title: \"Quick start\",\n    description: `Installing React Hook Form only takes a single command and you're ready to roll.`,\n  },\n  example: {\n    title: \"Example\",\n    description: `The following code excerpt demonstrates a basic usage example:`,\n  },\n  register: {\n    title: \"Register fields\",\n    description: (\n      <>\n        <p>\n          One of the key concepts in React Hook Form is to{\" \"}\n          <strong>\n            <code>register</code>\n          </strong>{\" \"}\n          your uncontrolled component into the Hook. This will make its value\n          available for both the form validation and submission.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note:</b> Each field is{\" \"}\n          <strong>required</strong> to have a unique <code>name</code> as a key\n          for the registration process.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>Note: </b>React Native will\n          require you to either use a manual register command:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code> or a{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> to wrap and register your\n          component automatically. Learn more in the dedicated section for{\" \"}\n          <Link to=\"/api/#ReactNative\">React Native</Link>.\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"Apply validation\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form makes form validation easy by aligning with the\n          existing{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HTML standard for form validation\n          </a>\n          .\n        </p>\n\n        <p>List of validation rules supported:</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          You can read more detail on each rule in the{\" \"}\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            register section\n          </Link>\n          .\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"Adapting existing form\",\n    description: (\n      <>\n        Working on an existing form is simple. The important step is to apply{\" \"}\n        <code>register</code> into existing component's <code>ref</code>.\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"Controlled Input\",\n    description: (\n      <>\n        <p>\n          React Hook Form embrace uncontrolled components and native HTML\n          inputs, however it's hard to avoid working with external controlled\n          component such as{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/JedWatson/react-select\"\n          >\n            React-Select\n          </a>\n          ,{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/ant-design/ant-design\"\n          >\n            AntD\n          </a>{\" \"}\n          and{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://material-ui.com/\"\n          >\n            Material-UI\n          </a>\n          , hence we have built a wrapper component:{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> to streamline the\n          integration process while still giving you the freedom to use custom\n          register with your needs.\n        </p>\n        <p>\n          Read more about the <Link to=\"/api#Controller\">Controller</Link>{\" \"}\n          component.\n        </p>\n      </>\n    ),\n  },\n  workWithUI: {\n    title: \"Work with UI library\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form has made it easy to integrate with external UI\n          component libraries. You can check out{\" \"}\n          <a\n            href=\"https://www.youtube.com/watch?v=0nDGeQKLFjo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            this video tutorial\n          </a>{\" \"}\n          on how to work with MUI.\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Option 1:</b> The best way is to\n          check if the component you wish to use exposes an{\" \"}\n          <code>innerRef</code> or <code>ref</code> that can be used to{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>\n          . For example: Material-UI's <code>TextField</code> accepts{\" \"}\n          <code>inputRef</code> as one of its props. You can simply pass{\" \"}\n          <code>register</code> to it.\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>Option 2:</b> Sometimes\n          components don't expose a prop to register, for example{\" \"}\n          <code>react-select</code> or <code>react-datepicker</code>.\n        </p>\n        <p>\n          The second easiest way is to use the{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> wrapper component, which\n          will take care of the registration process for you.\n        </p>\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>Option 3:</b> Lastly we can set\n          up a custom register using the{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          Hook and update the value via{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>\n          .\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"Integrate global state\",\n    description: `React Hook Form doesn't require you to rely on a state management library such as Redux to store your data, but you can easily integrate with it:`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        You will get the same performance enhancement from an Uncontrolled\n        Component. However, there are certain APIs which are not compatible with\n        React Native (due to the API differences between web and native). You\n        will have to use a <b>manual register</b> as shown in the following\n        example.\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form is built with <code>Typescript</code>, so you can define\n        a <code>FormData</code> type to support form values.\n      </p>\n    ),\n  },\n  errors: {\n    title: \"Handle errors\",\n    description: (\n      <>\n        React Hook Form provides an <code>errors</code> object to show you the\n        errors in the form.\n      </>\n    ),\n  },\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"SideMenu-module--menu--WeHDU\",\"arrow\":\"SideMenu-module--arrow--3QN_Z\",\"arrowLast\":\"SideMenu-module--arrowLast--3oMQI\",\"lightMenu\":\"SideMenu-module--lightMenu--XYEOq\",\"titleList\":\"SideMenu-module--titleList--YlD4k\",\"code\":\"SideMenu-module--code--L4G67\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"installCode\":\"GetStarted-module--installCode--3pcx3\",\"lightInstallCode\":\"GetStarted-module--lightInstallCode--26Z3P\",\"copyButton\":\"GetStarted-module--copyButton--vgJmz\"};","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"gatsby\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"시작하기\",\n  header: {\n    title: \"시작하기\",\n    description: \"React Hook Form 으로 간단하게 폼의 유효성을 검사하기\",\n  },\n  video: {\n    title: \"비디오 튜토리얼\",\n    description: `이 비디오 튜토리얼을 통해 React Hook Form 의 기본 사용법과 컨셉을 설명합니다`,\n  },\n  install: {\n    linkTitle: \"설치\",\n    title: \"빠른 시작\",\n    description: `React Hook Form 을 설치하는데 한 줄 짜리 커맨드면 충분합니다.`,\n  },\n  example: {\n    title: \"예제\",\n    description: `다음의 코드는 기본적인 사용법을 보여줍니다.`,\n  },\n  register: {\n    title: \"필드 등록하기\",\n    description: (\n      <>\n        <p>\n          React Hook Form 의 중요 컨셉 중 하나는{\" \"}\n          <strong>\n            <code>register</code>\n          </strong>{\" \"}\n          를 통해 여러분의 비제어 컴포넌트(uncontrolled component)를 Hook 과\n          연결하여 값이 검사될 수 있도록 만들고 폼을 제출할 때 한꺼번에\n          모아지도록 하는 것입니다.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>참고:</b> 각각의 필드는 등록\n          과정의 key 로 사용하기 위해 <code>name</code> 속성이{\" \"}\n          <strong>반드시</strong> 필요합니다.\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>참고:</b> React Native 는\n          수동으로 register 커맨드를 입력해야 합니다. (예:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code>\n          또는 <Link to=\"/api#Controller\">Controller</Link>을 사용하여 구성\n          요소를 래핑합니다.\n          <Link to=\"/api/#ReactNative\">React Native</Link> 섹션에서 더 많은\n          내용을 읽을 수도 있습니다.\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"유효성 검사 적용하기\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form 은 기존의{\" \"}\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HTML 표준 폼 유효성 검사와\n          </a>\n          과 어우러져 폼 유효성 검사를 쉽게 만들어줍니다.\n        </p>\n\n        <p>지원되는 폼 유효성 검사 방식은 아래와 같습니다.</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          각각의 규칙에 대해 더 자세하게 알아보시려면{\" \"}\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            register 섹션\n          </Link>\n          을 살펴보세요.\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"이미 존재하는 폼에 적용하기\",\n    description: (\n      <>\n        이미 존재하는 폼에 쉽게 적용할 수 있습니다. 중요한 것은 이미 있는\n        컴포넌트의 <code>ref</code> 에 <code>register</code> 를 적용해 주는\n        것입니다.\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"제어되는 입력 필드\",\n    description: (\n      <p>\n        React Hook Form 은 비제어 컴포넌트와 네이티브 HTML input을 활용합니다.\n        하지만{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/JedWatson/react-select\"\n        >\n          React-Select\n        </a>\n        ,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/ant-design/ant-design\"\n        >\n          AntD\n        </a>{\" \"}\n        그리고{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://material-ui.com/\"\n        >\n          Material-UI\n        </a>{\" \"}\n        같이 외부 라이브러리에서 제공하는 제어 컴포넌트와 함께 사용해야 할 때가\n        있습니다. 그래서 이럴 때 사용하기 위해 감싸는 컴포넌트를 제공합니다.{\" \"}\n        <Link to=\"/api#Controller\">Controller</Link> 은 여전히 필요에 따라 인풋\n        필드를 커스텀 등록하는 방법을 제공하여 위의 외부 컴포넌트들과 쉽게\n        통합할 수 있습니다.\n      </p>\n    ),\n  },\n  workWithUI: {\n    title: \"UI 라이브러리에 적용하기\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form 은 외부 UI 컴포넌트 라이브러리와 쉽게 연동할 수\n          있습니다.\n        </p>\n        <p>\n          <b className={typographyStyles.note}>옵션 1: </b>제일 좋은 방법은\n          사용하려는 컴포넌트가 <code>innerRef</code> 혹은 <code>ref</code> 를\n          드러내는지 확인하여, 사용할 수 있다면{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>{\" \"}\n          로 등록하는 것입니다. 예를 들어 Material-UI 의 <code>TextField</code>{\" \"}\n          는 prop 중 하나로\n          <code>inputRef</code> 를 받습니다. 간단히 그 prop 에{\" \"}\n          <code>register</code> 를 전달하면 됩니다.\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>옵션 2: </b>때때로 외부\n          컴포넌트는 등록을 위한 prop 을 지원하지 않을 수 있습니다. 예를 들어{\" \"}\n          <code>react-select</code> 나 <code>react-datepicker</code> 같은\n          라이브러리가 그렇습니다.\n        </p>\n        <p>\n          그 다음으로 쉬운 방법은 <Link to=\"/api#Controller\">Controller</Link>{\" \"}\n          래퍼 컴포넌트를 사용하는 것입니다. 이 컴포넌트를 사용하면 커스텀 등록\n          과정을 대신 처리해 줍니다.\n        </p>\n\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>옵션 3:</b>마지막으로 the{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          훅을 사용하여 커스텀 등록을 하고,{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>{\" \"}\n          로 값을 업데이트 할 수 있습니다.\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"전역 상태와 사용하기\",\n    description: `React Hook Form 으로 데이터를 저장하기 위해 반드시 상태 관리 솔루션을 사용할 필요는 없지만, 쉽게 조합할 수는 있습니다.`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        비제어 컴포넌트에서도 동일한 성능 향상을 얻을 수 있습니다. 하지만, 웹과\n        네이티브의 API 차이로 인해 React Native와 호환되지 않는 특정 API도\n        있습니다. 이 경우, 다음 예제와 같이 <b>수동 등록(manual register)</b>을\n        해주어야 합니다.\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form은 타입스크립트로 만들어져, 폼 내 값 타입을{\" \"}\n        <code>FormData</code> 로 설정할 수 있습니다.\n      </p>\n    ),\n  },\n  errors: {\n    title: \"에러 처리하기\",\n    description: (\n      <>\n        React Hook Form 은 폼 안의 에러를 보여주는 <code>errors</code> 객체를\n        제공합니다.\n      </>\n    ),\n  },\n}\n","import * as React from \"react\"\nimport { navigate } from \"gatsby\"\nimport generic from \"../data/generic\"\nimport translateLink from \"./logic/translateLink\"\nimport containerStyles from \"../styles/container.module.css\"\nimport buttonStyles from \"../styles/button.module.css\"\nimport typographyStyles from \"../styles/typography.module.css\"\n\nexport default function LearnMore({\n  currentLanguage,\n}: {\n  currentLanguage: string\n}) {\n  return (\n    <div className={containerStyles.centerContent} style={{ marginTop: 100 }}>\n      <h1>{generic.learnMore[currentLanguage].title}</h1>\n      <p>{generic.learnMore[currentLanguage].description}</p>\n\n      <button\n        className={buttonStyles.primaryButton}\n        onClick={() => {\n          navigate(translateLink(\"api\", currentLanguage))\n        }}\n        style={{ margin: \"40px auto\" }}\n      >\n        {generic.learnMore[currentLanguage].buttonText}\n      </button>\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"@reach/router\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"起步\",\n  header: {\n    title: \"起步\",\n    description: \"React Hook Form 让表单验证变得简单.\",\n  },\n  video: {\n    title: \"视频教程\",\n    description: `在本视频教程中，我演示了使用React Hook Form的基本用法和概念。（不好意思是英文的）`,\n  },\n  install: {\n    linkTitle: \"安装\",\n    title: \"快速启动\",\n    description: `安装React Hook Form只需要一个命令，你就可以开始了。`,\n  },\n  example: {\n    title: \"例子\",\n    description: `以下代码将演示基本用法:`,\n  },\n  register: {\n    title: \"注册表格\",\n    description: (\n      <>\n        <p>\n          React Hook Form的一个关键概念是将您不受控制的组件\n          <strong>注册</strong>\n          到Hook中，从而使其价值得到验证并收集来以供提交。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>每个表格都需要有一个\n          <strong>独特</strong>\n          的名称作为注册过程的密钥\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>React Native\n          将需要使用手动注册 (例子如下:{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code>\n          或使用\n          <Link to=\"/api#Controller\">Controller</Link>\n          来包装您的组件。您还可以在\n          <Link to=\"/api/#ReactNative\">React Native</Link>部分阅读更多内容。\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"应用验证\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form 通过与现有的\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HTML标准表单验证\n          </a>\n          进行对齐，使表单验证变得简单。\n        </p>\n\n        <p>支持的验证规则列表:</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          您可以在\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            注册部分(register)\n          </Link>\n          阅读每个规则的更多细节。\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"调整您现有的表格\",\n    description: (\n      <>\n        处理您现有表单很简单。 重要的步骤是将表单组件的<code>ref</code>注册。\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"受控输入\",\n    description: (\n      <p>\n        React Hook\n        Form支持和拥护不受控制的组件和HTML输入，但是很难避免使用外部受控组件，比如说\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/JedWatson/react-select\"\n        >\n          React-Select\n        </a>\n        ,{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/ant-design/ant-design\"\n        >\n          AntD\n        </a>{\" \"}\n        和{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://material-ui.com/\"\n        >\n          Material-UI\n        </a>\n        ，因此我们建立了一个包装组件:{\" \"}\n        <Link to=\"/api#Controller\">Controller</Link>{\" \"}\n        来简化集成过程，同时仍然可以自由地使用自定义register满足您的需求。\n      </p>\n    ),\n  },\n  workWithUI: {\n    title: \"使用UI库\",\n    description: (currentLanguage) => (\n      <>\n        <p>React Hook Form 让外部UI组件库集成变得简单。</p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b> 大多数UI库都会将内部的\n          <code>innerRef</code>或者\n          <code>Ref</code>\n          公开给与注册\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>\n          。但是，对于像react-selector和\n          react-datepicker这样更复杂的组件并且不提供<code>Ref</code>\n          ，您可以通过<code>register</code>在<code>useEffect</code>\n          中实现，再通过运用\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>\n          更新它的值。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>注意:</b>\n          我们还制作了一个包装器组件\n          <Link to=\"/api#Controller\">Controller</Link>\n          ，以帮助您的自定义注册表格过程。\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"整合表单状态\",\n    description: `React Hook Form不要求你有一个状态(state)管理来存储你的数据，但你可以很容易地与任何一个集成。`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        您将从受控制的组件中获得相同的性能增强。 但是，有一些与React\n        Native不兼容的Api（与web和native的API差异）。\n        您将不得不使用手动注册，如下面的示例所示。\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form是使用<code>Typescript</code>\n        构建的，因此您可以定义一个表单数据<code>FormData</code>\n        类型来支持表单值。\n      </p>\n    ),\n  },\n  errors: {\n    title: \"处理错误\",\n    description: <>React Hook Form提供了一个错误对象，用于显示表单中的错误。</>,\n  },\n}\n","import * as React from \"react\"\nimport code from \"../../components/codeExamples/defaultExample\"\nimport { Link } from \"gatsby\"\nimport translateLink from \"../../components/logic/translateLink\"\nimport CodeArea from \"../../components/CodeArea\"\nimport { uiLibraryHookInput } from \"../../components/codeExamples/getStarted\"\nimport typographyStyles from \"../../styles/typography.module.css\"\n\nexport default {\n  title: \"はじめる\",\n  header: {\n    title: \"はじめる\",\n    description: \"React Hook Form によるシンプルなフォームバリデーション。\",\n  },\n  video: {\n    title: \"ビデオチュートリアル\",\n    description: `このビデオチュートリアルでは、React Hook Form の基本的な使用法とコンセプトを説明します。`,\n  },\n  install: {\n    linkTitle: \"インストール\",\n    title: \"クイックスタート\",\n    description:\n      \"一つのインストールコマンドだけで、React Hook Form を使用する準備が整います。\",\n  },\n  example: {\n    title: \"例\",\n    description: `下記のコードは基本的な使用法を示します。`,\n  },\n  register: {\n    title: \"フィールドを登録する\",\n    description: (\n      <>\n        <p>\n          React Hook Form の重要なコンセプトの一つは、非制御コンポーネント (\n          <a\n            href=\"https://reactjs.org/docs/uncontrolled-components.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Uncontrolled Components\n          </a>\n          ) をフックに\n          <strong>\n            登録（<code>register</code>)\n          </strong>{\" \"}\n          し、フォームフィールドの値を検証と収集できるようにすることです。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>{\" \"}\n          各フィールドには登録プロセスの key としてユニークな <code>name</code>{\" \"}\n          属性が<strong>必須</strong>です。\n        </p>\n\n        <p>\n          <b className={typographyStyles.note}>注意：</b>React Native は手動登録\n          (manual <code>register</code>) する必要があります。 (例：{\" \"}\n          <code>{`register({ name: 'test' }, { required: true })`}</code>\n          または、\n          <Link to=\"/api#Controller\">Controller</Link>\n          を使用してコンポーネントをラップします。\n          <Link to=\"/api/#ReactNative\">React Native</Link>\n          セクションで詳細を読むこともできます。\n        </p>\n      </>\n    ),\n  },\n  applyValidation: {\n    title: \"バリデーションを適用する\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form は既存の\n          <a\n            href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HTML 標準のフォームバリデーション\n          </a>\n          合わせることにより、フォームバリデーションを容易にします。\n        </p>\n\n        <p>サポートされているバリデーションルール一覧：</p>\n        <ul>\n          <li>required</li>\n          <li>min</li>\n          <li>max</li>\n          <li>minLength</li>\n          <li>maxLength</li>\n          <li>pattern</li>\n          <li>validate</li>\n        </ul>\n        <p>\n          <Link to={translateLink(\"api#register\", currentLanguage)}>\n            register セクション\n          </Link>\n          で各ルールの詳細を読むことができます。\n        </p>\n      </>\n    ),\n  },\n  adapting: {\n    title: \"既存のフォームに適用する\",\n    description: (\n      <>\n        既存のフォームの処理はシンプルです。重要なステップは、既存のコンポーネントの{\" \"}\n        <code>ref</code> に <code>register</code> を適用することです。\n      </>\n    ),\n  },\n  controlledInput: {\n    title: \"制御された Input\",\n    description: (\n      <p>\n        React Hook Form は、非制御コンポーネントとネイティブ HTML input{\" \"}\n        をサポートしますが、{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/JedWatson/react-select\"\n        >\n          React-Select\n        </a>{\" \"}\n        や{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/ant-design/ant-design\"\n        >\n          AntD\n        </a>{\" \"}\n        、{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://material-ui.com/\"\n        >\n          Material-UI\n        </a>{\" \"}\n        などの外部の制御された UI{\" \"}\n        コンポーネントライブラリと組み合わせての使用を避けることは難しいため、\n        ラッパーコンポーネントを作成しました。{\" \"}\n        <Link to=\"/api#Controller\">Controller</Link>{\" \"}\n        は、必要に応じてカスタム登録を自由に使用できると同時に、統合プロセスを簡素化します。\n      </p>\n    ),\n  },\n  workWithUI: {\n    title: \"UI ライブラリを使用する\",\n    description: (currentLanguage) => (\n      <>\n        <p>\n          React Hook Form は、外部 UI\n          コンポーネントライブラリとの統合が容易です。\n        </p>\n        <p>\n          <b className={typographyStyles.note}>オプション1：</b>{\" \"}\n          最適な方法は、使用したい外部コンポーネントが{\" \"}\n          <code>\n            <Link to={translateLink(\"api#register\", currentLanguage)}>\n              register\n            </Link>\n          </code>{\" \"}\n          に使用できる <code>innerRef</code> または <code>ref</code>{\" \"}\n          を公開しているかどうかを確認することです。 例えば、Material-UI の{\" \"}\n          <code>TextField</code> は、 props の1つとして <code>inputRef</code>{\" \"}\n          を受け付けます。\n          <code>inputRef</code> に <code>register</code> を渡すだけです\n        </p>\n        <p>\n          <code>\n            {\n              '<TextField inputRef={register} label=\"First name\" name=\"FirstName\"/>'\n            }\n          </code>\n        </p>\n        <p>\n          <b className={typographyStyles.note}>オプション2：</b> 例えば、{\" \"}\n          <code>react-select</code> や <code>react-datepicker</code>{\" \"}\n          などのように、 コンポーネントによっては register のための prop\n          が公開されていないことがあります。\n        </p>\n        <p>\n          次に簡単な方法は、ラッパーコンポーネントである{\" \"}\n          <Link to=\"/api#Controller\">Controller</Link> を使用することです。\n          このコンポーネントはカスタム登録処理を行います。\n        </p>\n\n        <CodeArea rawData={uiLibraryHookInput} />\n        <p>\n          <b className={typographyStyles.note}>オプション3：</b> 最後に{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://reactjs.org/docs/hooks-effect.html\"\n          >\n            useEffect\n          </a>{\" \"}\n          フックを使用してカスタム登録を設定し、{\" \"}\n          <code>\n            <Link to={translateLink(\"api#setValue\", currentLanguage)}>\n              setValue\n            </Link>\n          </code>{\" \"}\n          を介して値を更新できます。\n        </p>\n      </>\n    ),\n  },\n  globalState: {\n    title: \"グローバルな状態に統合する\",\n    description: `React Hook Form では、データを保存するために状態管理ライブラリを使用する必要はありませんが、簡単に統合することができます。`,\n  },\n  reactNative: {\n    title: \"React Native\",\n    description: (\n      <p>\n        非制御コンポーネントでも、同じようにパフォーマンスが向上します。\n        ただし、React Native と互換性のない API がいくつかあります (Web\n        とネイティブとの API の違い)。 下記の例に示すように、\n        <b>\n          手動登録 (manual <code>register</code>)\n        </b>{\" \"}\n        を使用する必要があります。\n      </p>\n    ),\n  },\n  typeScript: {\n    title: \"TypeScript\",\n    description: (\n      <p>\n        React Hook Form は <code>Typescript</code>{\" \"}\n        を使用して構築されているため、フォームの値をサポートするための{\" \"}\n        <code>FormData</code> 型を定義することができます。\n      </p>\n    ),\n  },\n  errors: {\n    title: \"エラーを処理する\",\n    description: (\n      <>\n        React Hook Form はフォーム内のエラーを表す <code>errors</code>{\" \"}\n        オブジェクトを提供しています。\n      </>\n    ),\n  },\n}\n"],"sourceRoot":""}