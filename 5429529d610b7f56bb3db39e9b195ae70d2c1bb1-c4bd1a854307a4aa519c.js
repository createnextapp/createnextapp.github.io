(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"0W2P":function(e,t,n){"use strict";n("91GP");var l=n("q1tI"),a=n("68so"),r=n("7XWO"),o=n("Vpmb"),c=n.n(o);t.a=function(e){var t,n=e.message,o=e.top,m=e.iconOnly,u=Object(r.c)().state,s=null==u||null===(t=u.setting)||void 0===t?void 0:t.lightMode,i=l.useState(!1),d=i[0],E=i[1];return m?l.createElement("span",{className:c.a.icon+" "+(s?c.a.lightIcon:{})},"!"):l.createElement("span",{className:c.a.root},l.createElement("button",{className:c.a.button,onClick:function(){return E(!d)}},"!"),l.createElement("span",null,l.createElement(a.Animate,{play:d,start:{transform:"translateX(-100%)"},end:{transform:"translateX(0)"},render:function(e){var t=e.style;return l.createElement("span",{style:Object.assign(Object.assign({},t),{},{top:o})},n||l.createElement(l.Fragment,null,"React Native: only compatible with by using Controller"))}})))}},Ejux:function(e,t,n){"use strict";n("91GP");var l=n("q1tI"),a=n("7XWO"),r=n("JLeh"),o=n.n(r);t.a=function(e){var t,n=e.children,r=e.buttonLabels,c=Object(a.c)().state,m=l.useState(0),u=m[0],s=m[1],i=null==c||null===(t=c.setting)||void 0===t?void 0:t.lightMode;return l.createElement("div",null,l.createElement("div",{className:o.a.buttonTabGroup+" "+(i?o.a.lightButtonTabGroup:""),style:{marginBottom:-15,marginTop:30}},r.map((function(e,t){return l.createElement("button",{key:e,style:Object.assign({},t===u?{cursor:"default",borderTop:"1px solid transparent"}:{}),disabled:t===u,onClick:function(){return s(t)}},e)}))),n.map((function(e,t){return l.createElement("div",{key:t,style:{display:u===t?"block":"none"}},e)})))}},HT1D:function(e,t,n){e.exports={hiddenMenu:"ApiPage-module--hiddenMenu--1rz4U",mobileTypeText:"ApiPage-module--mobileTypeText--3uPxk",quickSelect:"ApiPage-module--quickSelect--2oiId",lightQuickSelect:"ApiPage-module--lightQuickSelect--3UvMn"}},"IQ1/":function(e,t,n){"use strict";var l=n("q1tI"),a=n("Wbzz"),r=n("LuW/"),o=n("HBbU"),c=n("0W2P"),m=n("mLYZ"),u=n("SGrA"),s=n("G3ap"),i=n.n(s),d=n("9Ruc"),E=n.n(d);t.a={title:"Documentación de la API",header:{description:"se enfoca en proveer la mejor DX simplificando la API."},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,"Invocando ",l.createElement("code",null,"useForm"),", recibirás los siguientes métodos"," "),description:l.createElement("p",null,l.createElement("code",null,"useForm")," también tiene argumentos ",l.createElement("b",null,"opcionales"),". El siguiente ejemplo muestra todos los valores de las opciones por defecto."),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función de devolución de llamada le permite ejecutar cualquier esquema o personalizado validación. La función tiene la forma completa",l.createElement("code",null,"values")," como argumento, y deberá validar el resultado y devolver ambos ",l.createElement("code",null,"values")," y ",l.createElement("code",null,"errors"),". Lee mas en"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver"),"sección."))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"This context object will be injected into"," ",l.createElement("code",null,"validationResolver"),"'s second argument or Este objeto de contexto se inyectará en El segundo argumento de"," ",l.createElement("code",null,"validationResolver")," o",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup"),"objeto de contexto de validación.")),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,"El comportamiento predeterminado ",l.createElement("code",null,"firstError")," realizará todas las validaciones de los campos y reunirá los primeros errores encontrados."),l.createElement("p",null,"Con la configuración seteada en ",l.createElement("code",null,"all"),", se correran todas las validaciones de los campos y reunirá todos los errores encontrados.")),validateOnSubmit:l.createElement(l.Fragment,null,"La validación se activará en el evento ",l.createElement("code",null,"submit")," y se adjuntarán event listeners en el ",l.createElement("code",null,"onChange")," a los inputs inválidos, para volver a validarlos."),validateOnBlur:l.createElement(l.Fragment,null,"La validación se activará en el evento ",l.createElement("code",null,"blur"),"."),validateOnChange:l.createElement(l.Fragment,null,"La validación se activará en el evento ",l.createElement("code",null,"change")," de cada input, lo que conducirá a multiples renderizaciones. NO es recomendado: Considera que es una mala práctica de performance."),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Puedes setear el valor por defecto del input con"," ",l.createElement("code",null,"defaultValue/defaultChecked")," ",l.createElement("a",{className:E.a.links,href:"https://reactjs.org/docs/uncontrolled-components.html"},"(lee más acerca de los valores por defecto en la documentación de React)")," ","o utilizando ",l.createElement("code",null,"defaultValues")," como argumento opcional para cargar los valores por defecto del formulario entero."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Important:")," ",l.createElement("code",null,"defaultValues")," is cached within the custom hook, if you want to reset ",l.createElement("code",null,"defaultValues")," please use"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("reset")}},"reset")," ","api."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Los valores definidos en ",l.createElement("code",null,"defaultValues")," serán inyectados en"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("watch")}},"watch")," ","como ",l.createElement("code",null,"defaultValue"),"."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," ",l.createElement("code",null,"defaultValues")," no se carga automáticamente con los inputs registrados manualmente (ej:"," ",l.createElement("code",null,"register({ name: 'test' })"),") porque el input"," ",l.createElement("code",null,"registrado")," manualmente no provee la"," ",l.createElement("code",null,"referencia")," a React Hook Form."))},validationSchema:function(e){return l.createElement("p",null,"Aplica reglas de validación de formularios con ",l.createElement("code",null," Yup "),"en el nivel de esquema, por favor refiérase a la sección"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema")," ",".")},reValidateMode:l.createElement("p",null,"Esta opción te permite configurar cuándo las entradas con errores son revalidadas (por defecto, la validación se activa cuando se cambia un input.) ",l.createElement(c.a,null)),validationFields:l.createElement("p",null,"Proporcionar un array de campos significa que solo los campos incluidos serán validados. Esta opción es útil cuando deseas alternar qué campos son necesarios para validar."),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"Por defecto cuando un usuario envia un formulario y este contiene errores, el primer campo con un error sera el que obtenga el foco."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Solo funcionará con los inputs registrados con ",l.createElement("code",null,"ref"),". En los inputos registrados manualmente no funcionará. ej:"," ",l.createElement("code",null,"register({ name: 'test' }) // no funciona")," ")),nativeValidation:function(e){return l.createElement("p",null,"Seteando esta opción en ",l.createElement("code",null,"true")," habilitará la validación nativa del navegador. Puedes"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"Puedes obtener más información sobre la validación nativa del navegador"),", y consultar la sección de"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation")," ","para mas detalles y ejemplos.")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este método te permitirá ",l.createElement("code",null,"desregistrar")," un input en particular o un array de inputs. Esto es util cuando registras un input manualmente durante ",l.createElement("code",null,"useEffect"),"para desregistrarlo cuando se desmonte el componente."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Cuando desregistras un input, su valor ya no se incluirá en los datos del formulario que se envían."))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este método te permite registar ",l.createElement("code",null,"referencias")," de inputs/select y reglas de validación en React Hook Form."),l.createElement("p",null,"Las reglas de validación están basadas en el estandar HTML y también permite validación personalizada."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Importante:")," La propiedad"," ",l.createElement("code",null,"name")," es ",l.createElement("b",null,"requerida"),"y debe ser ",l.createElement("b",null,"unica"),". El nombre del input también permite en la sintaxis el uso de punto y corchetes, lo que permite crear fácilmente campos de formulario anidados. Abajo hay una tabla de ejemplo:")),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+r.a.lightPink}},"Si estás trabajando con ",l.createElement("code",null,"arrays/array fields"),", puedes asignar un nombre de input como ",l.createElement("code",null,"name[index]"),"."," ",l.createElement("a",{className:E.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"Ejemplo de Field Array"},"Consulta el ejemplo de Field Array"),"."),example:"Enviar Resultado",selectHelp:"Seleccionando la opción de registro, la tabla de API debajo se actualizará.",options:{title:"Opciones registradas",registerWithValidation:"Registro con validación",registerWithValidationMessage:"Registro con validación y mensaje de error",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:i.a.title},"Registro personalizado"),l.createElement("p",null,"También puedes registrar inputs manualmente, lo cual es útil cuando trabajas con componentes personalizados y la referencia"," ",l.createElement("code",null,"Ref"),"no es accesible. Este es el caso cuando estas trabajando con React Native o componentes personalizados como",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select"),"."),l.createElement("p",null,"Cuando utilizas un registro personalizado, necesitarás actualizar el valor del input con"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),", porque el input ya no es registrado con su referencia."),l.createElement("p",null,l.createElement("code",{className:i.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Si quieres que el input registrado manualmente dispare una renderización durante la actualización de su valor, entonces necesitarás asignar un tipo a tu input registrado."),l.createElement("p",null,l.createElement("code",{className:i.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:"),"múltiples radio input con el mismo nombre, desea registrar la validación hasta el último input para que el hook entienda validarlos como un grupo al final."))}},validation:{required:l.createElement(l.Fragment,null,"Un valor booleano que, si es verdadero, indica que el input debe tener un valor antes de que el formulario sea enviado. Puedes asignar una cadena de texto para retornar un mensaje de error en el objeto de"," ",l.createElement("code",null,"errores"),"."),maxLength:"La longitud máxima del valor a aceptar para este input.",minLength:"La longitud mínima del valor a aceptar para este input.",max:"El valor máximo a aceptar para este input.",min:"El valor mínimo a aceptar para este input.",pattern:"El patrón regex para este input.",validate:"Puedes pasar una función callback commo argumento para validar, o puedes pasar un objeto de funciones callback para validar todas ellas. (consulta los ejemplos)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este objeto contiene informacioón sobre el estado del formulario."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Important:")," ",l.createElement("code",null,"formState")," is wrapped with"," ",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy")," ","to improve render performance, so make you have invoke/read it before",l.createElement("code",null,"render")," in order to enable the state update. Esta La función de reducción de la función de renderizado solo se aplica a la plataforma web debido a una falta de soporte en ",l.createElement("code",null,"Proxy")," en React Native.")),dirty:"Se setea en verdader luego que el usuario haya interactuado con algún input.",dirtyFields:"Un conjunto único de campos modificados por el usuario.",isSubmitted:"Se setea a verdadero luego que el usuario envia el formulario. Después del envío de un formulario, su estado permanecerá enviado hasta que se invoque con el método de reinicio.",touched:"Un objeto con todos los inputs con los que se interactuó.",isSubmitting:l.createElement(l.Fragment,null,"Durante el envio del formulario se setea en ",l.createElement("code",null,"verdadero")," y luego del envio se setea en ",l.createElement("code",null,"falso")),submitCount:"Número de envios de formulario.",isValid:"Se setea en verdadero si no tiene ningún error."},errors:{title:"errors",description:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Objeto que contiene los errores de formulario o los mensajes de error que pertenecen a cada input."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Puedes aprender más en"," ",l.createElement(a.Link,{to:Object(o.a)("/advanced-usage#ErrorMessage",e)},"Mensaje de error")," ","de la página de uso avanzado."))},types:l.createElement(l.Fragment,null,"Esto es útil para validaciones de inputs como reglas de contraseña, cuando múltiples errores deben retornarse para un solo campo. Para habilitar esta función, asegúrese de haber configurado"," ",l.createElement("code",null,"validateCriteriaMode: 'all'"),"."),message:"Message es un string vacio por defecto. Sin embargo, si registra la validación con un mensaje de error, se devolverá.",ref:"Referencia del input."},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Se observarán los inputs especificados y devolverá su valor, es útil para determinar qué renderizar."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Cuando ",l.createElement("code",null,"defaultValue")," no es definido, el primer renderizado de ",l.createElement("code",null,"watch")," retornará ",l.createElement("code",null,"undefined")," ","porque es llamado antes de ",l.createElement("code",null,"register"),", pero puedes setear el ",l.createElement("code",null,"defaultValue")," como segundo argumento para retornar el valor.")),l.createElement("li",null,l.createElement("p",null,"Sin embargo, si ",l.createElement("code",null,"defaultValues")," fue pasado a"," ",l.createElement("code",null,"useForm")," como argumento, entonces el primer renderizado retornará lo que se haya definido en"," ",l.createElement("code",null,"defaultValues"),".")))),tableTitle:{single:l.createElement(l.Fragment,null,"Observa el valor de entrada por nombre (similar a la función ","",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get")," ","de lodash)"),multiple:"Observa multiples inputs",all:"Observa todos los inputs",nest:"Observa todos los inputs y retorna objetos anidados"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función pasará los datos del formulario cuando la validación haya sido exitosa Y puede ser invocada remotamente también."),l.createElement("p",null,l.createElement("code",{className:i.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Puedes pasar una función ",l.createElement("code",null,"async")," para realizar una validación asíncrona. ej:"," "),l.createElement("p",null,l.createElement("code",{className:i.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función reseteará los valores de los campos y errores dentro del formulario. Al suministrar ",l.createElement("code",null,"omitResetState"),", tiene la libertad de solo restablece un estado específico. Puedes pasar"," ",l.createElement("code",null,"valores")," como argumento opcional para resetear el formulario a los valores asignados."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Para componentes controlados como ",l.createElement("code",null,"React-Select")," que no exponen la"," ",l.createElement("code",null,"referencia"),", necesitarás resetear el valor del input manualmente a través de"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","o utilizando"," ",l.createElement("button",{className:E.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller")," ","para wrappear tu componente controlado."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Necesitaras proporcione",l.createElement("code",null,"defaultValues")," durante ",l.createElement("code",null,"useForm")," o",l.createElement("code",null,"reset")," con valor para restablecer",l.createElement("code",null,"Controller"),"valor de los componentes."))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"La función te permite setear manualmente uno o varios errores."),l.createElement("p",null,l.createElement("b",{className:i.a.note}," Nota:"),": Este método no persistirá el error y bloqueará La acción de envío. Es más útil durante la función ",l.createElement("code",null,"handleSubmit")," cuando desea dar comentarios de error a los usuarios después de la validación asíncrona."))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": resetea todos los errores.")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": resetea un único error.")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": resetea múltiples errores.")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función te permite setear dinámicamente los valores de input/select. Al mismo tiempo, trata de evitar renderizaciones cuando no son necesarias y solo bajo las siguientes condiciones:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Cuando un error es disparado por una actualización de valor.")),l.createElement("li",null,l.createElement("p",null,"Cuando un error es corregido por una actualización de valor.")),l.createElement("li",null,l.createElement("p",null,"Cuando setValue es invocado por primera vez y formState"," ",l.createElement("code",null,"dirty")," está seteado en verdadero")),l.createElement("li",null,l.createElement("p",null,"Cuando setValue is invocado y formState ",l.createElement("code",null,"touched")," es actualizado."))),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Invocando este método,"," ",l.createElement("code",null,"formState")," agregara el ",l.createElement("code",null,"name")," del input en"," ",l.createElement("code",null,"touched"),"."),l.createElement("p",null,"También puedes setear ",l.createElement("code",null,"shouldValidate")," a ",l.createElement("code",null,"true")," ","y esto disparará la validación del campo. ej:"," ",l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función retornará todos los datos del formulario, y es útil en funciones en los que quieras retornar todo los valores del formulario."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Por defecto ",l.createElement("code",null,"getValues()")," retornará los datos del formulario en una estructura plana. ej:"," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"Trabajando en los campos de formulario definidos,"," ",l.createElement("code",null,"getValues(","{ nest: true }",")")," retornará los datos en una estructura anidada de acuerdo al ",l.createElement("code",null,"name")," del input. ej: ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Para activar manualmente una validación de input/select en el formulario."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Cuando la validación falla, el objeto ",l.createElement("code",null,"errors")," se actualizará."))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"Si quieres centralizar tus reglas de validación con una librería de validación de esquemas, puedes setear ",l.createElement("code",null,"validationSchema")," en"," ",l.createElement("code",null,"useForm")," como argumento opcional. React Hook Form actualmente soporta"," ",l.createElement("a",{className:E.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","para validación de esquema de objeto.")},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Nombre único de tu input.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Componente controlado. ej: ",l.createElement("code",null,'as="input"')," or"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"Object")),l.createElement("td",null,"✓"),l.createElement("td",null,"El objeto ",l.createElement("code",null,"control")," es obtenido al invocar"," ",l.createElement("code",null,"useForm"),".")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"Lo mismo que el ",l.createElement("code",null,"defaultValue")," de componentes no controlados, cuando se setea un valor ",l.createElement("code",null,"booleano"),", es tratado como un checkbox input.",l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," necesitaras proporcione ",l.createElement("code",null,"defaultValue")," o",l.createElement("code",null,"defaultValues​​")," en ",l.createElement("code",null,"useForm")),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Note"),": si tu formulario lo hará invoque ",l.createElement("code",null,"reset")," con diferentes valores, deberá proporcionar ",l.createElement("code",null,"defaultValues​​")," en el nivel useForm en lugar de set",l.createElement("code",null,"defaultValue")," en línea."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,"Reglas de validación conforme a ",l.createElement("code",null,"register"),".")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"Esta propiedad ",l.createElement("code",null,"onChange")," te permitirá customizar el valor de retorno, asegúrese de conocer la forma de los accesorios del componente externo ",l.createElement("code",null,"value"),".",l.createElement(m.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ event, data ]) => ({ checked: data.checked})}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Esta propiedad te permite setear el nombre onChange específico del objeto wrappeado, por ejemplo, cuando el evento"," ",l.createElement("code",null,"onChange")," se llama ",l.createElement("code",null,"onTextChange"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"Esta devolución de llamada permite que el enlace personalizado se centre en la entrada cuando hay un error. Esta función es aplicable para React y Componentes React-Native siempre que puedan enfocarse."),l.createElement("p",null,l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"Aquí hay un ejemplo de trabajo."),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Esta propiedad te permite setear el nombre onBlur específico del objeto wrappeado, por ejemplo, cuando el evento ",l.createElement("code",null,"onBlur"),"se llama ",l.createElement("code",null,"onTextBlur")))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"React Hook Form fomenta el uso de componentes no controlados e inputs nativos, sin embargo es dificil evitar trabajar con componentes controlados externos como"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select"),","," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","y"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI"),". Este componente los envuelve para que trabajar con ellos sea más sencillo."))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"Form context está destinado a resolver el problema cuando hay inputs anidados profundamente en el árbol de componentes y pasar métodos hasta el fondo como ","",l.createElement("code",null," propiedades ")," se vuelve tedioso."),description:l.createElement(l.Fragment,null,l.createElement("p",null,"Una vez que el formulario es wrappeado con ",l.createElement("code",null,"FormContext"),", la ",l.createElement("code",{className:i.a.typeText},"function")," ",l.createElement("code",null,"useFormContext"),"puede ser invocada desde sus componentes hijos."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," Al invocar"," ",l.createElement("code",null,"useFormContext")," tendrás acceso a todas las funciones del hook ",l.createElement("code",null,"useForm"),"."))},control:{title:"control",description:l.createElement("p",null,"Este objeto está hecho para el Controller de React Hook Form, contiene métodos para registrar componentes controlados en React Hook Form.")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"Un componente simple para representar el mensaje de error del input asociado."),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Nombre de campo asociado.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"object")),l.createElement("td",null,"✓"),l.createElement("td",null,"Objeto ",l.createElement("code",null,"errors")," de React Hook Form")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"mensaje de error en línea.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"Componente wrappeado o un tag HTML. ej: ",l.createElement("code",null,'as="span"')," o"," ",l.createElement("code",null,"as={<Text />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"This is a"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","for rendering error message or messages.",l.createElement("p",null,l.createElement("b",{className:i.a.note},"Note:")," you need to set"," ","validateCriteriaMode to 'all' for using ",l.createElement("code",null,"messages"),"."))))},NativeValidation:{title:"Validación nativa del navegador",description:l.createElement(l.Fragment,null,l.createElement("p",null,"El siguiente ejemplo muestra cómo puedes aprovechar la validación nativa del navegador. Solo necesitas establecer"," ",l.createElement("code",null,"nativeValidation")," en ","",l.createElement("code",null,"true")," y el resto de la sintaxis es la misma que la validación estándar."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Note"),": This feature has been removed in V4 due to low usage, but you can still use it in V3"))},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Un hook customizado para trabajar con Field Arrays no-controlados (inputs dinámicos). La razón detrás de este hook es proveer una mejor experiencia de uso y performance de los formularios. Puedes mirar"," ",l.createElement("a",{href:"https://www.youtube.com/watch?v=Q7lrHuUfgIs",target:"_blank",rel:"noopener noreferrer"},"este corto video")," ","para comparar Field Arrays controlados vs. no-controlados."),l.createElement("p",null,"Este hook provee el siguiente objeto y funciones."),l.createElement(m.b,{rawData:u.a}),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Important: "),l.createElement("code",null,"useFieldArray")," está construido sobre componentes no controlados. Las siguientes notas lo ayudarán a conocer y tener en cuenta su comportamiento durante la implementación."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"puedes inicializar los (campos) ",l.createElement("code",null,"fields")," seteando"," ",l.createElement("code",null,"defaultValues")," en ",l.createElement("code",null,"useForm")," hook.")),l.createElement("li",null,l.createElement("p",null,"asegurate de asignar el ",l.createElement("code",null,"id")," del objeto"," ",l.createElement("code",null,"fields")," como la key de tu componente.")),l.createElement("li",null,l.createElement("p",null,"make sure to set ",l.createElement("code",null,"defaultValue")," to"," ",l.createElement("code",null,"fields[index]")," when you want to set default value, remove or reset with inputs.")),l.createElement("li",null,l.createElement("p",null,"no puedes llamar acciones una tras otra. Las acciones deben ser activado por render."),l.createElement(m.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,l.createElement("p",null,"It's ",l.createElement("strong",null,"important")," to apply"," ",l.createElement("code",null,"ref={register()}")," instead of"," ",l.createElement("code",null,"ref={register}")," when working with"," ",l.createElement("code",null,"useFieldArray")," so ",l.createElement("code",null,"register")," will get invoked during ",l.createElement("code",null,"map"),".")),l.createElement("li",null,l.createElement("p",null,"No funciona con registro personalizado en ",l.createElement("code",null,"useEffect"),".")))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:i.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"Este objeto es la fuente de la verdad para mapear y representar entradas.",l.createElement("p",null,l.createElement("b",{className:i.a.note},"Importante: ")," debido a que las entradas pueden ser no-controladas, se requiere"," ",l.createElement("code",null," id ")," con componentes mapeados para ayudar a React a identificar qué elementos se han cambiado, agregado o eliminado."),l.createElement("p",null,"eg: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"Agregue input/inputs al final de los campos")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"Antepone input/inputs al comienzo de tus campos")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(index: number, value: object) => void")),l.createElement("td",null,"Inserta input/inputs en una posición en particular.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"Intercambia las posiciones de los input/inputs.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"Mueve los input/inputs a otra posición.",l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," la diferencia entre"," ",l.createElement("code",null,"move")," y ",l.createElement("code",null,"swap"),", si continuas llamando a"," ",l.createElement("code",null,"move")," pusheara input/inputs en circulo, mientras que"," ",l.createElement("code",null,"swap")," solo intercambiará las posiciones de dos input/inputs."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",{className:i.a.typeText},"(index?: number | number[]) => void")),l.createElement("td",null,"Elimina input/inputs en una posición en particular, or elimina todos cuando no se proporciona un index.")))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta función le permite ejecutar cualquier método de validación externo, tal como"," ",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),","," ",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct")," ","y etc. De hecho, el objetivo no es solo limitado Sí como nuestro externo (esquema) biblioteca de validación. Nos gustaría apoyar a muchos otros bibliotecas de validación para trabajar con React Hook Form. Incluso puedes escribir su lógica de validación personalizada para validar."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," asegúrate de que eres devolver objeto que contiene ",l.createElement("code",null,"values")," y ",l.createElement("code",null,"errors"),", y su valor predeterminado debe ser un objeto vacío"," ",l.createElement("code",null," ","{}"," "),"."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," errores de retorno La clave del objeto debe ser relevante para sus entradas."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," esta función se almacenará en caché dentro del enlace personalizado, similar a"," ",l.createElement("code",null,"validationSchema"),", mientras que"," ",l.createElement("code",null,"validationContext")," es un objeto mutable que se puede cambiar en cada representación."),l.createElement("p",null,l.createElement("b",{className:i.a.note},"Nota:")," volver a validar la entrada solo ocurre un campo a la vez durante la interacción del usuario, porque el lib mismo evaluará el objeto de error en el campo específico y desencadenar re-renderizar en consecuencia."))}}},JLeh:function(e,t,n){e.exports={buttonTabGroup:"TabGroup-module--buttonTabGroup--2yFrr",lightButtonTabGroup:"TabGroup-module--lightButtonTabGroup--2_pAv"}},QkAT:function(e,t,n){"use strict";t.a='import React from "react";\nimport { useForm, Controller } from "react-hook-form";\nimport { TextField } from "@material-ui/core";\n\nfunction App() {\n  const { control, handleSubmit } = useForm();\n\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        as={TextField}\n        name="firstName"\n        control={control}\n        defaultValue=""\n      />\n      \n      <input type="submit" />\n    </form>\n  );\n}\n'},TSGL:function(e,t,n){"use strict";var l=n("q1tI"),a=n("LuW/"),r=n("0W2P"),o=n("Kzm3"),c=n("mLYZ"),m=n("SGrA"),u=n("G3ap"),s=n.n(u),i=n("9Ruc"),d=n.n(i);t.a={title:"API 설명서",header:{description:"은 API 단순화를 통해 최고의 DX를 제공합니다."},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,l.createElement("code",null,"useForm")," 을 호출하여 다음의 메소드들을 사용할 수 있습니다.."," "),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"이 콜백 함수는 어떠한 스키마나 커스텀 유효성 검사 함수를 끼워넣어 실행시킬 수 있도록 합니다. 이 함수는 전체 폼의 ",l.createElement("code",null,"values")," 를 인자로 가지고 있으며, 결과를 검증한 다음",l.createElement("code",null,"values")," 와 ",l.createElement("code",null,"errors")," 값 모두를 리턴해야 합니다. 자세한 내용은",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver")," ","섹션에서 확인하세요."))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"이 컨텍스트 객체는 ",l.createElement("code",null,"validationResolver")," 의 두 번째 인자로 주입되거나"," ",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","유효성 검사의 컨텍스트 객체로 주입됩니다.")),description:l.createElement("p",null,l.createElement("code",null,"useForm")," 에서는 ",l.createElement("b",null,"옵셔널"),"한 인수도 있습니다. 다음 예제는 모든 옵션의 기본값을 보여줍니다."),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,"기본값으로 설정 된 ",l.createElement("code",null,"firstError")," 는 모든 필드 유효성 검사를 실행하고 처음 발견하는 모든 에러를 모읍니다."),l.createElement("p",null,l.createElement("code",null,"all")," 로 설정하면, 모든 필드의 유효성 검사가 실행되면서 발생하는 필드의 모든 에러를 모읍니다.")),validateOnSubmit:l.createElement(l.Fragment,null,"유효성 검사는 ",l.createElement("code",null,"submit")," 이벤트에서 트리거되며, 유효하지 않은 입력은 ",l.createElement("code",null,"onChange")," 이벤트 리스너를 연결하여 유효성을 다시 확인합니다."),validateOnBlur:l.createElement(l.Fragment,null,l.createElement("code",null,"blur")," 이벤트에서 유효성 검사가 트리거됩니다."),validateOnChange:l.createElement(l.Fragment,null,"유효성 검사는 각 입력창의 ",l.createElement("code",null,"change")," 이벤트로 시작되어, 여러번 다시 렌더링합니다. 이 방법은 랜더링 성능을 떨어뜨리므로 추천하지 않습니다."),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"입력의 기본값을 ",l.createElement("code",null,"defaultValue/defaultChecked")," 로 설정 하거나"," ",l.createElement("a",{className:d.a.links,href:"https://ko.reactjs.org/docs/uncontrolled-components.html"},"(기본값에 대한 React 문서를 읽어보세요)"),", ",l.createElement("code",null,"defaultValues")," 를 옵셔널 인수로 전달 하여 전체 폼의 기본값을 채울 수 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Important:")," ",l.createElement("code",null,"defaultValues")," is cached within the custom hook, if you want to reset ",l.createElement("code",null,"defaultValues")," please use"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("reset")}},"reset")," ","api."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," ",l.createElement("code",null,"defaultValues")," 내 정의 된 값은"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("watch")}},"watch")," ","의 ",l.createElement("code",null,"defaultValue")," 값으로 주입됩니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 수동"," ",l.createElement("code",null,"register")," 필드는 React Hook Form의 ",l.createElement("code",null,"ref")," 를 제공하지 않기에, 수동 입력 필드(예를 들어,"," ",l.createElement("code",null,"register({ name: 'test' })")," )의"," ",l.createElement("code",null,"defaultValues")," 는 자동 완성 되지 않습니다."))},validationSchema:function(e){return l.createElement("p",null,l.createElement("code",null,"Yup")," 의 스키마 레벨 폼 유효성 검사 규칙을 적용 하세요."," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema")," ","섹션을 참고하세요.")},reValidateMode:l.createElement("p",null,"이 옵션을 사용하여 입력의 재유효성 검사를 언제 할지 설정 할 수 있습니다. (기본적으로 입력이 변경될 때 유효성 검사가 트리거 됩니다. )",l.createElement(r.a,null)),validationFields:l.createElement("p",null,"제공되는 필드 배열은 앞으로 검증될 필드만 포함합니다. 이 옵션은 유효성 검사가 필요한 필드에 대해서 토글(toggle)을 원할 경우에 유용합니다."),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"기본적으로 사용자가 폼을 제출하고 에러가 있는 경우, 에러가 있는 첫번째 필드에 포커스 됩니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," ",l.createElement("code",null,"ref")," 로 등록된 필드만 작동합니다. 수동으로 등록하면 동작하지 않습니다. 예 :"," ",l.createElement("code",null,"register({ name: 'test' }) // 동작하지 않음")," ")),nativeValidation:function(e){return l.createElement("p",null,"이 옵션을 ",l.createElement("code",null,"true")," 로 설정하면 브라우저의 기본 유효성 검사가 활성화됩니다.","  ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"브라우저 기본 유효성 검사"),"에 대한 내용을 확인하시고 좀 더 자세한 내용과 예시는"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation")," ","에서 참고하실 수 있습니다.")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수로 단일 입력 혹은 여러 입력들을 ",l.createElement("code",null,"unregister")," 할 수 있습니다. 이 함수는 ",l.createElement("code",null,"useEffect")," 로 입력을 등록한 뒤, 컴포넌트가 언마운트 되면서 등록을 해제하고자 할 때 유용합니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 입력을 등록 취소(unregister)하면, 제출된 폼 데이터에 해당 값이 더 이상 포함되지 않습니다."))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수에서 입력/선택(input/select) ",l.createElement("code",null,"Ref")," 와 유효성 검사 규칙을 등록(register)할 수 있습니다."),l.createElement("p",null,"유효성 검사 규칙은 모두 HTML 표준을 기반으로 하며, 커스텀 유효성 검사도 가능합니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"중요:")," ",l.createElement("code",null,"name"),"은"," ",l.createElement("b",null,"필수"),"이며 ",l.createElement("b",null,"유니크"),"해야합니다. name은 점(dot)과 괄호 구문도 지원하므로, 중첩 된 폼 필드를 쉽게 만들 수 있습니다. 예제는 다음과 같습니다.")),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+a.a.lightPink}},l.createElement("code",null,"arrays/array")," 필드의 경우, ",l.createElement("code",null,"name[index]")," 와 같이 name을 지정할 수 있습니다."," ",l.createElement("a",{className:d.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"example for Field Array"},"Field Array 예제를 확인하세요."),"."),example:"제출 결과",selectHelp:"등록 옵션(Register Options)을 선택하면, 아래의 API 테이블이 업데이트됩니다.",options:{title:"Register Options",registerWithValidation:"유효성 검사와 함께 등록",registerWithValidationMessage:"유효성 검사 및 에러 메시지 등록",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:s.a.title},"Custom Register"),l.createElement("p",null,"커스텀 컴포넌트와 ",l.createElement("code",null,"Ref"),"에 액세스 할 수 없는 경우, 입력을 수동으로 등록 할 수 있습니다. 이는 실제로 React Native 또는"," ",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select")," ","와 같은 커스텀 컴포넌트와 작업할 때 사용될 수 있습니다."),l.createElement("p",null,"Custome register를 사용하면, 입력은 더이상 ref로 등록되지 않으므로,"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","을 통해 입력 값을 업데이트해 주어야 합니다."),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 값을 업데이트하는 동안 커스텀 등록된 입력을 다시 렌더링 하도록 하려면, 등록된 입력의 타입을 지정해 주어야 합니다."),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," multiple radio inputs with the same name, you want to register the validation to the last input so the hook understand validate them as a group at the end."))}},validation:{required:l.createElement(l.Fragment,null,"폼 제출을 위해 반드시 필요한 경우, true로 지정합니다. 에러시 반환할 문자열 메세지는 ",l.createElement("code",null,"errors")," 객체에 지정할수 있습니다."),maxLength:"입력에 허용되는 최대 길이입니다.",minLength:"입력에 허용되는 최소 길이입니다.",max:"입력에 허용되는 최대 값입니다.",min:"입력에 허용되는 최소 값입니다.",pattern:"입력에 대한 정규식 패턴입니다.",validate:"콜백 함수를 인수로 전달하거나 콜백 함수의 객체를 전달하여 검증할 수 있습니다. (예제 참조)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"폼 상태(form state)에 대한 정보를 포함합니다"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"중요:")," ",l.createElement("code",null,"formState")," ","는 랜더링 퍼포먼스 향상을 위해"," ",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy")," ","로 감싸져 있습니다. 그러니 상태를 업데이트 하려면 ",l.createElement("code",null,"render")," ","전에 읽거나 실행해야 합니다. 이 다시 렌더링 기능 생략 기능은 웹 플랫폼에만 적용됩니다. React Native에서 ",l.createElement("code",null,"Proxy"),"를 지원합니다.")),dirty:"사용자가 어떠한 입력이라도 했다면, true로 설정하십시오.",dirtyFields:"고유 한 사용자 수정 필드 세트.",isSubmitted:"사용자가 폼을 제출 한 후 true로 설정하십시오. 양식을 제출 한 후 reset 메소드로 호출 될 때까지 해당 상태가 제출 된 상태로 유지됩니다.",touched:"상호 작용된 모든 입력의 배열입니다.",isSubmitting:l.createElement(l.Fragment,null,"폼 제출하는 동안은 ",l.createElement("code",null,"true")," 로, 그 후에는 ",l.createElement("code",null,"false"),"로 설정합니다."),submitCount:"제출 한 폼의 수",isValid:"에러가 없다면, true로 설정하세요."},errors:{title:"errors",description:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"각 입력에 대한 폼 에러 혹은 에러 메시지를 가진 객체입니다.")," ",l.createElement("p",null,l.createElement("b",{className:s.a.note},o.a.note[e],":")," ","V3 과 V4 의 차이점:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"V4: 중첩된 객체"),l.createElement("p",null,l.createElement("strong",null,"사용 이유:")," 옵셔널 체이닝이 커뮤니티 사이에서 많이 알려졌고, 더 나은 타입 지원을 합니다."),l.createElement("p",null,l.createElement("code",null,"errors?.yourDetail?.firstName;"))),l.createElement("li",null,l.createElement("p",null,"V3: 평탄한 객체"),l.createElement("p",null,l.createElement("strong",null,"사용 이유:")," 단순하고 에러에 접근하기 쉽습니다."),l.createElement("p",null,l.createElement("code",null,"errors['yourDetail.firstName'];")))))},types:l.createElement(l.Fragment,null,"여러 종류의 에러가 하나의 필드에 적용되어야 하는 비밀번호 규칙 같은 입력의 유효성 검사를 할 때 유용합니다. 이 기능을 활성화하려면,"," ",l.createElement("code",null,"validateCriteriaMode: 'all'")," 으로 설정해두는 것을 잊지 마세요."),message:"메시지는 기본적으로 빈 문자열입니다. 하지만 에러 메시지와 함께 유효성 검사를 함께 등록하면, 이 값이 반환됩니다.",ref:"입력 엘레먼트에 대한 ref"},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"지정된 입력을 확인(watch)하고, 그 값들을 반환하며, 렌더링 할 대상을 결정할 때 유용합니다."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"defaultValue"),"가 정의 안되어 있는 경우,"," ",l.createElement("code",null,"register"),"가 아직 호출이 안되었기 때문에"," ",l.createElement("code",null,"watch"),"의 첫번째 렌더링에서는 ",l.createElement("code",null,"undefined")," 을 반환합니다. 하지만, 두번째 인수로 ",l.createElement("code",null,"defaultValue"),"를 설정하여 값을 반환 할 수 있습니다.")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"useForm")," 에서 ",l.createElement("code",null,"defaultValues"),"로 정의가 되어 있다면, 첫번째 렌더링에서 ",l.createElement("code",null,"defaultValues"),"에 적용된 내용을 반환합니다.")))),tableTitle:{single:l.createElement(l.Fragment,null,"name으로 입력값 확인 (lodash"," ",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get")," ","기능과 유사)"),multiple:"여러 입력을 확인",all:"모든 입력을 확인",nest:"모든 입력을보고 중첩 된 객체를 반환"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수는 유효성 검사가 완료 되었을 때 폼 데이터를 전달합니다원격으로도 호출 할 수 있습니다."),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 비동기 유효성 검사를 위한 ",l.createElement("code",null,"async")," 함수를 전달할 수 있습니다 . 예 :"," "),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수는 폼 내의 필드 값과 에러를 재설정(reset) 합니다."," ",l.createElement("code",null," omitResetState "),"를 제공하면 자유롭게 특정 상태 만 재설정합니다. ",l.createElement("code",null,"values"),"를 옵셔널 인수로 전달하면 폼의 기본 값으로 재설정 할 수 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," ",l.createElement("code",null,"React-Select")," 와 같이 ",l.createElement("code",null,"ref")," 를 노출시키지 않는 컴포넌트는,"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),"를 통해 수동으로 입력값을 재설정해주어야 합니다. 또는"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller"),"을 사용하여 제어 컴포넌트를 감싸 처리할 수 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 당신은해야합니다",l.createElement("code",null," useForm ")," 또는중 ",l.createElement("code",null," defaultValues ​​"),"제공",l.createElement("code",null," 컨트롤러 "),"를 재설정하기위한 값으로",l.createElement("code",null," 재설정 "),"구성 요소의 가치."))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수를 사용하면 한개 혹은 그 이상의 입력값 에러를 수동으로 설정할 수 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고")," :이 방법은 오류와 차단을 지속하지 않습니다 제출 조치. ",l.createElement("code",null,"handleSubmit")," 함수 중에 더 유용합니다. 비동기 유효성 검사 후 사용자에게 오류 피드백을 제공하려고합니다."))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": 모든 에러를 리셋")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": 하나의 에러 리셋")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": 여러개의 에러 리셋")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수를 통해 동적으로 입력/선택 값을 설정할 수 있습니다. 그와 동시에, 아래의 조건이 충족할 때만 다시 랜더링되어 불필요한 리랜더링을 피하려 합니다."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"값이 업데이트 되면서 에러를 일으킬 때")),l.createElement("li",null,l.createElement("p",null,"값이 업데이트 되면서 에러를 바로잡을 때")),l.createElement("li",null,l.createElement("p",null,"맨 처음 실행되어 폼이 ",l.createElement("code",null,"dirty")," 상태가 되도록 했을 때")),l.createElement("li",null,l.createElement("p",null,"formState 를 ",l.createElement("code",null,"touched")," 로 업데이트 했을 때"))),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 이 함수를 호출함으로써,"," ",l.createElement("code",null,"formState"),"는 이 입력의 ",l.createElement("code",null,"name"),"을"," ",l.createElement("code",null,"touched"),"로 설정하게 됩니다."),l.createElement("p",null,l.createElement("code",null,"shouldValidate"),"를 ",l.createElement("code",null,"true"),"로 설정하여, 필드 유효성 검사를 트리거할 수 도 있습니다. 예 :"," ",l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수는 전체 폼 데이터를 반환하는 함수이며, 폼 내 값을 검색하려는 경우에 유용합니다."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"기본적으로, ",l.createElement("code",null,"getValues()"),"는 폼 데이터를 flat structure로 반환합니다. 예 :"," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"정의된 폼 필드에서 ",l.createElement("code",null,"getValues(","{ nest: true }",")")," 는"," ",l.createElement("code",null,"name")," 입력 값에 따라 중첩된 구조의 데이터로 반환됩니다. 예 :"," ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"폼의 입력/선택 유효성 검사를 수동으로 트리거합니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 유효성 검사에 실패하면"," ",l.createElement("code",null,"errors")," 객체가 업데이트됩니다."))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"외부 스키마와 유효성 검사 규칙을 함께 사용하고 싶을 경우,"," ",l.createElement("code",null,"useForm"),"의 ",l.createElement("code",null,"validationSchema"),"를 옵셔널 인자로 적용 할 수 있습니다. React Hook Form의 객체 스키마 유효성 검사에서는"," ",l.createElement("a",{className:d.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","을 지원합니다.")},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"입력값을 위한 고유의 이름.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"제어 컴포넌트. 예: ",l.createElement("code",null,'as="input"')," 혹은"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null,"✓"),l.createElement("td",null,l.createElement("code",null,"control")," 객체는 ",l.createElement("code",null,"useForm")," 을 호출하여 나온 것을 넣어주면 됩니다. FormContext 를 사용하고 있다면 필수는 아닙니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"비제어 컴포넌트의 ",l.createElement("code",null,"defaultValue")," 와 같습니다."," ",l.createElement("code",null,"boolean")," 값이 주어졌을 때는, 체크박스 입력값으로 다루어집니다.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고: ")," ",l.createElement("code",null,"defaultValue")," 또는 ",l.createElement("code",null,"useForm")," 의"," ",l.createElement("code",null,"defaultValues")," 을 넣어주어야 할 것입니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고: ")," 만약 폼이 기본값과 함께 ",l.createElement("code",null,"reset"),"을 호출한다면, 인라인 값으로"," ",l.createElement("code",null,"defaultValues")," 를 제공하는 대신 useForm 단계에서"," ",l.createElement("code",null,"defaultValues​​")," 를 제공해주어야 합니다."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"register")," 에 따른 유효성 검사 규칙.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"리턴 값을 커스터마이징 할 수 있습니다, 외부 컴포넌트의"," ",l.createElement("code",null,"value")," prop 이 어떤 형태를 가지고 있는지 알고 있어야 합니다. 이벤트 핸들러에 전달된 값이 ",l.createElement("code",null,"object")," 형태이고"," ",l.createElement("code",null,"type")," 속성값을 포함하고 있는 경우 ",l.createElement("code",null,"value")," ","혹은 ",l.createElement("code",null,"checked")," 속성값을 읽어올 수 있습니다.",l.createElement(c.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ { checked } ]) => ({ checked })}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"이 prop 은 특정한 이벤트 이름을 지정하여 그 이벤트의 변화를 바라볼 수 있도록 합니다. 예: ",l.createElement("code",null,"onChange")," 이벤트가"," ",l.createElement("code",null,"onTextChange")," 로 되어있는 경우.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"유효성 검사 에러가 발생했을 때 이 콜백을 이용하여 특정 인풋으로 포커스를 이동시킬 수 있습니다. 이 함수는 포커스만 시킬 수 있다면 React 및 React-Native 컴포넌트에 모두 적용됩니다."),l.createElement("p",null,"여기에"," ",l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"MUI 를 활용한 예제가 있습니다"),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"이 prop 은 특정한 이벤트 이름을 지정하여 그 이벤트의 변화를 바라볼 수 있도록 합니다. 예: ",l.createElement("code",null,"onBlur")," 이벤트가"," ",l.createElement("code",null,"onTextBlur")," 로 되어있는 경우.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"valueName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"이 prop 은 ",l.createElement("code",null,"value")," prop 을 다시 정의하여(Override)",l.createElement("code",null,"value")," prop 을 사용하지 않는 다른 컴포넌트에 사용할 수 있습니다. 예: ",l.createElement("code",null,"checked"),", ",l.createElement("code",null,"selected")," 등."))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"React Hook Form 은 비제어 컴포넌트와 네이티브 입력을 활용하지만"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select"),","," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","혹은"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI")," ","와 같은 제어 컴포넌트를 사용하는 외부 라이브러리와 조합하여 사용하는 것을 피할 수는 없습니다. 이 래퍼 컴포넌트는 위와 같은 컴포넌트와 쉽게 조합하여 사용할 수 있도록 도와주는 역할을 합니다."))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"폼 컨텍스트(Form Context)는 입력들이 컴포넌트 트리에서 깊이 중첩되었을 때 생기는 문제를 해결하고, ",l.createElement("code",null,"props"),"를 더 깊이 전달하기 위해 사용합니다."),description:l.createElement(l.Fragment,null,l.createElement("p",null,l.createElement("code",null,"FormContext"),"으로 폼을 감싸면, ",l.createElement("code",null,"useFormContext"),":"," ",l.createElement("code",{className:s.a.typeText},"function")," 이 하위 컴포넌트에서 호출 될 수 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," ",l.createElement("code",null,"useFormContext")," 를 통해 모든 ",l.createElement("code",null,"useForm")," 의 hook function이 제공됩니다."))},control:{title:"control",description:l.createElement("p",null,"이 객체는 React Hook Form 의 Controller 컴포넌트를 위해 만들어졌습니다. 안에는 제어되는 컴포넌트를 React Hook Form 에 등록하기 위한 메서드가 담겨 있습니다.")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"입력값의 에러 메세지를 랜더링하기 위한 간단한 컴포넌트입니다."),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"연결할 필드 이름.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"errors")," 객체는 React Hook Form 에서 전달된 것입니다. FormContext 를 쓴다면 필수 값은 아닙니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"인라인 오류 메시지.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"감싸질 컴포넌트나 HTML 태그. 예: ",l.createElement("code",null,'as="span"')," 나"," ",l.createElement("code",null,"as={<Text />}")," 등.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"에러 메세지나 일반 메세지를 랜더링하기 위한"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","입니다.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note:")," you need to set"," ","validateCriteriaMode to 'all' for using ",l.createElement("code",null,"messages"),"."))))},NativeValidation:{title:"Browser built-in validation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"다음 예제는 브라우저의 유효성 검사를 활용하는 방법입니다."," ",l.createElement("code",null,"nativeValidation")," 을 ",l.createElement("code",null,"true"),"로 설정하고, 나머지 문법은 표준과 같습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note"),": This feature has been removed in V4 due to low usage, but you can still use it in V3"))},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"비제어 필드 배열 (동적 입력값) 에 대응하기 위한 커스텀 훅입니다. 이 훅은 더 나은 사용자 경험과 폼 퍼포먼스를 제공하기 위해서 태어났습니다."," ",l.createElement("a",{href:"https://www.youtube.com/watch?v=Q7lrHuUfgIs",target:"_blank",rel:"noopener noreferrer"},"이 짧은 비디오를 보고")," ","제어 vs 비제어 필드 배열을 비교할 수 있습니다."),l.createElement("p",null,"이 훅은 아래의 객체와 함수를 제공합니다."),l.createElement(c.b,{rawData:m.a}),l.createElement("p",null,l.createElement("b",{className:s.a.note},"중요: "),l.createElement("code",null,"useFieldArray"),"는 비제어 컴포넌트 기반으로 구성됩니다. 아래의 참고 사항은 폼을 구현하면서 비제어 컴포넌트의 특성 상 유념해야 하는 점을 새겨둘 수 있도록 돕습니다."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"useForm")," hook 에 있는 ",l.createElement("code",null,"defaultValues")," 를 전달하여 ",l.createElement("code",null,"fields")," 를 생성할 수 있습니다.")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"fields")," 객체의 ",l.createElement("code",null,"id")," 값을 컴포넌트의 key 로 전달하는 것을 잊지 마세요.")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"defaultValue"),"를으로 설정하십시오. 기본값을 설정하려는 경우 ",l.createElement("code",null,"fields[index]"),"입력을 제거하거나 재설정하십시오.")),l.createElement("li",null,l.createElement("p",null,"액션을 연속하여 호출할 수 없습니다. 액션은 매 랜더링마다 수행되어야 합니다."),l.createElement(c.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,l.createElement("p",null,"만약 ",l.createElement("code",null,"useFieldArray")," 를 사용하는 경우, 배열 인풋을 등록할 때 ",l.createElement("code",null,"ref={register}")," 대신"," ",l.createElement("code",null,"ref={register()}")," 형태로 사용하는 것이 중요합니다. 그래야 ",l.createElement("code",null,"register")," 가 배열의 ",l.createElement("code",null,"map")," 함수 안에서 수행됩니다.")),l.createElement("li",null,l.createElement("code",null,"useEffect"),"의 사용자 정의 레지스터에서는 작동하지 않습니다."))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:s.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"이 객체는 input 을 생성하고 랜더링하기 위한 주요 객체(source of truth)입니다.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"중요: ")," 모든 입력 필드는 비제어 상태이기 떄문에, ",l.createElement("code",null,"map")," 으로 생성되는 컴포넌트에",l.createElement("code",null,"id")," 값을 필수로 전달해주어야 합니다. 그래야 리액트가 어떤 아이템이 추가되고, 변경되고, 제거되는지 파악할 수 있습니다."),l.createElement("p",null,"예: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"입력 필드(들)를 현재 필드들 마지막에 추가합니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"입력 필드(들)를 현재 필드들 맨 앞에 추가합니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index: number, value: object) => void")),l.createElement("td",null,"입력 필드(들)를 특정 위치에 추가합니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"입력 필드(들)의 위치를 서로 교체합니다.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"입력 필드(들)를 다른 위치로 이동합니다.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," ",l.createElement("code",null,"move")," ","와 ",l.createElement("code",null,"swap")," 의 차이점을 설명하자면, ",l.createElement("code",null,"move")," 를 계속 호출하는 것은 입력 필드(들)를 임의의 공간 안에 집어넣는 것과 비슷하고, ",l.createElement("code",null,"swap")," 은 두 입력 필드들의 위치만 바꾸는 것입니다."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index?: number | number[]) => void")),l.createElement("td",null,"특정 위치에 있는 입력 필드(들)를 제거합니다. 인덱스를 넣지 않았다면 전체를 제거합니다.")))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"이 함수는",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),","," ",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct")," ","등의 외부 유효성 검사 방법들을 실행할 수 있도록 합니다. 실제로, 이 함수의 목적은 단순히 외부 유효성 검사 라이브러리로 Yup 등을 제한된 범위로 지원하는 정도에서 끝나지 않습니다. 우리는 다양한 라이브러리가 React Hook Form 과 함께 동작할 수 있도록 지원하려 합니다. 심지어 유효성 검사를 위해 직접 커스터마이징할 수도 있습니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 반드시"," ",l.createElement("code",null,"values")," 와 ",l.createElement("code",null,"errors")," 객체를 모두 포함하여 리턴시키세요, 그리고 이 객체들의 기본값은 빈 객체 ",l.createElement("code",null,"{}")," ","가 되어야 합니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," errors 객체의 키 값은 반드시 인풋 값과 연결되어야 합니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 이 함수는",l.createElement("code",null,"validationSchema"),"와 유사한 사용자 정의 후크 내부에 캐시되며, ",l.createElement("code",null,"validationContext"),"는 다시 렌더링 할 때마다 변경할 수있는 변경 가능한 객체입니다."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"참고:")," 입력값을 다시 검사하는 것은 사용자의 행동에 따라 한 필드당 하나씩만 동작합니다. 왜냐하면 라이브러리 자체에서 에러 객체의 특정 필드를 대조해보고 그에 따라 리랜더링을 실행하기 때문입니다."))}}},UQyL:function(e,t,n){"use strict";var l=n("q1tI"),a=n("LuW/"),r=n("0W2P"),o=n("Kzm3"),c=n("mLYZ"),m=n("SGrA"),u=n("G3ap"),s=n.n(u),i=n("9Ruc"),d=n.n(i);t.a={title:"API Documentação",header:{description:"foca em prover a melhor experiência para o desenvolvedor com uma API Simplificada"},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,"Utilizando ",l.createElement("code",null,"useForm"),", você receberá os seguintes métodos"," "),description:l.createElement("p",null,l.createElement("code",null,"useForm")," também tem argumentos ",l.createElement("b",null,"opcionais"),". O exemplo a seguir demonstra todas as opções, com valor padrão."),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Essa função de callback permite que você execute sua validação através de qualquer esquema ou validação customizada. A função recebe um formulário completo com os ",l.createElement("code",null,"value")," como argumento. Você deve validar o resultado e retornar ambos ",l.createElement("code",null,"value")," e"," ",l.createElement("code",null,"errors"),". Leia mais em"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver")," ","section."))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"Esse objeto de contexto será injetado no segundo argumento de"," ",l.createElement("code",null,"validationResolver")," ou em"," ",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","validation's context object.")),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,"O comportamento padrão ",l.createElement("code",null,"firstError")," irá validar todos os campos e reunir todos os primeiros erros encontrados."),l.createElement("p",null,"Com a configuração de ",l.createElement("code",null,"all"),", todos as validações de campos irão executar e reunir todos os erros encontrados")),validateOnSubmit:l.createElement(l.Fragment,null,"A validação irá ativar o evento de ",l.createElement("code",null,"submit")," e os campos inválidos serão anexados, o evento ",l.createElement("code",null,"onChange")," ouve os eventos para valida-los novamente."),validateOnBlur:l.createElement(l.Fragment,null,l.createElement("code",null,"Validation")," irá ativar o evento de ",l.createElement("code",null,"blur"),"."),validateOnChange:l.createElement(l.Fragment,null,"A validação irá ativar o evento de ",l.createElement("code",null,"change")," com cada campo, levará a multiplas re-renderizações. Não recomendado: Considere isto como uma prática não performática."),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Você pode setar o valor padrão do campoo com"," ",l.createElement("code",null,"defaultValue/defaultChecked")," ",l.createElement("a",{className:d.a.links,href:"https://reactjs.org/docs/uncontrolled-components.html"},"(leia mais na documentação do React, para valores padrões)")," ","ou passe ",l.createElement("code",null,"defaultValues")," como argumento opcional, para popular valores padrões para todo o formulário."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Importante:")," ",l.createElement("code",null,"defaultValues")," is cached within the custom hook, if you want to reset ",l.createElement("code",null,"defaultValues")," please use"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("reset")}},"reset")," ","api."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Valores definidos em"," ",l.createElement("code",null,"defaultValues")," será injetado em"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("watch")}},"verificar")," ","como ",l.createElement("code",null,"defaultValue"),"."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," ",l.createElement("code",null,"defaultValues")," não é populado automaticamente, com o registro manual do campo (ex:"," ",l.createElement("code",null,"register({ name: 'test' })"),") porquê o campo manual"," ",l.createElement("code",null,"register")," não provê ",l.createElement("code",null,"props ref")," para o React Hook Form."))},validationSchema:function(e){return l.createElement("p",null,"Aplique regras de validação do formulário com ",l.createElement("code",null,"Yup")," a nível de esquema, por favor, verifique a seção"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema")," ",".")},reValidateMode:l.createElement("p",null,"Esta opção permite configurar quando entradas com erros são exibidas e revalidadas (por padrão, a validação é acionada durante uma entrada mudança.) ",l.createElement(r.a,null)),validationFields:l.createElement("p",null,"Fornecer uma matriz de campos (array) significa que apenas os campos incluídos serão validados. Esta opção é útil quando você deseja alternar quais campos são necessários para validar."),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"Por padrão, quando o usuário envia um formulário e contém um erro, o primeiro campo com erro será focado."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Apenas campos registrados com ",l.createElement("code",null,"ref")," irá funcionar. Manualmente registrando os inputs não funcionará. ex:"," ",l.createElement("code",null,"register({ name: 'test' }) // doesn't work")," ")),nativeValidation:function(e){return l.createElement("p",null,"Setar esta opção para ",l.createElement("code",null,"true")," irá habilitar a validação nativa do navegador. Você pode"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"veja mais sobre as validações imbutidas no navegador"),", e veja também a seção"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation")," ","para mais detalhes e exemplos.")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este método permite você ",l.createElement("code",null,"unregister")," um único campo ou matriz (array) de campos. Isto é útil quando você precisa registrar seu campo durante o ",l.createElement("code",null,"useEffect")," como registro customizado e para remover o registro após o componente ser desmontado."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Quando você remove o registro do campo, seu valor não será mais incluído no dado do formulário quando for submetido."))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este método permite você o uso do register para input/select"," ",l.createElement("code",null,"Ref")," e validar regras do React Hook Form."),l.createElement("p",null,"Regras de validação são baseadas no padrão do HTML e também permite customizações."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Importante:")," ",l.createElement("code",null,"name")," ","é ",l.createElement("b",null,"obrigatório")," e ",l.createElement("b",null,"unique"),". O name do campo também suporta pontos e chaves como sintaxe, o que possibilita você criar campos aninhados. A tabela de exemplo está abaixo:")),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+a.a.lightPink}},"Se estiver trabalhando com ",l.createElement("code",null,"arrays/array fields"),", você pode assinar um campo name com ",l.createElement("code",null,"name[index]"),"."," ",l.createElement("a",{className:d.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"example for Field Array"},"Confira o exemplo com campo Matriz(Array)"),"."),example:"Enviar",selectHelp:"Ao selecionar a opção de registro, a tabela da API abaixo será atualizada.",options:{title:"Opções do 'Register'",registerWithValidation:"'Register' com validação",registerWithValidationMessage:"'Register' com validação e mensagem de erro",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:s.a.title},"Register Customizado"),l.createElement("p",null,"Você também pode registrar entradas manualmente, o que é útil quando trabalhando com componentes personalizados e ",l.createElement("code",null,"Ref")," não é acessível. Este é realmente o caso quando você está trabalhando com React Native ou personalizado como"," ",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select"),"."),l.createElement("p",null,"Usando uma chamada de registro personalizada, você precisará atualizar a entrada valor com"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),", porque o campo não está mais registrado como o ref."),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Se você fizer um registro de campo customizado para ativar a re-renderização seu valor, então você precisa dar um tempo ao seu campo"," "),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:"),"várias raido input com o mesmo nome, você deseja registrar a validação até o último entrada para que o gancho entenda valide-os como um grupo no final."))}},validation:{required:l.createElement(l.Fragment,null,"Um booleano que, se verdadeiro, indica que a entrada deve ter um valor antes que o formulário possa ser enviado. Você pode atribuir uma string para retornar uma mensagem de erro no objeto de"," ",l.createElement("code",null,"errors"),"."),maxLength:"O tamanho máximo do valor a ser aceito para este campo.",minLength:"O tamanho mínimo do valor a ser aceito para este campo.",max:"O valor máximo a ser aceito pelo campo.",min:"O valor mínimo a ser aceito pelo campo.",pattern:"Um padrão regex para o campo.",validate:"Você pode passar uma função de callback como argumento para validar, ou você pode passar um objeto de função callback para validar todos eles. (verifique os exemplos)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Este objeto contém informação sobre o estado do formulário."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Important:")," ",l.createElement("code",null,"formState")," é encapsulado com"," ",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy")," ","para melhorar a performance do ",l.createElement("code",null,"render"),". Tenha certeza que você tem ",l.createElement("code",null,"invoke/read"),"antes do ",l.createElement("code",null,"render")," para habilitar a atualização do estado. este O recurso de funcionalidade de redução de renderização se aplica somente à plataforma da Web devido a uma falta de suporte no"," ",l.createElement("code",null,"Proxy")," no React Native.")),dirty:"Marcado como true após o usuário interagir com algum dos campos.",dirtyFields:"Um conjunto exclusivo de campos modificados pelo usuário.",isSubmitted:"Marcado como true após o usuário submeter o formulário. Após o envio de um formulário, seu estado permanecerá enviado até ser chamado com o método de redefinição.",touched:"Uma matriz (Object) com todos os campos que foram interagidos.",isSubmitting:l.createElement(l.Fragment,null,"Durante a submissão do formulário irá setar ",l.createElement("code",null,"true")," e depois submeter para ",l.createElement("code",null,"false")),submitCount:"Número de formulários submetidos.",isValid:"Marcado como verdadeiro se não tiver erro."},errors:{title:"errors",description:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Objeto contendo erros de formulário, ou mensagens de erro que pertencem a cada campo."),l.createElement("p",null,l.createElement("b",{className:s.a.note},o.a.note[e],":")," ","Diferença entre a versão 3 e 4:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Versão 4: Objetos aninhados"),l.createElement("p",null,l.createElement("strong",null,"Razão:")," com o encadeamento opcional se tornando mais popular entre a comunidade e para dar melhor suporte a tipo."),l.createElement("p",null,l.createElement("code",null,"errors?.yourDetail?.firstName;"))),l.createElement("li",null,l.createElement("p",null,"Versão 3: Objetos nivelados"),l.createElement("p",null,l.createElement("strong",null,"Razão:")," simples e fácil de acessar o erro."),l.createElement("p",null,l.createElement("code",null,"errors['yourDetail.firstName'];")))))},types:l.createElement(l.Fragment,null,"Isto é útil para validação de campos como regras de senha, com múltiplos errors que precisam ser retornados de um único campo. Para habilitar essa funcionalidade, tenha certeza de setar"," ",l.createElement("code",null,"validateCriteriaMode: 'all'"),"."),message:"'Message' é um campo string e vazio por padrão. Entretanto, se você registrar a validação com mensagem de erro, ele será retornado.",ref:"Referência para o elemento do campo."},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Isso irá assistir campo(s) específicos e retornará um valor, é útil para determinar o que será redenrizado."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Quando ",l.createElement("code",null,"defaultValue")," não está definido, o primeiro a renderizar do ",l.createElement("code",null,"watch")," retornará ",l.createElement("code",null,"undefined")," ","porque é chamado antes do ",l.createElement("code",null,"register"),", porém você pode utilizar ",l.createElement("code",null,"defaultValue")," como segundo argumento a ser retornado.")),l.createElement("li",null,l.createElement("p",null,"Entretanto, se ",l.createElement("code",null,"defaultValues")," foi inicializado em"," ",l.createElement("code",null,"useForm")," como argumento, então o primeiro render irá retornar o que é provido em ",l.createElement("code",null,"defaultValues"),".")))),tableTitle:{single:l.createElement(l.Fragment,null,"Assista o valor do campo pelo 'name' (similar ao lodash"," ",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get")," ","function)"),multiple:"Assista múltiplos campos",all:"Assista todos os campos",nest:"Assista a todas as entradas e retorne objeto aninhado"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta função irá passar os dados do formulário quando a validação do formulário for um sucesso e também pode ser chamado remotamente."),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Você pode passar uma função ",l.createElement("code",null,"async")," para validação assíncrona. ex:"," "),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Essa função irá limpar o valor dos campos, e erros dentro do formulário. Ao fornecer ",l.createElement("code",null," omitResetState "),", você tem a liberdade de redefina apenas parte específica do estado. Você pode passar ",l.createElement("code",null,"values")," como valor opcional para resetar o formulário assinado com o valor padrão."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Para componentes controlados como ",l.createElement("code",null,"React-Select")," que não expõe"," ",l.createElement("code",null,"ref"),", você irá precisar resetar o campo manualmente através"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","ou usando"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller")," ","para encapsular seu componente controlado."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Você vai precisar fornecer ",l.createElement("code",null," defaultValues ​​")," durante ",l.createElement("code",null," useForm "),"ou",l.createElement("code",null," reset ")," com valor para redefinir no",l.createElement("code",null," Controller "),"o valor dos componentes."))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"A função permite você manualmente setar um ou múltiplos erros."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," este método não persistirá o erro e bloqueará a ação de envio. É mais útil durante a função ",l.createElement("code",null,"handleSubmit")," quando você deseja fornecer feedback de erro aos usuários após a validação assíncrona."))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": limpa todos os erros")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": reseta um único erro")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": reseta múltiplos erros")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Esta função permite definir dinamicamente o campo / seleção do valor. Ao mesmo tempo, tenta evitar a nova renderização quando não é necessário e apenas as seguintes condições acionarão a nova renderização."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Quando um erro é acionado pela atualização de um valor")),l.createElement("li",null,l.createElement("p",null,"Quando um erro é corrigido por uma atualização de valor")),l.createElement("li",null,l.createElement("p",null,"quando 'setValue' é invocado pela primeira vez e formState"," ",l.createElement("code",null,"dirty")," é marcado como verdadeiro (true)")),l.createElement("li",null,l.createElement("p",null,"Quando setValue é invocado e formState ",l.createElement("code",null,"touched")," é atualizado"))),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Ao chamar este método,"," ",l.createElement("code",null,"formState")," vai adicionar aos campos o ",l.createElement("code",null,"name")," em"," ",l.createElement("code",null,"touched"),"."),l.createElement("p",null,"Você pode também setar ",l.createElement("code",null,"shouldValidate")," para"," ",l.createElement("code",null,"true")," e vai acionar a validação do campo. ex:"," ",l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Essa função vai retornar todo o dado do formulário, e é útil em uma função quando você precisa capturar os dados do formulário."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Por padrão ",l.createElement("code",null,"getValues()")," irá retornar todo o dado do formulário em uma estrutura plana. ex:"," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"Trabalhando com campos definidos do formulário,"," ",l.createElement("code",null,"getValues(","{ nest: true }",")")," irá retornar o dado em uma estrutura aninhada de acordo com o campo ",l.createElement("code",null,"name"),". ex: ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Para acionamento manual do campo / select de validação de formulário."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Quando a validação falha, o ",l.createElement("code",null,"errors")," objeto será atualizado."))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"Se você preferir, pode centralizar a validação de regras com validação externa, validação de esquema, você pode aplicar"," ",l.createElement("code",null,"validationSchema")," em ",l.createElement("code",null,"useForm")," como argumento opcional. React Hook Form atualmente suporta"," ",l.createElement("a",{className:d.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","para validação de esquema de objeto.")},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,'"Name" único do seu campo.')),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Componente controlado. ex: ",l.createElement("code",null,'as="input"')," ou"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null,"✓"),l.createElement("td",null,l.createElement("code",null,"control")," objeto é invocado do ",l.createElement("code",null,"useForm"),". é opcional, se estiver usando o FormContext.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"O mesmo que componente não controlado ",l.createElement("code",null,"defaultValue"),", quando suprido um valor ",l.createElement("code",null,"boolean"),", ele será tratado como checkbox.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," você precisa fornecer ",l.createElement("code",null,"defaultValue")," ou ",l.createElement("code",null,"defaultValues")," ","em ",l.createElement("code",null,"useForm")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note"),": se o seu formulário invocar ",l.createElement("code",null," reset ")," com valores diferentes, você precisará fornecer ",l.createElement("code",null,"defaultValues")," no nível useForm em vez de definido inline ",l.createElement("code",null,"defaultValue"),".."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,"Regras de validação de acordo com o ",l.createElement("code",null,"register"),".")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"A propriedade ",l.createElement("code",null,"onChange")," lhe permite customizar o retorno do valor, verifique se o formato do componente externo"," ",l.createElement("code",null,"value")," props.",l.createElement(c.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ event, data ]) => ({ checked: data.checked})}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Este propridade lhe permite marcar eventos específicos, ex: quando"," ",l.createElement("code",null,"onChange")," evento é chamado ",l.createElement("code",null,"onTextChange"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"Esse retorno de chamada permite que o gancho personalizado se concentre na entrada quando há um erro. Esta função é aplicável para ambos, React e Componentes do React-Native desde que possam ser focados."),l.createElement("p",null,l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"Aqui está um exemplo de trabalho."),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Esta propridade lhe permite marcar eventos específicos, ex: quando o"," ",l.createElement("code",null,"onBlur")," evento é chamado ",l.createElement("code",null,"onTextBlur"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"valueName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Esta propriedade lhe permite sobrescrever a propriedade"," ",l.createElement("code",null,"value")," e suporta outros componentes que não utilizam a propriedade ",l.createElement("code",null,"value"),". ex: ",l.createElement("code",null,"checked"),","," ",l.createElement("code",null,"selected")," e outros..."))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"O React Hook Form adota componentes não controlados e campos nativos, no entanto, é difícil evitar trabalhar com componentes externos controlados, tais como"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select"),","," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","e"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI"),". Este componente irá fazer sua vida mais simples."),l.createElement("p",null,"Cada ",l.createElement("code",null,"props")," que se passa para um componente conntrolado, será encaminhado para a instância do componente que você proveu com a propriedade ",l.createElement("code",null,"as"),". Isto significa que você possui um componente custom ",l.createElement("code",null,"Switch")," que necessita de uma propriedade"," ",l.createElement("code",null,"label"),". Você pode passar essa propriedade diretamente para o componente controlado. A propriedade ",l.createElement("code",null,"name")," será usada principalmente para acessar o valor através do formulário depois."))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"O contexto do formulário visa solucionar o problema quando houver profundos campos aninhados em sua árvore de componentes e métodos de passagem no fundo como",l.createElement("code",null,"props")," se torna trabalhoso."),description:l.createElement(l.Fragment,null,l.createElement("p",null,"Uma vez que seu formulário utiliza ",l.createElement("code",null,"FormContext"),", o"," ",l.createElement("code",null,"useFormContext"),":"," ",l.createElement("code",{className:s.a.typeText},"function")," pode ser chamado como componente filho."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," chamar"," ",l.createElement("code",null,"useFormContext")," o ",l.createElement("code",null,"useForm")," irá te dar todas as funções dos hooks."))},control:{title:"control",description:l.createElement("p",null,"Esse objeto foi criado para o componente Controlador do formulário React Hook, que contém métodos para registrar o componente controlado no React Hook Formato.")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"Um simples componente para renderizar a mensagem de erro do campo associado."),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"campo name associado.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"errors")," objeto do React Hook Form. é opcional se estiver usando FormContext.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"mensagem de erro em linha.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"Um componente ou tag HTML. ex: ",l.createElement("code",null,'as="span"')," or"," ",l.createElement("code",null,"as={<Text />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"Este é um"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","para renderizar mensagem de erro ou mensagens.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note:")," you need to set"," ","validateCriteriaMode to 'all' for using ",l.createElement("code",null,"messages"),"."))))},NativeValidation:{title:"Validações nativas do browser",description:l.createElement(l.Fragment,null,l.createElement("p",null,"O exemplo a seguir demonstra como você pode aproveitar a validação do navegador. Você apenas precisa setar ",l.createElement("code",null,"nativeValidation")," ","para ",l.createElement("code",null,"true")," e o restante da sintaxe é igual à validação padrão."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note"),": This feature has been removed in V4 due to low usage, but you can still use it in V3"))},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Um custom hook para usar com Arrays de campos não-controlados (inputs dinâmicos). A motivação por trás disso é fornecer melhor experiência ao usuário e performance ao formulário. Você pode assistir"," ",l.createElement("a",{href:"https://www.youtube.com/watch?v=Q7lrHuUfgIs",target:"_blank",rel:"noopener noreferrer"},"este video")," ","para comparar arrays controlados e não controlados."),l.createElement("p",null,"Esse hook fornece os seguintes objetos e funções:"),l.createElement(c.b,{rawData:m.a}),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Importante: ")," O",l.createElement("code",null,"useFieldArray")," é construído sobre componentes não controlados. As notas a seguir ajudarão você a estar ciente e consciente de suas comportamento durante a implementação."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Você pode popular os ",l.createElement("code",null,"fields")," fornecendo",l.createElement("code",null,"defaultValues")," no ",l.createElement("code",null,"useForm")," hook.")),l.createElement("li",null,l.createElement("p",null,"certifique-se de atribuir ",l.createElement("code",null,"id")," a partir de"," ",l.createElement("code",null,"fields"),"objeto como sua chave de componente.")),l.createElement("li",null,l.createElement("p",null,"certifique-se de definir ",l.createElement("code",null,"defaultValue")," como",l.createElement("code",null,"field[index]")," quando você deseja definir o valor padrão, remova ou redefina com entradas.")),l.createElement("li",null,l.createElement("p",null,"você não pode chamar ações uma após a outra. As ações precisam ser acionado por renderização."),l.createElement(c.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,l.createElement("p",null,"é ",l.createElement("strong",null,"importante")," aplicar"," ",l.createElement("code",null,"ref={register()}")," ao invés de"," ",l.createElement("code",null,"ref={register}")," quando estiver trabalhando com"," ",l.createElement("code",null,"useFieldArray")," para que o ",l.createElement("code",null,"register")," seja invocado durante ",l.createElement("code",null,"map"),".")),l.createElement("li",null,"Ele não funciona com o registro personalizado em"," ",l.createElement("code",null,"useEffect"),"."))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:s.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"Esse objeto é onde o ",l.createElement("code",null,"map")," confia para renderizar os campos.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"Importante: "),"Porque cada campo pode ser não-controlado, ",l.createElement("code",null,"id")," é mandatório com componentes mapeados, para ajudar o React a identificar quais itens mudaram, foram adicionados ou removidos."),l.createElement("p",null,"ex: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"Append input/inputs no final de seus campos.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"Prepend input/inputs no começo de seus campos.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index: number, value: object) => void")),l.createElement("td",null,"Insert input/inputs em uma posição particular.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"Swap input/inputs posição.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"Move input/inputs em outra posição.",l.createElement("p",null,l.createElement("b",{className:s.a.note},"Note:")," A diferença entre"," ",l.createElement("code",null,"move")," e ",l.createElement("code",null,"swap"),", é que chamando"," ",l.createElement("code",null,"move")," vai empurrar os campos em um loop , enquanto"," ",l.createElement("code",null,"swap")," somente muda a posição de dois campos."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index?: number | number[]) => void")),l.createElement("td",null,"Remove campos de uma posição particular, ou remove todos quando nenhum índice é fornecido.")))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Essa função permite executar qualquer validação ou metodo externo, como",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),","," ",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct")," ","e etc. Fato é que, o objetivo é não se limitar ao Yup como nosso schema externo. Nós gostariamos de suportar muitas outras bibliotecas de validação para funcionar com o React Hook Form. Você pode inclusive escrever sua propria logica de validação."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Tenha certeza que você retornando o objeto que contem ",l.createElement("code",null,"values")," e"," ",l.createElement("code",null,"errors"),", e seus valores padrão sejam um objeto vazio"," ",l.createElement("code",null,"{}"),"."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," retornar a chave do objeto que contenha os erros é relevante para seus inputs."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Essa função será cacheada dentro do custom hook, similar ao"," ",l.createElement("code",null,"validationSchema"),", enquanto o"," ",l.createElement("code",null,"validationContext")," é um objeto mutável que pode ser modificado a cada re-render."),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," Revalidar o input vai ocorrer somente em um campo por vez durante as interações do usuário, porque a biblioteca em si vai considerar o objeto do campo em especifico e disparará o re-render de acordo."))}}},VmmH:function(e,t,n){"use strict";n("91GP"),n("Z2Ku"),n("L9s1"),n("9VmF");var l=n("q1tI"),a=n("LuW/"),r=n("Kzm3"),o=n("7XWO"),c=n("G3ap"),m=n.n(c),u=n("k52A"),s=n.n(u),i={borderBottom:"1px solid "+a.a.lightPink};t.a=l.memo((function(e){var t,n=e.links,c=e.goToSection,u=e.enLinks,d=e.isStatic,E=e.currentLanguage,p=e.activeIndex,f=Object(o.c)().state,g=null==f||null===(t=f.setting)||void 0===t?void 0:t.lightMode;return l.createElement("aside",{className:s.a.menu+" "+(g?s.a.lightMenu:"")},l.createElement("div",null,l.createElement("div",{className:s.a.titleList},l.createElement("h2",{className:m.a.title,style:{fontSize:16,color:a.a.lightBlue}},r.a.menu[E])),l.createElement("ul",{className:"scrollArea"},n.map((function(e,t){var r="function"==typeof e?e().title:e.title,o="function"==typeof u[t]?u[t]().title:u[t].title,m=r.startsWith("use")?"♆ "+r:r;return/^[A-Z]/.test(r[0])&&!r.includes(" ")&&"TypeScript"!==r&&(m="❒ "+m),["useformcontext","controller","usefieldarray","errormessage","validationschema","validationresolver","browser built-in validation"].includes((r||"").toLowerCase())||d?l.createElement("li",{key:r},l.createElement("span",{className:s.a.code},"</>"),d?l.createElement("button",{onClick:function(){c(o,t)},style:Object.assign({top:"-3px",position:"relative"},p===t?i:{})},m):l.createElement("button",{onClick:function(){c(o,t)},style:Object.assign(Object.assign({top:"-3px",position:"relative"},"Quick Start"===r?{paddingLeft:0}:null),p===t?i:{})},m)):l.createElement("li",{key:r,onClick:function(){return c(o,t)},style:Object.assign({},t>0?Object.assign(Object.assign({marginLeft:10},t!==n.length-8?{borderLeft:"1px solid "+a.a.lightPink}:null),3===t?{paddingTop:10,marginTop:-15}:null):null)},l.createElement("span",{className:s.a.arrow+" "+(t===n.length-8?s.a.arrowLast:"")},t>0&&l.createElement("span",{style:{left:1,top:-1,position:"relative"}},"╴")),"Quick Start"!==r&&l.createElement("span",{className:s.a.code},"</>")," ",l.createElement("button",{style:Object.assign(Object.assign({top:"-3px",position:"relative"},"Quick Start"===r?{paddingLeft:0}:null),p===t?i:{})},m))})),l.createElement("li",null,l.createElement("span",{className:s.a.code},"</>"),l.createElement("a",{rel:"noopener noreferrer",href:"https://github.com/bluebill1049/react-hook-form/tree/master/examples",target:"_blank"},r.a.codeExample[E])))))}))},Vpmb:function(e,t,n){e.exports={iconStyle:"Popup-module--iconStyle--33GP0",icon:"Popup-module--icon--2-UYs",button:"Popup-module--button--1bFq9",lightIcon:"Popup-module--lightIcon--3q7sG",root:"Popup-module--root--1dsMr"}},Wi2s:function(e,t,n){"use strict";n("rE2o"),n("ioFf"),n("XfO3"),n("HEwt"),n("a1Th"),n("f3/d"),n("hhXQ"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("INYr"),n("pIFo");var l=n("q1tI"),a=n("wZee"),r=n.n(a),o=n("mLYZ"),c=n("Kzm3"),m=n("G3ap"),u=n.n(m),s=n("fHxr"),i=n.n(s),d=n("jDek"),E=n.n(d);function p(e){var t=e.goToSection,n=e.api,a=e.currentLanguage,m=l.useState(!0),s=m[0],d=m[1];return l.useEffect((function(){r.a.highlightAll()}),[s]),l.createElement(l.Fragment,null,n.register.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,"Input ",l.createElement("code",null,c.a.name[a])),l.createElement("th",null,n.register.example)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,'name="firstName"')),l.createElement("td",null,l.createElement("code",null,"{ firstName: 'value'}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,'name="firstName[0]"')),l.createElement("td",null,l.createElement("code",null,"{ firstName: [ 'value' ] }"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,'name="name.firstName"')),l.createElement("td",null,l.createElement("code",null,"{ name: { firstName: 'value' } }"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,'name="name.firstName[0]"')),l.createElement("td",null,l.createElement("code",null,"{ name: { firstName: [ 'value' ] } }")))))),n.register.fieldArray,n.register.options.note(t),l.createElement("fieldset",{className:E.a.fieldset},l.createElement("legend",null,n.register.options.title),l.createElement("p",null,n.register.selectHelp),l.createElement("label",null,l.createElement("input",{onChange:function(){return d(!0)},type:"radio",name:"errorMessage",defaultChecked:!0}),n.register.options.registerWithValidation),l.createElement("label",null,l.createElement("input",{onChange:function(){return d(!1)},type:"radio",name:"errorMessage"}),n.register.options.registerWithValidationMessage)),l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",{style:{minWidth:s?100:240}},c.a.name[a]),l.createElement("th",{style:{minWidth:300}},c.a.description[a]),l.createElement("th",{style:{minWidth:320}},c.a.codeExample[a])),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"ref"),l.createElement("br",null),l.createElement("code",{className:u.a.typeText},"React.RefObject")),l.createElement("td",null,"React element ref"),l.createElement("td",null,l.createElement(o.b,{withOutCopy:!0,style:{marginTop:-10},rawData:'<input\n  name="test"\n  ref={register}\n/>'}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"required"),l.createElement("br",null),l.createElement("code",{className:u.a.typeText},s?"boolean":"string |\n{\n  value: boolean,\n  message: string | JSX\n}")),l.createElement("td",null,n.register.validation.required),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      '+(s?"required: true":"required: 'error message' // <p>error message</p>")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"maxLength"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},s?"number":"{\n  value: number,\n  message: string | JSX\n}"))),l.createElement("td",null,n.register.validation.maxLength),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      '+(s?"maxLength: 2":"maxLength : {\n        value: 2,\n        message: 'error message' // <p>error message</p>\n      }")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"minLength"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},s?"number":"{\n  value: number,\n  message: string | JSX\n}"))),l.createElement("td",null,n.register.validation.minLength),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      minLength: '+(s?1:"{\n        value: 1,\n        message: 'error message' // <p>error message</p>\n      }")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"max"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},s?"number":"{\n  value: number,\n  message: string | JSX\n}"))),l.createElement("td",null,n.register.validation.max),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      max: '+(s?3:"{\n        value: 3,\n        message: 'error message' // <p>error message</p>\n      }")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"min"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},s?"number":"{\n  value: number,\n  message: string | JSX\n}"))),l.createElement("td",null,n.register.validation.min),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      min: '+(s?3:"{\n        value: 3,\n        message: 'error message' // <p>error message</p>\n      }")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"pattern"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},s?"RegExp":"{\n  value: RegExp,\n  message: string | JSX\n}"))),l.createElement("td",null,n.register.validation.pattern),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'<input\n  name="test"\n  ref={\n    register({\n      pattern: '+(s?"/[A-Za-z]{3}/":"{\n        value: /[A-Za-z]{3}/,\n        message: 'error message' // <p>error message</p>\n      }")+"\n    })\n  }\n/>"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"validate"),l.createElement("br",null),l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"Function | Object"))),l.createElement("td",null,n.register.validation.validate),l.createElement("td",null,l.createElement(o.b,{style:{marginTop:-10},withOutCopy:!0,rawData:'// callback function\n<input\n  name="test"\n  ref={\n    register({\n      validate: '+(s?"value => value === '1'":"value => value === '1' || 'error message';  // <p>error message</p>")+'\n    })\n  }\n/>\n// object of callback functions\n<input\n  name="test1"\n  ref={\n    register({\n      validate: '+(s?"{\n        positive: value => parseInt(value, 10) > 0,\n        lessThanTen: value => parseInt(value, 10) < 10\n      }":"{\n        positive: value => parseInt(value, 10) > 0 || 'should be greater than 0',\n        lessThanTen: value => parseInt(value, 10) < 10 || 'should be lower than 10'\n      }")+'\n    })\n  }\n/>\n// you can do asynchronous validation as well\n<input\n  name="test2"\n  ref={\n    register({\n      validate: '+(s?"async value => await fetch(url)":"async value => await fetch(url) || 'error message';  // <p>error message</p>")+"\n    })\n  }\n/>\n"})))))))}var f=n("VmmH"),g=n("9Ruc"),b=n.n(g),h=l.memo((function(e){var t=e.api,n=e.currentLanguage,a=e.sectionsRef;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"formState: ",l.createElement("span",{className:u.a.typeText},"Object"))),t.formState.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[n]),l.createElement("th",null,c.a.type[n]),l.createElement("th",null,c.a.description[n])),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"dirty")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"boolean")),l.createElement("td",null,t.formState.dirty)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"dirtyFields")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"Set")),l.createElement("td",null,t.formState.dirtyFields)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"isSubmitted")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"boolean")),l.createElement("td",null,t.formState.isSubmitted,l.createElement("div",null,l.createElement(o.a,{style:{position:"relative",left:0,float:"right",display:"flex"},url:"https://codesandbox.io/s/react-hook-form-reset-issubmitted-state-after-form-submitted-zck8b"})))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"touched")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"object")),l.createElement("td",null,t.formState.touched)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"isSubmitting")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"boolean")),l.createElement("td",null,t.formState.isSubmitting)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"submitCount")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"number")),l.createElement("td",null,t.formState.submitCount)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"isValid")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"boolean")),l.createElement("td",null,l.createElement("div",null,t.formState.isValid),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," ",l.createElement("code",null,"isValid")," is affected by"," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return function(e,t){var n=window.location.href,l=n.indexOf("#"),a=e.replace(/ |-/g,"");history.pushState({},null,l<0?n+"#"+a:n.substr(0,l)+"#"+a);var r=a+"Ref";t.current[r]&&t.current[r].scrollIntoView({behavior:"smooth"})}("useForm",a)}},"mode"),". This state is only applicable with ",l.createElement("code",null,"onChange")," ","and ",l.createElement("code",null,"onBlur")," mode."))))),l.createElement(o.b,{url:"https://codesandbox.io/s/7o2wrp86k6",rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, handleSubmit, errors, formState } = useForm();\n  const onSubmit = data => console.log(data);\n  \n  // Read the formState before render to subscribe the form state through Proxy\n  const { dirty, isSubmitting, touched, submitCount } = formState;\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="test" ref={register} />\n      <input type="submit" />\n    </form>\n  );\n}'})))}));function v(e){var t=e.currentLanguage,n=e.api;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"watch:"," ",l.createElement("span",{className:u.a.typeText},"(names?: string | string[] | { nest : boolean }) => any"))),n.watch.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",{style:{minWidth:180}},c.a.type[t]),l.createElement("th",{style:{minWidth:200}},c.a.description[t]),l.createElement("th",null,c.a.example[t]),l.createElement("th",{style:{minWidth:250}},c.a.return[t])),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null,n.watch.tableTitle.single),l.createElement("td",null,l.createElement("code",null,"watch('inputName')"),l.createElement("br",null),l.createElement("code",null,"watch('inputName', 'value')")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string | string[] | { [key:string] : any } | undefined"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string[]")),l.createElement("td",null,n.watch.tableTitle.multiple),l.createElement("td",null,l.createElement("code",null,"watch(['inputName1'])"),l.createElement("br",null),l.createElement("code",null,"watch(['field1'], { field1: '1' })")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"{ [key:string] : any }"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"undefined")),l.createElement("td",null,n.watch.tableTitle.all),l.createElement("td",null,l.createElement("code",null,"watch()"),l.createElement("br",null),l.createElement("code",null,"watch(undefined, { field: 'value1' })")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"{ [key:string] : any }"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"{ nest: boolean }")),l.createElement("td",null,n.watch.tableTitle.nest),l.createElement("td",null,l.createElement("code",null,"watch({ nest: true })")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"{ [key:string] : any }")))))),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App(props) {\n  const { register, watch } = useForm();\n  const watchYes = watch("yes", props.yes); // supply default value as second argument\n  const watchAllFields = watch(); // watching every fields in the form\n  const watchFields = watch(["yes", "number"]); // target specific fields by their names\n  // watch array fields by the key, pet[0] and pet[1] will both be watched and returns values\n  const pets = watch("pet"); \n  \n  return (\n    <form>\n      <input name="textInput" ref={register({ required: true, maxLength: 50 })} />\n      <input type="checkbox" name="yes" ref={register} />\n      <input name="pet[0]" ref={register} />\n      <input name="pet[1]" ref={register} />\n      \n      {watchYes && <input type="number" name="numberInput" ref={register({ min: 50 })} />}\n      {/* based on yes selection to display numberInput */}\n    </form>\n  );\n}',tsRawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\ntype Inputs = {\n  key1: string;\n  key2: number;\n  key3: {\n    key1: number;\n    key2: boolean;\n  };\n};\n\nexport default function App(props) {\n  const { watch } = useForm<FormValues>;\n\n  watch();\n  // function watch(): FormValues\n  watch({ nest: true });\n  // function watch(option: { nest: boolean; }): FormValues\n  watch("key1");\n  // function watch<"key1">(field: "key1", defaultValue?: string | undefined): string\n  watch("key1", "test");\n  // function watch<"key1">(field: "key1", defaultValue?: string | undefined): string\n  watch("key1", true);\n  // ❌: type error\n  watch("key3.key1");\n  // function watch<unknown>(field: string, defaultValue?: unknown): unknown\n  watch("key3.key1", 1);\n  // function watch<1>(field: string, defaultValue?: 1 | undefined): number\n  watch("key3.key1", "test");\n  // function watch<"key3.key1", "test">(field: "key3.key1", defaultValue?: string | undefined): string\n  watch("key3.key2", true);\n  // function watch<true>(field: string, defaultValue?: true | undefined): boolean\n  watch(["key1", "key2"]);\n  // function watch<"key1" | "key2">(fields: ("key1" | "key2")[], defaultValues?: DeepPartial<Pick<FormValues, "key1" | "key2">> | undefined): Pick<FormValues, "key1" | "key2">\n  watch(["key1", "key2"], { key1: "test" });\n  // function watch<"key1" | "key2">(fields: ("key1" | "key2")[], defaultValues?: DeepPartial<Pick<FormValues, "key1" | "key2">> | undefined): Pick<FormValues, "key1" | "key2">\n  watch(["key1", "key2"], { key1: "test", key2: true });\n  // ❌: type error\n  watch(["key1", "key3.key1"], { key1: "string" });\n  // function watch(fields: string[], defaultValues?: DeepPartial<FormValues> | undefined): DeepPartial<FormValues>\n  watch(["key1", "key3.key1"], { test: "string" });\n  // ❌: type error\n  watch<string, FormData["key3"]["key1"]>("key3.key1");\n  //  => string\n  watch<string, FormData["key3"]["key2"]>("key3.key2");\n  //  => string\n  \n  return <form />;\n}',url:"https://codesandbox.io/s/pp1l40q7wx"}),l.createElement("hr",null))}var y=n("Ejux"),N=l.memo((function(e){var t=e.api,n=e.currentLanguage;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"errors:"," ",l.createElement("span",{className:u.a.typeText},"Record<string, Object>"))),t.errors.description(n),l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[n]),l.createElement("th",{style:{minWidth:250}},c.a.type[n]),l.createElement("th",null,c.a.description[n])),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"type")),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"string")),l.createElement("td",null,"Error ",c.a.type[n],". eg: required, min, max, minLength")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"types")),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"Record<{ string, string | boolean }>")),l.createElement("td",null,t.errors.types)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"string")),l.createElement("td",null,t.errors.message)),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"ref")),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"React.RefObject")),l.createElement("td",null,t.errors.ref))))),l.createElement(y.a,{buttonLabels:["First error detected","Display all errors"]},l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="singleErrorInput" ref={register({ required: true })} />\n      {errors.singleErrorInput && "Your input is required"}\n\n      {/* refer to the type of error to display message accordingly */}\n      <input\n        name="multipleErrorInput"\n        ref={register({ required: true, maxLength: 50 })}\n      />\n      {errors.multipleErrorInput?.type === "required" &&\n        "Your input is required"}\n      {errors.multipleErrorInput?.type === "maxLength" &&\n        "Your input exceed maxLength"}\n\n      {/* register with validation */}\n      <input type="number" name="numberInput" ref={register({ min: 50 })} />\n      {errors.numberInput && "Your input required to be more than 50"}\n\n      {/* register with validation and error message */}\n      <input\n        name="errorMessage"\n        ref={register({ required: "This is required" })}\n      />\n      {errors.errorMessage?.message}\n      <input type="submit" />\n    </form>\n  );\n}\n',tsRawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\ntype Inputs = {\n  a: number;\n  b: string;\n  c: Date;\n  d: {\n    e: string;\n  };\n  f: {\n    g: number[];\n    h: string[];\n    i: { j: string }[];\n  };\n  k: any;\n  l: any[];\n  m: unknown;\n  n: unknown[];\n  o: object;\n  p: object[];\n  q: {\n    r: any;\n    s: {\n      t: any[];\n      u: unknown;\n      v: object;\n    }[];\n    w: Date[];\n    x: {\n      y: {\n        z: object[];\n      };\n    };\n  };\n};\n\nexport default function App() {\n  const { errors } = useForm<Inputs>();\n\n  console.log(errors?.a?.message);\n  console.log(errors?.b?.message);\n  console.log(errors?.c?.message);\n  console.log(errors?.d?.e?.message);\n  console.log(errors?.f?.g && errors.f.g[0] && errors.f.g[0].message\n  );\n  console.log(errors?.f?.h && errors.f.h[0] && errors.f.h[0].message\n  );\n  console.log(\n      errors?.f?.i &&\n      errors?.f?.i[0] &&\n      errors.f.i[0].j &&\n      errors.f.i[0].j.message\n  );\n  console.log(errors?.k?.message);\n  console.log(errors?.l?.message);\n  console.log(errors?.m?.message);\n  console.log(errors?.n && errors.n[0] && errors.n[0].message);\n  console.log(errors?.o?.message);\n  console.log(errors?.p && errors.p[0] && errors.p[0].message);\n  console.log(errors?.q?.r?.message);\n  console.log(\n    errors?.q?.s && errors.q.s[0] && errors.q.s[0].t.message\n  );\n  console.log(\n      errors?.q?.s &&\n      errors.q.s[0] &&\n      errors.q.s[0].u &&\n      errors.q.s[0].u.message\n  );\n  console.log(\n      errors?.q?.s &&\n      errors.q.s[0] &&\n      errors.q.s[0].v &&\n      errors.q.s[0].v.message\n  );\n  console.log(errors?.q?.w && errors.q.w[0] && errors.q.w[0].message\n  );\n  console.log(\n      errors?.q?.x?.y?.z &&\n      errors.q.x.y.z[0] &&\n      errors.q.x.y.z[0].message\n  );\n\n  return <form />;\n}\n',url:"https://codesandbox.io/s/nrr4n9p8n4",tsUrl:"https://codesandbox.io/s/xenodochial-albattani-tcx0n?file=/src/App.tsx"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm({\n    // by setting validateCriteriaMode to \'all\', \n    // all validation errors for single field will display at once\n    validateCriteriaMode: "all"\n  });\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        type="password"\n        name="password"\n        ref={register({ required: true, minLength: 10, pattern: /\\d+/ })}\n      />\n      {/* without enter data for the password input will result both messages to appear */}\n      {errors?.password?.types?.required && <p>password required</p>}\n      {errors?.password?.types?.minLength && <p>password minLength 10</p>}\n      {errors?.password?.types?.pattern && <p>password number only</p>}\n\n      <input type="submit" />\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/react-hook-form-errors-validatecriteriamode-all-qbskc"})),l.createElement("hr",null))})),k=n("b2pr");function x(e){var t=e.currentLanguage,n=e.api;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"useFormContext:"," ",l.createElement("span",{className:u.a.typeText},"Component"))),n.useFormContext.introduction,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[t]),l.createElement("th",null,c.a.type[t]),l.createElement("th",null,c.a.description[t])),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"...props")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"Object")),l.createElement("td",null,"Accept all ",l.createElement("code",null,"useForm")," methods."))))),n.useFormContext.description,l.createElement(o.b,{rawData:"const methods = useFormContext() // methods contain all useForm functions"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm, FormContext, useFormContext } from "react-hook-form";\n\nexport default function App() {\n  const methods = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <FormContext {...methods} > // pass all methods into the context\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <NestedInput />\n        <input type="submit" />\n      </form>\n    </FormContext>\n  );\n}\n\nfunction NestedInput() {\n  const { register } = useFormContext(); // retrieve all hook methods\n  return <input name="test" ref={register} />;\n}\n',url:"https://codesandbox.io/s/sad-sutherland-zvfok"}))}var F=n("0W2P"),V=n("YwZP"),w=n("7XWO"),T=n("umZf"),C=n("IQ1/"),S=n("UQyL"),R=n("i0/G"),j=n("kA1s"),A=n("TSGL"),q=n("LuW/"),L=n("SGrA"),M={title:"Документация по API",header:{description:"сфокусирован на предоставлении лучшего опыта разработки за счет упрощения API."},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,"Вызывая ",l.createElement("code",null,"useForm"),", вы получите следующие методы"," "),description:l.createElement("p",null,l.createElement("code",null,"useForm")," также имеет ",l.createElement("b",null,"необязательные")," аргументы. В следующем примере приведены значения по умолчанию для всех параметров."),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"This callback function allow you to run through any schema or custom validation. The function has the entire form ",l.createElement("code",null,"values")," as argument, and you will need to validate the result and return both"," ",l.createElement("code",null,"values")," and ",l.createElement("code",null,"errors"),". Read more at"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver")," ","section."))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"This context object will be injected into"," ",l.createElement("code",null,"validationResolver"),"'s second argument or"," ",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","validation's context object.")),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,l.createElement("code",null,"firstError")," - значение по умолчанию, будут проверены все валидируемые поля и собраны все первоначальные ошибки."),l.createElement("p",null,"Если для данного параметра установлено значение ",l.createElement("code",null,"all"),", то будет выполнена проверка всех полей и собраны все обнаруженные ошибки.")),validateOnSubmit:l.createElement(l.Fragment,null,"Валидация будет выполнена по событию ",l.createElement("code",null,"submit")," и всем невалидным полям будет добавлен обработчик на событие"," ",l.createElement("code",null,"onChange")," для повторной валидации."),validateOnBlur:l.createElement(l.Fragment,null,"Валидация будет выполнена по событию ",l.createElement("code",null,"blur"),"."),validateOnChange:l.createElement(l.Fragment,null,"Валидация будет выполнена по событию ",l.createElement("code",null,"change")," для каждого поля, и это приведёт к массовым перерисовкам. Не рекомендуется: считается, что это ухудшает производительность."),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"Вы можете установить зачение по умолчанию для поля с помощью"," ",l.createElement("code",null,"defaultValue/defaultChecked")," ",l.createElement("a",{className:b.a.links,href:"https://reactjs.org/docs/uncontrolled-components.html"},"(узнать больше из доки по React о Default Values)")," ","или передать ",l.createElement("code",null,"defaultValues")," в качестве необязального параметра для заполнения значений по умолчанию для всей формы."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Important:")," ",l.createElement("code",null,"defaultValues")," is cached within the custom hook, if you want to reset ",l.createElement("code",null,"defaultValues")," please use"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("reset")}},"reset")," ","api."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Значение, определённое в ",l.createElement("code",null,"defaultValues")," будет добавлено в"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("watch")}},"watch")," ","в качестве ",l.createElement("code",null,"defaultValue"),"."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," ",l.createElement("code",null,"defaultValues")," не заполняется автоматически при регистрации вручную (например:"," ",l.createElement("code",null,"register({ name: 'test' })"),") потому что поле,",l.createElement("code",null,"зарегистрированное")," вручную, не передаёт ",l.createElement("code",null,"ref")," ","в React Hook Form."))},validationSchema:function(e){return l.createElement("p",null,"Применение правил валидации с ",l.createElement("code",null,"Yup")," на уровне схемы, перейдите в раздел"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema")," ",".")},reValidateMode:l.createElement("p",null,"Этот параметр позволяет установить, когда поля с ошибками будут повторно валидироваться (по умолчанию проверка запускается при любом изменении в поле). ",l.createElement(F.a,null)),validationFields:l.createElement("p",null,"Предоставление массива полей означает, что будут проверены только добавленные в массив поля. Эта опция полезна, когда вы хотите переключать, какие поля требуются для проверки."),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"По умолчанию, когда пользователь отправляет форму и она содержит ошибку, первое поле с ошибкой будет в фокусе."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Только зарегистрированные поля с ",l.createElement("code",null,"ref")," будут работать. Поля, зарегистрированные вручную, работать не будут. например:"," ",l.createElement("code",null,"register({ name: 'test' }) // не работает")," ")),nativeValidation:function(e){return l.createElement("p",null,"Устанавливая эту опцию в ",l.createElement("code",null,"true")," включит нативную браузерную валидацию. Вы можете"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"узнать больше о браузерной валидации"),", и перейти в раздел"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation")," ",", где приведено больше деталей и примеров.")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Этот метод позволяет вам отменить регистрацию -"," ",l.createElement("code",null,"unregister"),"единичных полей или массива полей. Это удобно, если вы зарегистрировали поле внутри ",l.createElement("code",null,"useEffect")," в качестве кастомной регистрации и вам нужно отменить регистрацию после отключения (unmount) компонента."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Когда вы регистрируете поле, его значение больше не будет включено в данные формы, которые будут отправляться."))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Этот метод позволяет регистрировать input/select ",l.createElement("code",null,"Ref")," и правила их валидации в React Hook Form."),l.createElement("p",null,"Правила валидации основаны на HTML стандарте и также позволяют добавлять кастомную валидацию."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Важно:")," параметр"," ",l.createElement("code",null,"name")," - ",l.createElement("b",null,"обязательный")," и ",l.createElement("b",null,"уникальный"),'. Имя поля также поддерживает "dot and bracket syntax", который даёт вам возможность создавать вложенные поля формы. Форма с примером приведена ниже:')),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+q.a.lightPink}},"Если вы работаете с ",l.createElement("code",null,"массивом/массивами полей"),", вы можете задать имя поля как ",l.createElement("code",null,"name[index]"),"."," ",l.createElement("a",{className:b.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"пример массива полей"},"Посмотреть пример с массивом полей"),"."),example:"Результат отправки формы",selectHelp:"При выборе способа регистрации, таблица API, приведенная ниже, будет обновлена.",options:{title:"Register Options",registerWithValidation:"Регистрация с валидацией",registerWithValidationMessage:"Регистрация с валидацией и сообщением об ошибке",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:u.a.title},"Кастомная регистрация"),l.createElement("p",null,"Вы также можете зарегистрировать поля вручную, что может быть удобно при работе с кастомными компонентами, когда ",l.createElement("code",null,"Ref")," ","неприменим. Это также актуально, когда вы работаете с React Native с такими кастомными компонентами как"," ",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select"),"."),l.createElement("p",null,"При использовании вызова кастомной регистрации, вам нужно обновить значение поля с помощью"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),", потому что поле больше не является зарегистрированным с помощью его ref."),l.createElement("p",null,l.createElement("code",{className:u.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Если вы хотите, чтобы регистрация кастомного поля вызывала повторный рендеринг после обновления его значения, то вам нужно указать тип зарегистрированного поля."),l.createElement("p",null,l.createElement("code",{className:u.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Nota:"),"несколько radio input с тем же именем, вы хотите зарегистрировать валидацию до последнего ввод, чтобы ловушка понимала, валидируйте их как группу в конце."))}},validation:{required:l.createElement(l.Fragment,null,'Булевые "правдивые" значения указывают на то, что поле должно иметь значение перед отправкой формы. Вы также можете указать строку с текстом ошибки для объекта ошибки (',l.createElement("code",null,"errors")," object)."),maxLength:"Максимальная разрешённая длинна поля.",minLength:"Минимальная разрешённая длинна поля.",max:"Максимальное разрешённое значение для данного поля.",min:"Минимальное разрешённое значение для данного поля.",pattern:"Шаблон regex для данного поля",validate:"Вы можете передать функцию обратного вызова в качестве аргумента для валидации или передать объект функций обратного вызова для проверки всех из них (см. примеры)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Этот объект содержит информацию о состоянии формы."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Important:")," ",l.createElement("code",null,"formState")," is wrapped with"," ",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy")," ","to improve render performance, so make you have invoke/read it before",l.createElement("code",null,"render")," in order to enable the state update. Этот Функция уменьшения количества повторного рендеринга применима только к веб-платформе из-за отсутствия поддержки ",l.createElement("code",null,"Proxy")," в React Native.")),dirty:"Устанавливается в true после изменения любого поля.",dirtyFields:"Уникальный набор пользовательских полей.",isSubmitted:"Устанавливается в true после отправки формы. После отправки формы ее состояние будет оставаться до тех пор, пока не будет вызван метод сброса.",touched:"Объект, содержаций все поля, с которыми взаимодействовал пользователь.",isSubmitting:l.createElement(l.Fragment,null,"Во время отправки формы будет выставлено в ",l.createElement("code",null,"true")," и после отправки будет выставлено в ",l.createElement("code",null,"false")),submitCount:"Количество отправлений формы.",isValid:"Устанавливается в true, если нет ошибок."},errors:{title:"errors",description:function(){return l.createElement(l.Fragment,null,l.createElement("p",null,"Объект, содержащий ошибки формы или сообщения об ошибках для каждого поля."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Есть развница в V3 и V4:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"V4: Вложеный объект"),l.createElement("p",null,l.createElement("strong",null,"Причина:")," так как опциональный чейнинг становится всё более популярным в сообществе и для поддержки лучшего типа."),l.createElement("p",null,l.createElement("code",null,"errors?.yourDetail?.firstName;"))),l.createElement("li",null,l.createElement("p",null,"V3: Плоский объект"),l.createElement("p",null,l.createElement("strong",null,"Причина:")," простой доступ к ошибке."),l.createElement("p",null,l.createElement("code",null,"errors['yourDetail.firstName'];")))))},types:l.createElement(l.Fragment,null,"Это полезно для проверки входных данных, таких как правила пароля, которые должны возвращать несколько ошибок для одного поля. Чтобы включить эту функцию, убедитесь, что вы установили"," ",l.createElement("code",null,"validateCriteriaMode: 'all'"),"."),message:"Сообщение является пустой строкой по умолчанию. Однако, если вы зарегистрируете валидацию с сообщением об ошибке, то затем она будет возвращена.",ref:"Ссылка на ваш элемент поля."},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Будет следить за выбранным полем/полями и вернёт его/их значение(я). Это может быть удобно для определениятого того, что нужно рендерить."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Когда ",l.createElement("code",null,"defaultValue")," не определено, первый рендер вернёт ",l.createElement("code",null,"undefined")," из ",l.createElement("code",null,"watch")," потому, что он вызывается раньше ",l.createElement("code",null,"регистрации"),", но вы можете задать"," ",l.createElement("code",null,"defaultValue")," вторым аргументом.")),l.createElement("li",null,l.createElement("p",null,"Однако, если ",l.createElement("code",null,"defaultValues")," было инициализировано в"," ",l.createElement("code",null,"useForm")," в качестве аргумента, то 1-й рендер вернёт значение, указанное в качесте ",l.createElement("code",null,"defaultValues"),".")))),tableTitle:{single:l.createElement(l.Fragment,null,"Наблюдение за полем по имени (как и функция"," ",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get")," ","в lodash)"),multiple:"Наблюдение за несколькими полями",all:"Наблюдение за всеми полями",nest:"Наблюдение за всеми полями и возврат вложенного объекта"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Эта функция будет передавать данные формы, когда валидация формы прошла успешно и может быть вызван удаленно."),l.createElement("p",null,l.createElement("code",{className:u.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Вы можете использовать ",l.createElement("code",null,"async")," функцию для асинхронной валидации, например:"," "),l.createElement("p",null,l.createElement("code",{className:u.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Эта функция сбрасывает значения полей и ошибки формы. Поставив"," ",l.createElement("code",null," omitResetState "),", вы можете свободно только сбросить конкретный кусок состояния. Вы можете передать ",l.createElement("code",null,"values")," в качестве необязательного аргумента для сброса формы в присвоенные значения по умолчанию."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Для контролируемых компонентов, например ",l.createElement("code",null,"React-Select"),", у которых нет значения ",l.createElement("code",null,"ref"),", вы должны сбрасывать значение вручную с помощью"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","или использовать"," ",l.createElement("button",{className:b.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller")," ","в качестве обёртки для вашего контролируемого компонента."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," Вам нужно будет укажите ",l.createElement("code",null," defaultValues ​​")," во время ",l.createElement("code",null," useForm "),"или",l.createElement("code",null," reset ")," со значением для сброса",l.createElement("code",null," Controller "),"стоимость компонентов."))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Эта функция даёт возможность вручную установать одну или несколько ошибок."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," этот метод не сохранит ошибку и заблокирует отправить действие. Это более полезно во время функции ",l.createElement("code",null,"handleSubmit"),", когда Вы хотите отправить сообщение об ошибке пользователям после асинхронной проверки."))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": сбрасывает все ошибки")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": сбрасывает одну ошибку")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": сбрасывает массив ошибок")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Эта функция позволяет динамически устанавливать значение для input/select. В то же время она пытается избежать повторного рендеринга, когда в этом нет необходимости, и только следующие условия вызовут повторный рендеринг."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Когда ошибка вызывается при обновлении значения поля")),l.createElement("li",null,l.createElement("p",null,"Когда ошибка исправляется при обновлении значения поля")),l.createElement("li",null,l.createElement("p",null,"Когда setValue вызван впервые и formState параметр"," ",l.createElement("code",null,"dirty")," установлен в true")),l.createElement("li",null,l.createElement("p",null,"Когда вызван setValue и обновлено значение свойства"," ",l.createElement("code",null,"touched")," из formState"))),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," При вызове этого метода, ",l.createElement("code",null,"formState")," добавит ",l.createElement("code",null,"имя")," поля в массив"," ",l.createElement("code",null,"touched"),"."),l.createElement("p",null,"Также вы можете установать ",l.createElement("code",null,"shouldValidate")," в"," ",l.createElement("code",null,"true"),"и это вызовет валидацию поля, например:"," ",l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Эта функция возвращает все данные формы, и это полезно, когда вы хотите получить значения полей формы."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"По умолчанию ",l.createElement("code",null,"getValues()")," вернёт значения полей формы в виде плоской структуры, например:"," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"При работе с определёнными полями формы,"," ",l.createElement("code",null,"getValues(","{ nest: true }",")")," вернёт данные во вложенной структуре согласно ",l.createElement("code",null,"имени")," поля, например:"," ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"Для принудительного вызова валидации input/select полей формы."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," При неудачной валидации, объект ",l.createElement("code",null,"errors")," будет обновлён."))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"Если вы хотите централизовать свои правила валидации с помощью внешней схемы валидации, то вы можете использовать ",l.createElement("code",null,"validationSchema")," ","в ",l.createElement("code",null,"useForm")," в качестве необязательного параметра. React Hook Form в настоящий момент поддерживает"," ",l.createElement("a",{className:b.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","в качестве внешнего объекта схемы валидации.")},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"A custom hook for working with uncontrolled Field Arrays (dynamic inputs). The motivation behind this hook is to provide better user experience and form performance. You can watch"," ",l.createElement("a",{href:"https://www.youtube.com/watch?v=Q7lrHuUfgIs",target:"_blank",rel:"noopener noreferrer"},"this short video")," ","to compare controlled vs uncontrolled Field Array."),l.createElement("p",null,"This hook provides the following object and functions."),l.createElement(o.b,{rawData:L.a}),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Important: ")," ",l.createElement("code",null,"useFieldArray")," is built on top of uncontrolled components. The following notes will help you aware and be mindful of its behaviour during implementation."),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"you can populate the ",l.createElement("code",null,"fields")," by supply"," ",l.createElement("code",null,"defaultValues")," at ",l.createElement("code",null,"useForm")," hook.")),l.createElement("li",null,l.createElement("p",null,"make sure you assign ",l.createElement("code",null,"id")," from ",l.createElement("code",null,"fields")," ","object as your component key.")),l.createElement("li",null,l.createElement("p",null,"set ",l.createElement("code",null,"defaultValue")," when you want to set default value or reset with inputs.")),l.createElement("li",null,l.createElement("p",null,"you can not call actions one after another. Actions need to be triggered per render."),l.createElement(o.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,"It's ",l.createElement("strong",null,"important")," to apply"," ",l.createElement("code",null,"ref={register()}")," instead of"," ",l.createElement("code",null,"ref={register}")," when working with"," ",l.createElement("code",null,"useFieldArray")," so ",l.createElement("code",null,"register")," will get invoked during ",l.createElement("code",null,"map"),"."),l.createElement("li",null,l.createElement("p",null,"Он не работает с пользовательским регистром в"," ",l.createElement("code",null,"useEffect"),".")))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:u.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"This object is the source of truth to map and render inputs.",l.createElement("p",null,l.createElement("b",{className:u.a.note},"Important: ")," because each inputs can be uncontrolled, ",l.createElement("code",null,"id")," is required with mapped components to help React identify which items have changed, are added, or are removed."),l.createElement("p",null,"eg: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(obj: object | object[]) => void"))),l.createElement("td",null,"Append input/inputs to the end of your fields")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(obj: object | object[]) => void"))),l.createElement("td",null,"Prepend input/inputs to the start of your fields")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(index: number, value: object) => void"))),l.createElement("td",null,"Insert input/inputs at particular position.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(from: number, to: number) => void"))),l.createElement("td",null,"Swap input/inputs position.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(from: number, to: number) => void"))),l.createElement("td",null,"Move input/inputs to another position.",l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," difference between"," ",l.createElement("code",null,"move")," and ",l.createElement("code",null,"swap"),", keep calling"," ",l.createElement("code",null,"move")," will push input/inputs in a loop, while"," ",l.createElement("code",null,"swap")," only change two input/inputs' position."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:u.a.typeText},"(index?: number | number[]) => void"))),l.createElement("td",null,"Remove input/inputs at particular position, or remove all when no index is provided.")))},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Уникальное имя вашего поля.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"Контролируемый компонент, например: ",l.createElement("code",null,'as="input"')," или"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"control")," объект - это вызов формой ",l.createElement("code",null,"useForm"),". Это необязательно, если вы используете FormContext.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"То же, что и ",l.createElement("code",null,"defaultValue")," неконтролируемого компонента, когда указывается ",l.createElement("code",null,"логическое")," значение. Будет обрабатываться как чекбокс.",l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," вам нужно задать или атрибут поля ",l.createElement("code",null,"defaultValue")," или"," ",l.createElement("code",null,"defaultValues")," для ",l.createElement("code",null,"useForm")),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note"),": if your form will invoke ",l.createElement("code",null,"reset")," with different values, you will need to provide ",l.createElement("code",null,"defaultValues")," at useForm level instead of set inline ",l.createElement("code",null,"defaultValue"),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,"Валидационные правила в соответствии с ",l.createElement("code",null,"register"),".")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"Параметр ",l.createElement("code",null,"onChange")," позволяет вам изменять возвращаемое значение, убедитесь, что вы знаете форму реквизита"," ",l.createElement("code",null,"value")," внешнего компонента. Атрибут ",l.createElement("code",null,"value")," ","или ",l.createElement("code",null,"checked")," будет считываться, когда форма полезных данных представляет собой ",l.createElement("code",null,"object"),", который содержит атрибут type.",l.createElement(o.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ event, data ]) => ({ checked: data.checked})}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Этот параметр позволяет вам настроить таргетинг на конкретное имя события, например: когда событие ",l.createElement("code",null,"onChange")," называется"," ",l.createElement("code",null,"onTextChange"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"Этот обратный вызов позволяет пользовательскому хуку сосредоточиться на вводе, когда есть ошибка. Эта функция применима как для React, так и для Реагируйте-нативные компоненты, пока они могут быть сфокусированы."),l.createElement("p",null,l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"Вот рабочий пример."),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Этот параметр позволяет вам настроить таргетинг на конкретное имя события, например: когда событие ",l.createElement("code",null,"onBlur")," называется"," ",l.createElement("code",null,"onTextBlur"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"valueName")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"Этот параметр позволяет переопределять свойство ",l.createElement("code",null,"value")," и поддерживает другие компоненты, которые не используют свойство"," ",l.createElement("code",null,"value"),", например: ",l.createElement("code",null,"checked"),","," ",l.createElement("code",null,"selected")," и т.д."))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"React Hook Form принимает неконтролируемые компоненты и нативные поля, однако трудно избежать работы с внешним контролируемым компонентом, таким как"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select"),","," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","и"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI"),". Этот компонент-обёртка сделает вашу жизнь проще при работе с ними."),l.createElement("p",null,"Каждый параметр, который вы передаёте в компонет Controller, будет передан в экземпляр компонента, который вы указали в параметре"," ",l.createElement("code",null,"as"),". Например, представьте что у вас есть кастомный"," ",l.createElement("code",null,"Switch"),", с обязательным свойством - ",l.createElement("code",null,"label"),". Вы можете передать это свойство в Controller напрямую. Свойство"," ",l.createElement("code",null,"name")," будет использовано позже для доступа к значению этого свойства внутри формы."))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"Контекст формы предназначен для решения проблемы, когда в дереве компонентов есть глубоко вложенные поля, а методы передаются вглубь как"," ",l.createElement("code",null,"props"),"."),description:l.createElement(l.Fragment,null,l.createElement("p",null,"Как только ваша форма обёрнута в ",l.createElement("code",null,"FormContext"),", то"," ",l.createElement("code",null,"useFormContext"),":"," ",l.createElement("code",{className:u.a.typeText},"function")," может быть вызвана внутри вложенного компонента."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Примечание:")," вызов"," ",l.createElement("code",null,"useFormContext")," вернёт все функции из ",l.createElement("code",null,"useForm"),"."))},control:{title:"control",description:l.createElement("p",null,"Этот объект создан для компонента Controller из React Hook Form, который содержит методы для регистрации управляемого компонента в React Hook Form.")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"Простой компонент для отображения связанного сообщения об ошибке поля."),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"имя связанного поля.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"errors")," объект из React Hook Form. Необязательно, если вы используете FormContext.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"встроенное сообщение об ошибке.")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"Компонент-обёртка или HTML тэг. Например: ",l.createElement("code",null,'as="span"')," или"," ",l.createElement("code",null,"as={<Text />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:u.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"Это"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","сообщения об ошибке/ошибках.",l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," you need to set"," ","validateCriteriaMode to 'all' for using ",l.createElement("code",null,"messages"),"."))))},NativeValidation:{title:"Browser built-in validation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"В следующем примере показано, как вы можете использовать браузерную валидацию. Вам нужно установить свойство ",l.createElement("code",null,"nativeValidation")," ","в ",l.createElement("code",null,"true"),", а остальная часть синтаксиса такая же, как для стандартной валидации."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note"),": This feature has been removed in V4 due to low usage, but you can still use it in V3"))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"This function allow you to run any external validation methods, such as"," ",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),","," ",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct")," ","and etc. In fact, the goal is not only limited Yup as our external (schema) validation library. We would like to support many other validation libraries to work with React Hook Form. You can even write your custom validation logic to validate."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," make sure you are returning object which contains ",l.createElement("code",null,"values")," and"," ",l.createElement("code",null,"errors"),", and their default value should be empty object"," ",l.createElement("code",null,"{}"),"."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," returning errors object's key should be relevant to your inputs."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," this function will be cached inside the custom hook similar as ",l.createElement("code",null,"validationSchema"),", while ",l.createElement("code",null,"validationContext")," is a mutable object which can be changed on each re-render."),l.createElement("p",null,l.createElement("b",{className:u.a.note},"Note:")," re-validate input will only occur one field at time during user’s interaction, because the lib itself will evaluate the error object to the specific field and trigger re-render accordingly."))}},I={en:T.a,es:C.a,pt:S.a,kr:A.a,jp:j.a,zh:R.a,ru:M},O=n("cA0C");function z(e){var t=e.currentLanguage,n=e.api;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"Controller:"," ",l.createElement("span",{className:u.a.typeText},"Component"))),n.Controller.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[t]),l.createElement("th",{width:"150px"},c.a.type[t]),l.createElement("th",{width:"90px"},c.a.required[t]),l.createElement("th",null,c.a.description[t]))),n.Controller.table)),l.createElement(y.a,{buttonLabels:["Web","React Native"]},l.createElement(o.b,{rawData:'import React from "react";\nimport Select from "react-select";\nimport { TextField } from "@material-ui/core";\nimport { useForm, Controller } from "react-hook-form";\n\nconst options = [\n  { value: "chocolate", label: "Chocolate" },\n  { value: "strawberry", label: "Strawberry" },\n  { value: "vanilla", label: "Vanilla" },\n];\n\nfunction App() {\n  const { handleSubmit, control } = useForm();\n\n  return (\n    <form onSubmit={handleSubmit(data => console.log(data))}>\n      {* // Preferred syntax on most cases. If you need props, pass TextField props to Controller props (forwarded) *}\n      <Controller as={TextField} name="TextField" control={control} defaultValue="" />\n      \n      {* // Another possibility, any potential props passed to <Checkbox/> will be overrided. SomeName => Checkbox *}\n      <Controller\n        as={<Select options={options} />}\n        control={control}\n        rules={{ required: true }}\n        onChange={([selected]) => {\n          // Place your logic here\n          return selected;\n        }}\n        name="reactSelect"\n        defaultValue={{ value: "chocolate" }}\n      />\n      \n      <button>submit</button>\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/react-hook-form-controller-079xx"}),l.createElement(o.b,{rawData:O.a,isExpo:!0,url:"https://snack.expo.io/@bluebill1049/react-hook-form---controller"})))}var P=function(e){var t=e.api,n=e.currentLanguage;return l.createElement("div",null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"ErrorMessage:"," ",l.createElement("span",{className:u.a.typeText},"Component"))),t.ErrorMessage.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[n]),l.createElement("th",null,c.a.type[n]),l.createElement("th",{width:"90px"},c.a.required[n]),l.createElement("th",null,c.a.description[n]))),t.ErrorMessage.table)),l.createElement(y.a,{buttonLabels:["Single Error Message","Multiple Error Messages"]},l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm, ErrorMessage } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="singleErrorInput" ref={register({ required: "This is required." })} />\n      <ErrorMessage errors={errors} name="singleErrorInput" />\n      \n      <ErrorMessage errors={errors} name="singleErrorInput">\n        {({ message }) => <p>{message}</p>}\n      </ErrorMessage>\n      \n      <input name="name" ref={register({ required: true })} />\n      <ErrorMessage errors={errors} name="name" message="This is required" />\n      \n      <input type="submit" />\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/react-hook-form-errormessage-pc2b6"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm, ErrorMessage } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm({\n    validateCriteriaMode: "all"\n  });\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        name="multipleErrorInput"\n        ref={register({\n          required: "This is required.",\n          pattern: {\n            value: /d+/,\n            message: "This input is number only."\n          },\n          maxLength: {\n            value: 10,\n            message: "This input exceed maxLength."\n          }\n        })}\n      />\n      <ErrorMessage errors={errors} name="multipleErrorInput">\n        {({ messages }) =>\n          messages &&\n          Object.entries(messages).map(([type, message]) => (\n            <p key={type}>{message}</p>\n          ))\n        }\n      </ErrorMessage>\n\n      <input type="submit" />\n    </form>\n  );\n}',url:"https://codesandbox.io/s/react-hook-form-errormessage-multiple-error-messages-cis2m"})))},D=n("HBbU"),H=n("QkAT"),_=n("f8+S");function W(e){var t=e.currentLanguage,n=e.api;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"useFieldArray:"," ",l.createElement("span",{className:u.a.typeText},"({ control?: any, name: string, keyName?: string = 'id' }) => object"))),n.useFieldArray.description,l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[t]),l.createElement("th",null,c.a.type[t]),l.createElement("th",null,c.a.description[t])),n.useFieldArray.table))),l.createElement(o.b,{rawData:_.a,url:"https://codesandbox.io/s/react-hook-form-usefieldarray-vy8fv"}))}var B=function(e){var t=e.api;return l.createElement(l.Fragment,null,l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"validationResolver:"," ",l.createElement("span",{className:u.a.typeText},"(values: any, validationContext?: object) => object"))),t.validationResolver.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\nimport Joi from "@hapi/joi";\n\nconst validationSchema = Joi.object({\n  username: Joi.string().required()\n});\n\nconst resolver = (data: any, validationContext) => {\n  const { error, value: values } = validationSchema.validate(data, {\n    abortEarly: false\n  });\n\n  return {\n    values: error ? {} : values,\n    errors: error\n      ? error.details.reduce((previous, currentError) => {\n          return {\n            ...previous,\n            [currentError.path[0]]: currentError\n          };\n        }, {})\n      : {}\n  };\n};\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm({\n    validationResolver: resolver, // make sure to memorise callback or place it outside the component\n    validationContext: { test: "test" }\n  });\n\n  return (\n    <form onSubmit={handleSubmit(d => console.log(d))}>\n      <input type="text" name="username" ref={register} />\n      <input type="submit" />\n    </form>\n  );\n}\n',tsRawData:'import * as React from "react";\nimport { useForm } from "react-hook-form";\nimport * as Joi from "@hapi/joi";\n\ntype Inputs = {\n  username: string;\n};\n\ntype Context = {\n  test: string;\n};\n\n\nconst validationSchema = Joi.object({\n  username: Joi.string()\n    .alphanum()\n    .min(3)\n    .max(30)\n    .required()\n});\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm<Inputs, Context>({\n    validationResolver: (data, validationContext) => {\n      const { error, value: values } = validationSchema.validate(data, { abortEarly: false });\n\n      return {\n        values: error ? {} : values,\n        errors: error\n          ? error.details.reduce((previous, currentError) => {\n              return {\n                ...previous,\n                [currentError.path[0]]: currentError\n              };\n            }, {})\n          : {}\n      };\n    },\n    validationContext: { test: "test" }\n  });\n\n  return (\n    <div className="App">\n      <h1>validationResolver</h1>\n\n      <form onSubmit={handleSubmit(d => console.log(d))}>\n        <input type="text" name="username" ref={register} />\n        <input type="submit" />\n      </form>\n    </div>\n  );\n}\n\n',url:"https://codesandbox.io/s/react-hook-form-validationresolver-b3phr",tsUrl:"https://codesandbox.io/s/react-hook-form-validationresolver-with-validationcontext-28pde?file=/src/App.tsx"}))},U=n("9QH1"),J=n.n(U),Y=n("HT1D"),G=n.n(Y);function Q(e){var t=0;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return X(e,t)}(e)))return function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=e[Symbol.iterator]()).next.bind(t)}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,l=new Array(t);n<t;n++)l[n]=e[n];return l}var Z=l.useRef,K=l.useEffect,$=I.en,ee=[$.useForm,$.register,$.unregister,$.errors,$.watch,$.handleSubmit,$.reset,$.setError,$.clearError,$.setValue,$.getValues,$.triggerValidation,$.control,$.formState,$.Controller,$.ErrorMessage,$.useFormContext,$.useFieldArray,$.validationResolver,$.validationSchema,$.NativeValidation],te={position:"relative",left:0,float:"right"};t.a=l.memo((function(e){var t,n=e.formData,a=e.defaultLang,r=Object(w.c)(),m=r.state,s=r.state.language,d=null==m||null===(t=m.setting)||void 0===t?void 0:t.lightMode,E=Z(!1),g=(s&&s.currentLanguage?s:{currentLanguage:a}).currentLanguage,T=I[g],C=l.useState(0),S=C[0],R=C[1],j=[T.useForm,T.register,T.unregister,T.errors,T.watch,T.handleSubmit,T.reset,T.setError,T.clearError,T.setValue,T.getValues,T.triggerValidation,T.control,T.formState,T.Controller,T.ErrorMessage,T.useFormContext,T.useFieldArray,T.validationResolver,T.validationSchema,T.NativeValidation],A=Z([]),q=Z({useFormRef:null,registerRef:null,unregisterRef:null,errorsRef:null,watchRef:null,handleSubmitRef:null,resetRef:null,setErrorRef:null,clearErrorRef:null,setValueRef:null,getValuesRef:null,triggerValidationRef:null,controlRef:null,formStateRef:null,ControllerRef:null,ErrorMessageRef:null,useFormContextRef:null,useFieldArrayRef:null,validationResolverRef:null,validationSchemaRef:null,BrowserbuiltinvalidationRef:null});A.current=n;var L=function(e,t){void 0===t&&(t=!0);var n=window.location.href,l=n.indexOf("#"),a=e.replace(/ |-/g,"");history.pushState({},null,l<0?n+"#"+a:n.substr(0,l)+"#"+a);var r=a+"Ref";q.current[r]&&q.current[r].scrollIntoView(t&&Math.abs(Object.keys(q.current).findIndex((function(e){return e===r}))-S)<5?{behavior:"smooth"}:void 0)};return K((function(){location.hash&&setTimeout((function(){return L(location.hash.substr(1),!1)}),10)}),[]),K((function(){if(!E.current){try{var e=new IntersectionObserver((function(e){for(var t,n=0,l=[],a=Q(e);!(t=a()).done;){t.value;try{for(var r in q.current){var o=q.current[r].getBoundingClientRect().top;l.push(o),n++}}catch(d){}}n=0;for(var c,m=0,u=0,s=l;u<s.length;u++){var i=s[u];(void 0===c||Math.abs(i)<Math.abs(c))&&(c=i,m=n),n++}R(m)}),{rootMargin:"100px",threshold:[.01]});Object.values(q.current).forEach((function(t){t&&e.observe(t)}))}catch(t){}return function(){E.current=!0}}}),[]),l.createElement("div",{className:J.a.container},l.createElement("div",{className:G.a.hiddenMenu},l.createElement("h1",{className:u.a.headingWithTopMargin,id:"main"},"API"),l.createElement("div",{className:G.a.quickSelect+" "+(d?G.a.lightQuickSelect:"")},l.createElement("select",{"aria-label":c.a.select[g]+" API",onChange:function(e){L(e.target.value)}},l.createElement("option",null,c.a.select[g]," API"),j.map((function(e){var t="function"==typeof e?e().title:e.title;return l.createElement("option",{value:t,key:t},t)}))))),l.createElement("p",{className:u.a.subHeading},T.header.description),l.createElement("div",{className:J.a.wrapper},l.createElement(f.a,{links:j,activeIndex:S,enLinks:ee,goToSection:L,currentLanguage:g}),l.createElement("main",null,l.createElement("section",{ref:function(e){q.current.useFormRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"useForm:"," ",l.createElement("span",{className:u.a.typeText},"Function"))),l.createElement("p",null,T.useForm.intro,l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("register")}},"register"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("unregister")}},"unregister"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("errors")}},"errors"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("watch")}},"watch"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("handleSubmit")}},"handleSubmit"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("reset")}},"reset"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("setError")}},"setError"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("clearError")}},"clearError"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("setValue")}},"setValue"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("getValues")}},"getValues"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("triggerValidation")}},"triggerValidation"),","," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("control")}},"control")," ","and"," ",l.createElement("code",{className:b.a.codeAsLink,onClick:function(){return L("formState")}},"formState"),"."),T.useForm.description,l.createElement(o.b,{withOutCopy:!0,tsRawData:"const { register } = useForm<{ firstName: string, lastName: string }>({\n  mode: 'onSubmit',\n  reValidateMode: 'onChange',\n  defaultValues: {},\n  validationSchema: undefined, // Note: will be deprecated in the next major version with validationResolver\n  validationResolver: undefined,\n  validationContext: undefined,\n  validateCriteriaMode: \"firstError\",\n  submitFocusError: true,\n  nativeValidation: false, // Note: version 3 only\n})",rawData:"const { register } = useForm({\n  mode: 'onSubmit',\n  reValidateMode: 'onChange',\n  defaultValues: {},\n  validationSchema: undefined, // Note: will be deprecated in the next major version with validationResolver\n  validationResolver: undefined,\n  validationContext: undefined,\n  validateCriteriaMode: \"firstError\",\n  submitFocusError: true,\n  nativeValidation: false, // Note: version 3 only\n})"}),l.createElement("h5",{className:u.a.h5},l.createElement("code",null,"mode:"," ",l.createElement("span",{className:u.a.typeText},"string = 'onSubmit'")),l.createElement(F.a,{top:3})),l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("th",null,c.a.name[g]),l.createElement("th",null,c.a.type[g]),l.createElement("th",null,c.a.description[g])),l.createElement("tr",null,l.createElement("td",null,"onSubmit (Default)"),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"string")),l.createElement("td",null,T.useForm.validateOnSubmit)),l.createElement("tr",null,l.createElement("td",null,"onBlur"),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"string")),l.createElement("td",null,T.useForm.validateOnBlur)),l.createElement("tr",null,l.createElement("td",null,"onChange"),l.createElement("td",null,l.createElement("span",{className:u.a.typeText},"string")),l.createElement("td",null,T.useForm.validateOnChange))))),l.createElement("h5",{className:u.a.h5,style:{marginTop:20}},l.createElement("code",null,"defaultValues:"," ",l.createElement("span",{className:u.a.typeText},"Record<string, any>"," = ","{}")),l.createElement(F.a,{top:3,message:"React Native: Custom register or using Controller"})),T.useForm.defaultValues(L),l.createElement(o.b,{url:"https://codesandbox.io/s/react-hook-form-defaultvalues-n5gvx",rawData:'const { register } = useForm({\n  defaultValues: {\n    firstName: "bill",\n    lastName: "luo",\n    email: "bluebill1049@hotmail.com",\n    pets: [ \'dog\', \'cat\' ]\n  }\n})\n\n<input name="firstName" ref={register} /> // ✅ working version\n<input name="lastName" ref={() => register({ name: \'lastName\' })} />\n// ❌ above example does not work with "defaultValues" due to its "ref" not being provided\n',tsRawData:'type Inputs = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  pets: string[];\n}\n  \nconst { register } = useForm<Inputs>({\n  defaultValues: {\n    firstName: "bill",\n    lastName: "luo",\n    email: "bluebill1049@hotmail.com",\n    pets: [ \'dog\', \'cat\' ]\n  }\n})\n\n<input name="firstName" ref={register} /> // ✅ working version\n<input name="lastName" ref={() => register({ name: \'lastName\' })} />\n// ❌ above example does not work with "defaultValues" due to its "ref" not being provided\n'}),l.createElement("div",{className:i.a.tableWrapper},l.createElement("table",{className:i.a.table},l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"validationSchema: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"Object")))),l.createElement("td",null,T.useForm.validationSchema(L),l.createElement(o.a,{style:te,url:"https://codesandbox.io/s/928po918qr"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"validationResolver: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"Function")))),l.createElement("td",null,T.useForm.validationResolver(L))),l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"validationContext: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"Object")))),l.createElement("td",null,T.useForm.validateContext)),l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"validateCriteriaMode: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"firstError | all")))),l.createElement("td",null,T.useForm.validateCriteriaMode,l.createElement(o.a,{style:te,url:"https://codesandbox.io/s/react-hook-form-errors-validatecriteriamode-all-qbskc"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"reValidateMode: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"onChange | onBlur | onSubmit")))),l.createElement("td",null,T.useForm.reValidateMode)),l.createElement("tr",null,l.createElement("td",null,l.createElement("h5",{className:u.a.h5,style:{border:"none",marginTop:20}},l.createElement("code",null,"submitFocusError: ",l.createElement("br",null),l.createElement("span",{className:G.a.mobileTypeText},"boolean = true")))),l.createElement("td",null,T.useForm.submitFocusError))))),l.createElement("p",{style:{textAlign:"center"}},"♦")),l.createElement("section",{ref:function(e){q.current.registerRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"register:"," ",l.createElement("span",{className:u.a.typeText},"(Ref, validateRule?) => void"),l.createElement(F.a,{message:"React Native: Custom register or using Controller"}))),l.createElement(p,{api:T,goToSection:L,currentLanguage:g})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.unregisterRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"unregister:"," ",l.createElement("span",{className:u.a.typeText},"(name: string | string[]) => void"))),T.unregister.description,l.createElement(o.b,{url:"https://codesandbox.io/s/react-hook-form-unregister-zjvr1",rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, handleSubmit, unregister } = useForm();\n  const onSubmit = (data) => console.log(data);\n  \n  useEffect(() => {\n    register({ name: "customRegister" }, { required: true });\n    \n    return () => unregister("customRegister"); // unregister input after component unmount\n  }, [register])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type="text" name="firstName" ref={register} />\n      <input type="text" name="lastName" ref={register} />\n      <button type="button" onClick={() => unregister("lastName")}>unregister</button>\n      <input type="submit" />\n    </form>\n  );\n}'})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.errorsRef=e}},l.createElement(N,{currentLanguage:g,api:T})),l.createElement("section",{ref:function(e){q.current.watchRef=e}},l.createElement(v,{currentLanguage:g,api:T})),l.createElement("section",{ref:function(e){q.current.handleSubmitRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"handleSubmit:"," ",l.createElement("span",{className:u.a.typeText},"(data: Object, e: Event) => () => void"))),T.handleSubmit.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, handleSubmit } = useForm();\n  const onSubmit = (data, e) => {\n    console.log("Submit event", e);\n    alert(JSON.stringify(data));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="firstName" ref={register} />\n      <input name="lastName" ref={register} />\n      <button type="submit">Submit</button>\n    </form>\n  );\n}',url:"https://codesandbox.io/s/yj07z1639"})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.resetRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"reset:"," ",l.createElement("span",{className:u.a.typeText},"(values?: Record<string, any>, omitResetState: OmitResetState = {}) => void"))),T.reset(L).description,l.createElement(y.a,{buttonLabels:["Uncontrolled","Controller","Controlled / React Native"]},l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, handleSubmit, reset } = useForm();\n  const onSubmit = (data, e) => {\n    // e.target.reset(); // HTML standard reset() function will only reset inputs\' value\n  };\n  \n  useEffect(async () => {\n    const result = await fetch(\'./api/formValues.json\'); // result: { firstName: \'test\', lastName: \'test2\' }\n    reset(result); // asynchronously reset your form values\n  }, [reset])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="firstName" ref={register({ required: true })} />\n      <input name="lastName" ref={register} />\n      <input type="submit" />\n      <input type="reset" /> // standard reset button\n      <input type="button" onClick={reset} />\n      <input type="button" onClick={() => reset({ firstName: "bill" }); }} /> // reset form with values\n      <input type="button" onClick={() => {\n          reset({\n            firstName: "bill"\n          }, {\n            errors: true, // errors will not be reset \n            dirtyFields: true, // dirtyFields will not be reset\n            dirty: true, // dirty will not be reset\n            isSubmitted: false,\n            touched: false,\n            isValid: false,\n            submitCount: false,\n          });\n        }}\n      />\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/jjm3wyqmjy"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm, Controller } from "react-hook-form";\nimport { TextField } from "@material-ui/core";\n\nexport default function App() {\n  const { register, handleSubmit, reset, setValue, control } = useForm();\n  const onSubmit = data => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller \n        as={TextField} \n        name="firstName"\n        control={control} \n        rules={ required: true } \n        defaultValue=""\n      />\n      <Controller \n        as={TextField} \n        name="lastName"\n        control={control}\n        defaultValue="" \n      />\n      \n      <input type="submit" />\n      <input type="button" onClick={reset} />\n      <input\n        type="button"\n        onClick={() => {\n          reset({\n            firstName: "bill",\n            lastName: "luo"\n          });\n        }}\n      />\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/react-hook-form-controller-079xx"}),l.createElement(o.b,{rawData:'import React, { useEffect } from "react";\nimport { useForm } from "./src";\n\nconst defaultValues = {\n  firstName: "bill",\n  lastName: "luo"\n};\n\nexport default function App() {\n  const { register, reset, watch, setValue } = useForm({\n    defaultValues\n  });\n  const values = watch();\n\n  useEffect(() => {\n    register({ name: "firstName" }, { required: true });\n    register({ name: "lastName" });\n  }, [register]);\n\n  return (\n    <form>\n      <input\n        name="firstName"\n        onChange={e => setValue("firstName", e.target.value)}\n        value={values.firstName}\n        placeholder="First Name"\n      />\n      <input\n        name="lastName"\n        onChange={e => setValue("lastName", e.target.value)}\n        value={values.lastName}\n        placeholder="Last Name"\n      />\n      <button\n        type="button"\n        onClick={() => {\n          reset(defaultValues);\n        }}\n      >\n        Reset\n      </button>\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/sharp-grothendieck-42mjo"}))),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.setErrorRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"setError: ",l.createElement("br",null),l.createElement("span",{className:u.a.typeText},"(name: string | ManualFieldError[], type?: string | Object, message?: string) => void"))),T.setError.description,l.createElement(y.a,{buttonLabels:["Single Error","Multiple Error","Single Field Errors"]},l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, setError } = useForm();\n\n  return (\n    <form>\n      <input\n        name="username"\n        onChange={e => {\n          const value = e.target.value;\n          // this will clear error by only pass the name of field\n          if (value === "bill") return clearError("username");\n          // set an error with type and message\n          setError("username", "notMatch", "please choose a different username");\n        }}\n        ref={register}\n      />\n      {errors.username && errors.username.message}\n    </form>\n  );\n}',url:"https://codesandbox.io/s/o7rxyym3q5"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, errors, setError } = useForm();\n\n  return (\n    <form>\n      <input name="username" ref={register} />\n      {errors.username && errors.username.message}\n      \n      <input name="lastName" ref={register} />\n      {errors.lastName && errors.lastName.message}\n      \n      <button type="button" onClick={() => {\n        setError([\n          {\n            type: "required",\n            name: "lastName",\n            message: "This is required.",\n          },\n          {\n            type: "minLength",\n            name: "username",\n            message: "Minlength is 10",\n          },\n        ]);\n      }}>\n        Set Errors for a single field\n      </button>\n    </form>\n  );\n}',url:"https://codesandbox.io/s/o7rxyym3q5"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, setError } = useForm({\n    validateCriteriaMode: "all" // you will need to enable validate all criteria mode\n  });\n\n  return (\n    <form>\n      <input name="username" ref={register} />\n      {errors.username && errors.username.types && (\n        <p>{errors.username.types.required}</p>\n      )}\n      {errors.username && errors.username.types && (\n        <p>{errors.username.types.minLength}</p>\n      )}\n\n      <button\n        type="button"\n        onClick={() =>\n          setError("username", {\n            required: "This is required",\n            minLength: "This is minLength"\n          })\n        }\n      >\n        Trigger\n      </button>\n    </form>\n  );\n}',url:"https://codesandbox.io/s/react-hook-form-set-single-field-with-multiple-errors-40y2v"}))),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.clearErrorRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"clearError:"," ",l.createElement("span",{className:u.a.typeText},"(name?: string | string[]) => void"))),T.clearError.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default () => {\n  const { clearError, errors, register } = useForm();\n\n  return (\n    <form>\n      <input name="firstName" ref={register({ required: true })} />\n      {errors.firstName && "This is required"}\n      <input name="lastName" ref={register({ required: true })} />\n      {errors.lastName && "This is required"}\n\n      <button type="button" onClick={() => clearError("firstName")}>\n        Clear\n      </button>\n      <button\n        type="button"\n        onClick={() => clearError(["firstName", "lastName"])}\n      >\n        Clear Multiple\n      </button>\n      <button type="button" onClick={() => clearError()}>\n        Clear All\n      </button>\n    </form>\n  );\n};\n'})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.setValueRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"setValue: ")),l.createElement("p",null,l.createElement("span",{className:u.a.typeText},"(name: string, value: any, shouldValidate?: boolean) => void"),l.createElement("br",null),l.createElement("span",{className:u.a.typeText},"(Record<Name, any>[], shouldValidate?: boolean) => void")),T.setValue.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, setValue } = useForm();\n\n  return (\n    <form>\n      <input name="test" ref={register} />\n      <input name="test1" ref={register} />\n      <input name="object.firstName" ref={register} />\n      <input name="array[0].firstName" ref={register} />\n      <button type="button" onClick={() => {\n        // manually set the "test" field with value "bill"\n        setValue("test", "bill")\n        \n        // set multiple values\n        setValue([\n          { test : "1", },\n          { test1 : "2", },\n        ])\n        \n        // set value as object or array\n        setValue("object", { firstName: "test" })\n        setValue("array", [{ firstName: "test" }])\n      }}>SetValue</button>\n    </form>\n  );\n}',tsRawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\ntype FormValues = {\n  string: string;\n  number: number;\n  object: {\n    number: number;\n    boolean: boolean;\n  };\n  array: {\n    string: string;\n    boolean: boolean;\n  }[];\n};\n\nexport default function App() {\n  const { setValue } = useForm<FormValues>();\n  \n  setValue("string", "test");\n  // function setValue<"string", string>(name: "string", value: string, shouldValidate?: boolean | undefined): void\n  setValue("number", 1);\n  // function setValue<"number", number>(name: "number", value: number, shouldValidate?: boolean | undefined): void\n  setValue("number", "error");\n  // ❌: type error\n  setValue([{ string: "test" }]);\n  // function setValue<"string">(namesWithValue: DeepPartial<Pick<FormValues, "string">>[], shouldValidate?: boolean | undefined): void\n  setValue([{ number: "error" }]);\n  // ❌: type error\n  setValue([{\n    string: "test",\n    number: 1\n  }]);\n  // function setValue<"string" | "number">(namesWithValue: DeepPartial<Pick<FormValues, "string" | "number">>[], shouldValidate?: boolean | undefined): void\n  setValue([\n    { string: "test" },\n    { number: 1 },\n  ]);\n  // function setValue<"string" | "number">(namesWithValue: DeepPartial<Pick<FormValues, "string" | "number">>[], shouldValidate?: boolean | undefined): void\n  setValue("object", { number: 1 });\n  // function setValue<"object", { number: number }>(name: "object", value: DeepPartial<{ number: number; boolean: boolean }>, shouldValidate?: boolean | undefined): void\n  setValue("object.boolean", true);\n  // function setValue<"object.boolean", boolean>(name: "object.boolean", value: boolean, shouldValidate?: boolean | undefined): void\n  setValue("array", [{ string: "test" }]);\n  // function setValue<"array", { string: string; }[]>(name: "array", value?: (DeepPartial<{ string: string; boolean: boolean; }> | undefined)[] | undefined, shouldValidate?: boolean | undefined): void\n  setValue("array[1].boolean", true);\n  // function setValue<"array[1].boolean", boolean>(name: "array[1].boolean", value: boolean, shouldValidate?: boolean | undefined): void\n  setValue("array[1].boolean", "noerror");\n  // function setValue<"array[1].boolean", string>(name: "array[1].boolean", value: string, shouldValidate?: boolean | undefined): void\n  setValue<string, boolean>("array[1].boolean", "error");\n  // ❌: type error\n  setValue([{ array: [{ boolean: false }]}]);\n  // function setValue<"array">(namesWithValue: DeepPartial<Pick<FormValues, "array">>[], shouldValidate?: boolean | undefined): void\n  \n  return <form />;\n}',url:"https://codesandbox.io/s/react-hook-form-set-inputselect-value-c46ly"})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.getValuesRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"getValues:"," ",l.createElement("span",{className:u.a.typeText},"(payload?: { nest: boolean } | string) => Object"))),T.getValues.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, getValues } = useForm();\n\n  return (\n    <form>\n      <input name="test" ref={register} />\n      <input name="test1" ref={register} />\n\n      <button\n        type="button"\n        onClick={() => {\n          const values = getValues();\n          const singleValue = getValues("test");\n          const nestedObjectValue = getValues({ nest: true });\n        }}\n      >\n        Get Values\n      </button>\n    </form>\n  );\n}',tsRawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\n// Flat input values\ntype Inputs = {\n  key1: string;\n  key2: number;\n  key3: boolean;\n  key4: Date;\n};\n\nexport default function App() {\n  const { register, getValues } = useForm<Inputs>();\n  \n  getValues();\n  // function getValues(): Inputs\n  getValues({ nest: true });\n  // function getValues<true>(payload: {\n  //     nest: true;\n  // }): FormValues\n  getValues({ nest: false });\n  // function getValues<false>(payload: {\n  //     nest: false;\n  // }): FormValues\n\n  return <form />;\n}\n\n// Nested input values\ntype Inputs1 = {\n  key1: string;\n  key2: number;\n  key3: {\n    key1: number;\n    key2: boolean;\n  };\n  key4: string[];\n};\n\nexport default function Form() {\n  const { register, getValues } = useForm<Inputs1>();\n  \n  getValues();\n  // function getValues(): Record<string, unknown>\n  getValues({ nest: true });\n  // function getValues<true>(payload: {\n  //     nest: true;\n  // }): FormValues\n  getValues({ nest: false });\n  // function getValues<false>(payload: {\n  //     nest: false;\n  // }): Record<string, unknown>\n  getValues("key1");\n  // function getValues<"key1", unknown>(payload: "key1"): string\n  getValues("key2");\n  // function getValues<"key2", unknown>(payload: "key2"): number\n  getValues("key3.key1");\n  // function getValues<"key3.key1", unknown>(payload: "key3.key1"): unknown\n  getValues<string, number>("key3.key1");\n  // function getValues<string, number>(payload: string): number\n  getValues<string, boolean>("key3.key2");\n  // function getValues<string, boolean>(payload: string): boolean\n  getValues("key4");\n  // function getValues<"key4", unknown>(payload: "key4"): string[]\n\n  return <form />;\n}\n',url:"https://codesandbox.io/s/get-form-values-xjepz"})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.triggerValidationRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"triggerValidation:"," ",l.createElement("span",{className:u.a.typeText},"(payload?: string | string[]) => Promise<boolean>"))),T.triggerValidation.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, triggerValidation, errors } = useForm();\n  console.log(errors);\n\n  return (\n    <form>\n      <input name="firstName" ref={register({ required: true })} />\n      <input name="lastName" ref={register({ required: true })} />\n      <button type="button" onClick={() => { triggerValidation("lastName"); }}>Trigger</button>\n      <button type="button" onClick={() => { triggerValidation(["firstName", "lastName"]); }}>Trigger Multiple</button>\n      <button type="button" onClick={() => { triggerValidation(); }}>Trigger All</button>\n      <button\n        type="button"\n        onClick={async () => {\n          const result = await triggerValidation("lastName");\n          if (result) { console.log("valid input") }\n        }}\n      >\n        Trigger with result\n      </button>\n    </form>\n  );\n}',url:"https://codesandbox.io/s/react-hook-form-trigger-validation-w1g0m"})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.controlRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"control:"," ",l.createElement("span",{className:u.a.typeText},"Object"))),T.control.description,l.createElement(o.b,{rawData:H.a,url:"https://codesandbox.io/s/react-hook-form-controller-5xi7n"})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.formStateRef=e}},l.createElement(h,{currentLanguage:g,api:T,sectionsRef:q})),l.createElement("hr",null),l.createElement("section",{ref:function(e){return q.current.ControllerRef=e}},l.createElement(z,{currentLanguage:g,api:T})),l.createElement("hr",null),l.createElement("section",{ref:function(e){return q.current.ErrorMessageRef=e}},l.createElement(P,{currentLanguage:g,api:T})),l.createElement("hr",null),l.createElement("section",{ref:function(e){return q.current.useFormContextRef=e}},l.createElement(x,{currentLanguage:g,api:T})),l.createElement("hr",null),l.createElement("section",{ref:function(e){return q.current.useFieldArrayRef=e}},l.createElement(W,{currentLanguage:g,api:T})),l.createElement("hr",null),l.createElement("section",{ref:function(e){return q.current.validationResolverRef=e}},l.createElement(B,{currentLanguage:g,api:T})),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.validationSchemaRef=e}},l.createElement("code",{className:u.a.codeHeading},l.createElement("h2",null,"validationSchema:"," ",l.createElement("span",{className:u.a.typeText},"Object"))),T.validationSchema.description,l.createElement(y.a,{buttonLabels:["Web","React Native"]},l.createElement(o.b,{rawData:'import React from "react"\nimport ReactDOM from "react-dom"\nimport { useForm } from "react-hook-form"\nimport * as yup from "yup"\n\nconst SignupSchema = yup.object().shape({\n  name: yup.string().required(),\n  age: yup.number().required(),\n});\n\nexport default function App() {\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: SignupSchema\n  });\n  const onSubmit = data => console.log(data);\n  console.log(errors);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input name="name" ref={register} />\n      <input type="number" name="age" ref={register} />\n      <input type="submit" />\n    </form>\n  );\n}',url:"https://codesandbox.io/s/928po918qr"}),l.createElement(o.b,{rawData:'import React from "react";\nimport { Text, View, TextInput, Button, Alert } from "react-native";\nimport { useForm } from "react-hook-form";\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.number().required(),\n});\n\nexport default function App() {\n  const { register, setValue, handleSubmit, errors } = useForm({\n    validationSchema: schema\n  });\n  const onSubmit = data => Alert.alert("Form Data", JSON.stringify(data));\n  \n  useEffect(() => {\n    register("firstName");\n    register("lastName");\n  }, [register]);\n\n  return (\n    <View>\n      <Text>First name</Text>\n      <TextInput onChangeText={text => setValue("firstName", text, true)} />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Text>Last name</Text>\n      <TextInput onChangeText={text => setValue("lastName", text)} />\n\n      <Button onPress={handleSubmit(onSubmit)} />\n    </View>\n  );\n}\n'}))),l.createElement("hr",null),l.createElement("section",{ref:function(e){q.current.BrowserbuiltinvalidationRef=e}},l.createElement("h2",{className:u.a.codeHeading},"Browser built-in validation (V3 only)"),T.NativeValidation.description,l.createElement(o.b,{rawData:'import React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default function App() {\n  const { register, handleSubmit } = useForm({ nativeValidation: true });\n  const onSubmit = async data => { alert(JSON.stringify(data)); };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        name="firstName"\n        ref={register({ required: "Please enter your first name." })} // custom message\n      />\n      <input name="lastName" ref={register({ required: true })} />\n      <input type="submit" />\n    </form>\n  );\n}\n',url:"https://codesandbox.io/s/react-hook-form-native-validation-ez5ww"})),l.createElement("div",{className:J.a.centerContent,style:{marginTop:100}},l.createElement("h1",null,c.a.advanceUsage[g].title),l.createElement("p",null,c.a.advanceUsage[g].description),l.createElement("button",{className:b.a.primaryButton,onClick:function(){Object(V.navigate)(Object(D.a)("/advanced-usage",g))},style:{margin:"40px auto"}},c.a.advanceUsage[g].buttonText)),l.createElement(k.a,{currentLanguage:g}))))}))},cA0C:function(e,t,n){"use strict";t.a='import React from "react";\nimport { Text, View, TextInput, Button, Alert } from "react-native";\nimport { useForm, Controller } from "react-hook-form";\n\nexport default function App() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = data => Alert.alert(\n    "Form Data",\n    JSON.stringify(data),\n  );\n\n  return (\n    <View>\n      <Text>First name</Text>\n      <Controller\n        as={TextInput}\n        control={control}\n        name="firstName"\n        onChange={args => args[0].nativeEvent.text}\n        rules={{ required: true }}\n        defaultValue=""\n      />\n      {errors.firstName && <Text>This is required.</Text>}\n\n      <Text>Last name</Text>\n      <Controller\n        as={TextInput}\n        control={control}\n        name="lastName"\n        onChange={args => args[0].nativeEvent.text}\n        defaultValue=""\n      />\n\n      <Button title="Submit" onPress={handleSubmit(onSubmit)} />\n    </View>\n  );\n}\n'},"f8+S":function(e,t,n){"use strict";t.a='import React from "react";\nimport { useForm, useFieldArray } from "react-hook-form";\n\nfunction App() {\n  const { register, control, handleSubmit } = useForm({\n    // defaultValues: {}; you can populate the fields by this attribute \n  });\n  const { fields, append, prepend, remove } = useFieldArray({\n    control,\n    name: "test"\n  });\n  \n  return (\n    <form onSubmit={handleSubmit(data => console.log("data", data))}>\n      <ul>\n        {fields.map((item, index) => (\n          <li key={item.id}>\n            <input name={`test[${index}].name`} defaultValue={item.name} ref={register()} />\n            <button onClick={() => remove(index)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      <section>\n        <button type="button" onClick={() => append({ name: "test" })} >\n          append\n        </button>\n        <button type="button" onClick={() => prepend({ name: "test1" })}>\n          prepend\n        </button>\n      </section>\n    </form>\n  );\n}\n'},fHxr:function(e,t,n){e.exports={table:"table-module--table--oldWG",tableWrapper:"table-module--tableWrapper--2czrK",mobileTypeText:"table-module--mobileTypeText--1_lbk"}},"i0/G":function(e,t,n){"use strict";var l=n("q1tI"),a=n("LuW/"),r=n("0W2P"),o=n("Kzm3"),c=n("mLYZ"),m=n("SGrA"),u=n("G3ap"),s=n.n(u),i=n("9Ruc"),d=n.n(i);t.a={title:"API文档",header:{description:"专注于通过简化API提供最佳开发者体验"},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,"通过调用使用",l.createElement("code",null,"useForm"),"，您将收到以下方法"," "),description:l.createElement("p",null,l.createElement("code",null,"useForm"),"也有",l.createElement("strong",null,"可选"),"的参数。 下面的示例演示了所有选项的默认值。"),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"该回调函数使您可以运行任何模式或自定义验证。该函数的完整形式为",l.createElement("code",null," values "),"作为 参数，您将需要验证结果并返回两者",l.createElement("code",null," values "),"和",l.createElement("code",null," errors "),"。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意："),"只要有错误对象不是空对象，反应钩子形式将考虑该形式视为无效。"),l.createElement("p",null,"请在此阅读更多信息：",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver"),"。"))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"该上下文对象将被注入",l.createElement("code",null," validationResolver "),"的第二个参数或",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"对"),"验证的上下文对象。")),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,"默认行为",l.createElement("code",null,"firstError"),"将验证 所有字段的验证，并收集所有遇到的第一个错误。"),l.createElement("p",null,"设置为",l.createElement("code",null," all "),"时，所有字段的验证将是 运行并收集遇到的所有错误。")),validateOnSubmit:l.createElement(l.Fragment,null,"验证将在",l.createElement("code",null,"提交"),"时触发，无效的输入将附加onChange事件侦听器以重新验证它们。"),validateOnBlur:l.createElement(l.Fragment,null,"验证将在离开",l.createElement("code",null,"blur"),"表格事件上触发。"),validateOnChange:l.createElement(l.Fragment,null,"验证将在每个输入",l.createElement("code",null,"change"),"的事件上触发，并导致多个重新renders。 不推荐这个方法的实践性能。"),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"您可以使用defaultValue/defaultChecked设置输入的默认值",l.createElement("a",{className:d.a.links,href:"https://reactjs.org/docs/uncontrolled-components.html"},"（从React文档中读取默认值的更多内容）"),"，或者将defaultValues作为可选参数来填充整个表单的默认值。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要提示："),l.createElement("code",null,"defaultValues"),"将缓存在自定义钩子中， 要重置",l.createElement("code",null,"defaultValues"),"，请使用",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("reset")}},"reset"),"api。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 默认值",l.createElement("code",null,"defaultValues"),"中定义的值将作为默认值",l.createElement("code",null,"defaultValue"),"注入",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("watch")}},"watch"),"。"),l.createElement("p",null,"React Hook Form. 默认值",l.createElement("code",null,"defaultValues"),"不会使用手动注册的输入（例如：注册",l.createElement("code",null,"register({ name: 'test' })"),"）自动填充，因为手动注册",l.createElement("code",null,"register"),"字段不会提供",l.createElement("code",null,"ref"),"到React Hook Form。"))},validationSchema:function(e){return l.createElement("p",null,"将表单验证规则应用于架构级别的",l.createElement("code",null,"Yup"),"，请参阅验证架构",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema"),"部分。")},reValidateMode:l.createElement("p",null,"此选项允许您在有错误的输入重新验证时进行配置（默认情况下，在输入更改期间触发验证）。"," ",l.createElement(r.a,null)),validationFields:l.createElement("p",null,"提供字段数组意味着只包含字段将会被验证。 此选项很有用需要验证当您要切换什么表格需要验证。"),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"默认情况下，当用户提交表单并包含错误时, 具有错误的第一个字段将被聚焦。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 只有具有",l.createElement("code",null,"ref"),"的注册字段将工作。 手动注册的输入将无法正常工作。 比如: ",l.createElement("code",null,"register({ name: 'test' }) // 不会工作")," ")),nativeValidation:function(e){return l.createElement("p",null,"将此选项设置为",l.createElement("code",null,"true"),"将启用浏览器的本机验证。"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"您可以了解有关内置浏览器验证的更多信息"),"，并参考本机验证部分",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation"),"了解更多详细信息和示例。")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此方法将允许您取消注册单个输入或输入的数组。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","取消注册输入时，其值将不再被包含在被提交的表单数据中。当您手动在",l.createElement("code",null," useEffect "),"注册输入时会有用，同时当组件卸载时你也可以用它来取消注册。"))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此方法允许您将输入/选择中的",l.createElement("code",null,"Ref"),"和验证规则注册到React Hook Form。"),l.createElement("p",null,"验证规则都是基于HTML标准，也允许自定义验证。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要:")," 名称",l.createElement("code",null,"name"),"是",l.createElement("strong",null,"必需"),"的和",l.createElement("strong",null,"唯一"),"的。 输入名称还支持点和括号语法，它允许您轻松创建表单。 示例表如下:")),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+a.a.lightPink}},"如果您使用数组/数组字段，则可以将输入名称指定为",l.createElement("code",null,"name[index]"),"。"," ",l.createElement("a",{className:d.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"example for Field Array"},"查看Field Array数组示例"),"."),example:"提交结果",selectHelp:"通过选择该选项，下面的API表将得到更新。",options:{title:"注册选项",registerWithValidation:"注册验证",registerWithValidationMessage:"注册验证和错误消息",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:s.a.title},"手动注册输入"),l.createElement("p",null,"您还可以手动注册输入，这在使用自定义组件和无法访问",l.createElement("code",null,"Ref"),"时情况下非常有用。 实际上，当您使用React Native或自定义组件（如",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select"),"）时， 你需要手动注册。"),l.createElement("p",null,"通过使用自定义注册时，您将需要使用",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),"来更新输入值，因为输入注册没有",l.createElement("code",null,"ref"),"。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","如果您希望自定义注册输入在其值更新过程中触发重新render，那么你应该给您注册的输入的类型加以",l.createElement("code",null,"type"),"。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:"),"多个radio input使用相同的名称，您想将验证注册到最后一个 输入，以便挂钩了解最后将它们作为一组进行验证。"))}},validation:{required:l.createElement(l.Fragment,null,"如果为true，则表示输入必须具有值，然后才能提交表单。 您可以分配一个字符串以在错误对象中，来让",l.createElement("code",null,"errors"),"返回错误消息。"),maxLength:"文本框能接受的最大字符数。",minLength:"文本框能输入的最小字符数，并且仍然被认为是有效的。",max:"为此输入接受的最大值。",min:"要接受此输入的最小值。",pattern:"验证文本框内容的正则表达式。",validate:"您可以callback调函数作为参数来验证，或者您可以callback调函数的对象来验证所有这些函数。（参考例子)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此对象包含有关表单状态的信息。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要信息："),l.createElement("code",null,"formState"),"与",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy"),"一起包装以提高渲染性能，因此请使您在渲染前先调用/读取它，以启用状态更新。 这个减少重新渲染功能功能由于缺少而仅适用于Web平台React Native上的",l.createElement("code",null," Proxy "),"支持。")),dirty:l.createElement(l.Fragment,null,"在用户与任何输入互动后设置为",l.createElement("code",null,"true"),"。"),dirtyFields:"一组独特的用户修改字段。",isSubmitted:l.createElement(l.Fragment,null,"在用户提交表单后设置",l.createElement("code",null,"true"),"。提交表单后，其状态将保持提交状态，直到使用reset方法调用为止。"),touched:"已被接触过的所有输入的数组。",isSubmitting:l.createElement(l.Fragment,null,"在表单提交将设置为",l.createElement("code",null,"true"),"，提交后设置为",l.createElement("code",null,"false"),"。"),submitCount:"提交表格数量。",isValid:l.createElement(l.Fragment,null,"如果没有任何错误，设置为",l.createElement("code",null,"true"),"。")},errors:{title:"errors",description:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"对象包含属于每个输入的表单错误或错误消息。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},o.a.note[e],":")," ","V3和V4之间的区别："),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"V4: 嵌套对象"),l.createElement("p",null,l.createElement("strong",null,"原因:")," 随着optional chaining接越来越多 在社区中流行并支持更好的type。"),l.createElement("p",null,l.createElement("code",null,"errors?.yourDetail?.firstName;"))),l.createElement("li",null,l.createElement("p",null,"V3: 展平对象"),l.createElement("p",null,l.createElement("strong",null,"原因:")," 简单易访问的错误。"),l.createElement("p",null,l.createElement("code",null,"errors['yourDetail.firstName'];")))))},types:l.createElement(l.Fragment,null,"This is useful for input validation like rules of password, which multiple errors need to return for a single field. To enable this feature, make sure you have set ",l.createElement("code",null,"validateCriteriaMode: 'all'"),"."),message:"默认情况下消息是空字符串。 但是，如果您使用错误消息注册验证，那么它将被返回。",ref:"输入元素的参考。"},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"这将监视指定的输入并返回其值。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"当未定义",l.createElement("code",null,"defaultValue"),"时，watch的第一个render将返回",l.createElement("code",null,"undefined"),"，因为它在",l.createElement("code",null,"register"),"之前被调用，但是您可以将",l.createElement("code",null,"defaultValue"),"设置为返回值（第二个参数）。")),l.createElement("li",null,l.createElement("p",null,"但是，如果",l.createElement("code",null,"defaultValues"),"在使用表单",l.createElement("code",null,"useForm"),"作为参数初始化，则第一个render将返回",l.createElement("code",null,"defaultValues"),"中提供的内容。")))),tableTitle:{single:l.createElement(l.Fragment,null,"按名称观看输入值（类似于lodash的",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get"),"功能)"),multiple:"观看多个输入",all:"观看所有输入",nest:"观察所有输入并返回嵌套对象"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"当表单验证成功时，此函数将传递表单数据并可以远程调用。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 您可以传递",l.createElement("code",null,"async"),"验证。例如："),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此函数将重置表单中的字段值和错误。通过提供",l.createElement("code",null,"omitResetState"),"，您可以自由地 仅重置特定状态。 您可以将值",l.createElement("code",null,"values"),"作为可选参数传递，以将表单重置为已分配的默认值。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 对于像",l.createElement("code",null,"React-Select"),"这样不公开",l.createElement("code",null,"ref"),"的受控组件，您必须通过",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue"),"手动重置输入值或使用",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller"),"来包装您的受控组件。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 您将需要在",l.createElement("code",null,"useForm"),"提供",l.createElement("code",null,"defaultValues"),"或者",l.createElement("code",null,"reset"),"带价值，来重置",l.createElement("code",null," Controller "),"组件的价值。"))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"允许您手动设置输入单个和多项错误。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","此方法将不会保留错误并阻止提交动作。适用于在",l.createElement("code",null,"handleSubmit"),"函数中，当您想要在异步验证后向用户提供错误反馈。"))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": 重置所有错误")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": 重置单个错误")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": 重置多个错误")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此功能允许您动态设置输入/选择值。 在同时，尝试避免不必要的重新渲染，与此同时只有以下情况将触发重新渲染:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"值更新时触发错误")),l.createElement("li",null,l.createElement("p",null,"值更新时纠正错误")),l.createElement("li",null,l.createElement("p",null,"首次调用并触发表单",l.createElement("code",null,"dirty"))),l.createElement("li",null,l.createElement("p",null,"更新表格状态",l.createElement("code",null,"touched")))),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 通过调用此方法，",l.createElement("code",null,"formState"),"将将输入的名称",l.createElement("code",null,"name"),"推入触摸",l.createElement("code",null,"touched"),"。"),l.createElement("p",null,"This function will return the entire form data. 您还可以将",l.createElement("code",null,"shouldValidate"),"设置为",l.createElement("code",null,"true"),"，并将触发字段验证。例如：",l.createElement("br",null),l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此函数将返回整个表单数据。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"默认情况下，",l.createElement("code",null,"getValues()"),"将在平坦结构中返回表单数据。例如:"," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"使用定义的表单，",l.createElement("code",null,"getValues(","{ nest: true }",")"),"将根据输入名称返回嵌套结构中的数据。 例如:"," ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"手动触发表单中的输入/选择验证。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 当验证失败时，",l.createElement("code",null,"errors"),"对象将被更新。"))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"如果您希望使用外部验证模式，可以在",l.createElement("code",null,"useForm"),"应用验证模式",l.createElement("code",null,"validationSchema"),"作为可选参数。 React Hook Form当前支持",l.createElement("a",{className:d.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup"),"进行对象模式验证。")},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"输入的唯一名称。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"受控组件。例如： ",l.createElement("code",null,'as="input"')," or"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null,"✓"),l.createElement("td",null,l.createElement("code",null,"control"),"对象来自调用",l.createElement("code",null,"useForm"),"的对象。 如果您使用的是FormContext，则为可选。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"与不受控制的组件的",l.createElement("code",null,"defaultValue"),"相同，当 提供",l.createElement("code",null,"boolean"),"值，它将被视为复选框 输入。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 您将需要提供",l.createElement("code",null,"defaultValue"),"或",l.createElement("code",null,"useForm"),"上的",l.createElement("code",null,"defaultValues")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意"),": 如果您的表格会 使用不同的值调用",l.createElement("code",null," reset "),"，您将需要 在useForm级别而不是set上提供",l.createElement("code",null," defaultValues "),"内联",l.createElement("code",null," defaultValue "),"。"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,"根据",l.createElement("code",null," register "),"的验证规则。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"这个",l.createElement("code",null," onChange "),"道具可让您自定义返回值, 确保您知道外部组件",l.createElement("code",null,"value"),"props的形状。 当payload是",l.createElement("code",null,"object"),"时，将读取",l.createElement("code",null,"value"),"或",l.createElement("code",null,"check"),"属性。",l.createElement(c.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ event, data ]) => ({ checked: data.checked})}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"该props可让您定位特定的事件名称，例如：",l.createElement("code",null,"onChange"),"事件被命名为",l.createElement("code",null," onTextChange "))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"此回调允许自定义挂钩在以有错误情况下专注于输。此功能适用于React和React-Native 只要可以专注于组件。"),l.createElement("p",null,'这是一个" "}',l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"工作示例"),"。"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"该道具可让您为指定一个特定的事件名称",l.createElement("code",null,"onBlur"),"，例如：当",l.createElement("code",null,"onBlur"),"事件被命名为时",l.createElement("code",null,"onTextBlur"),".")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"valueName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"该属性允许您覆盖",l.createElement("code",null,"value"),"属性， 支持其他不使用",l.createElement("code",null,"value"),"属性的组件。 例如：",l.createElement("code",null,"选中"),"，",l.createElement("code",null,"选中"),"等..."))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"React Hook Form包含不受控制的组件和本机输入， 但是很难避免使用外部受控组件 如",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select"),","," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","和"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI"),"。 这个包装器组件将使您的工作更轻松。"))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"当组件存在深处时传递",l.createElement("code",null,"props"),"变得痛苦，这个组件解决这个问题。"),description:l.createElement(l.Fragment,null,l.createElement("p",null,"一旦你的表单被",l.createElement("code",null,"FormContext"),"包装，",l.createElement("code",null,"useFormContext"),":函数可以在其子组件中调用。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 调用使用",l.createElement("code",null,"useFormContext"),"将为您提供所有",l.createElement("code",null,"useForm"),"函数。"))},control:{title:"control",description:l.createElement("p",null,"该对象是为React Hook Form的Controller组件制作的。包含React Hook Form的方法和同时将受控组件注册。")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"A simple component to render associated input's error message."),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"关联的表格名称。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"object")),l.createElement("td",null,"✓"),l.createElement("td",null,"React Hook表单中的",l.createElement("code",null," errors "),"对象。如果您使用的是FormContext，则为可选。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"内联错误消息。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"包装器组件或HTML标签。 例如: ",l.createElement("code",null,'as="span"')," or"," ",l.createElement("code",null,"as={<Text />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"这是一个"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","用于呈现错误单个或多个消息。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:"),"您需要设置将",l.createElement("code",null,"validateCriteriaMode"),"设置为“all”以使用",l.createElement("code",null,"消息"),"."))))},NativeValidation:{title:"Browser built-in validation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"下面的示例演示了如何利用浏览器的验证。 您只需要将本机验证",l.createElement("code",null,"nativeValidation"),"设置为",l.createElement("code",null,"true"),"，其余语法与标准验证相同。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意"),": 此功能已被由于使用率较低，已在V4中将其删除，但您仍可以在V3中使用它。"))},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"用于处理字段数组（动态输入）的自定义挂钩。 此挂钩提供以下对象和函数。"),l.createElement(c.b,{rawData:m.a}),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意: ")," ",l.createElement("code",null," useFieldArray "),"建立在不受控制的组件之上。 以下说明将帮助您了解并牢记其实施过程中的行为。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"可以通过在",l.createElement("code",null,"userform"),"中的",l.createElement("code",null,"defaultValues"),"来填充",l.createElement("code",null,"字段"),"。")),l.createElement("li",null,l.createElement("p",null,"确保您将来自",l.createElement("code",null,"fields"),"对象的",l.createElement("code",null,"id"),"分配为组件键。")),l.createElement("li",null,l.createElement("p",null,"确保将",l.createElement("code",null,"defaultValue"),"设置为要设置默认值时，",l.createElement("code",null,"fields[index]"),"当使用输入,删除或重置。")),l.createElement("li",null,l.createElement("p",null,"您不能一个接一个地调用动作。行动需要每个渲染触发。"),l.createElement(c.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,l.createElement("p",null,"与",l.createElement("code",null,"useFieldArray"),"一起使用时，请使用",l.createElement("code",null,"ref={register()}"),"而不是",l.createElement("code",null,"ref={register}"),"，这一点很重要，因此",l.createElement("code",null,"register"),"将在映射期间被调用。")),l.createElement("li",null,"它不适用于",l.createElement("code",null,"useEffect"),"上的自定义注册。"))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:s.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"此对象是映射和render染输入的真实来源",l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要: "),"因为每个输入可以不受控制, ",l.createElement("code",null,"id"),"是必须的来帮助反应组件是否已更改、添加或删除了。"),l.createElement("p",null,"eg: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void"))),l.createElement("td",null,"将输入/输入追加到字段的末尾")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void"))),l.createElement("td",null,"将输入/输入前置到字段的开头")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(index: number, value: object) => void"))),l.createElement("td",null,"在特定位置插入输入")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void"))),l.createElement("td",null,"交换输入位置")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void"))),l.createElement("td",null,"将输入移动到另一位置。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:"),l.createElement("code",null,"move"),"和",l.createElement("code",null,"swap"),"之间的差异 ",l.createElement("code",null,"swap"),"在于继续调用",l.createElement("code",null,"move"),"将推送输入一直推下,",l.createElement("code",null,"swap"),"只是交换输入的位置。"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",null,l.createElement("code",{className:s.a.typeText},"(index?: number | number[]) => void"))),l.createElement("td",null,"在特定位置删除输入，或删除所有输入当没有提供位置。")))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"此功能使您可以运行任何外部验证方法，例如",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),"，",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct"),"和。实际上，目标不仅限于限制Yup作为我们的外部（架构）验证库。我们希望支持许多其他验证库以与React Hook Form一起使用。您甚至可以编写自定义验证逻辑进行验证。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","确保返回的对象包含值和错误，并且它们的默认值应为空对象",l.createElement("code",null,"{}"),"。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","返回错误对象的键应与您的输入有关。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:"),"该函数将被缓存在类似于",l.createElement("code",null,"validationSchema"),"的自定义钩子中，而",l.createElement("code",null,"validationContext"),"是一个可变对象，可以在每次重新渲染时进行更改。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:"),"重新验证输入将在用户互动期间一次只能出现一个字段，因为这个软件会将错误对象评估为特定字段，并且触发相应的重新渲染。"))}}},jDek:function(e,t,n){e.exports={fieldset:"ApiRefTable-module--fieldset--Cxh1N"}},k52A:function(e,t,n){e.exports={menu:"SideMenu-module--menu--WeHDU",arrow:"SideMenu-module--arrow--3QN_Z",arrowLast:"SideMenu-module--arrowLast--3oMQI",lightMenu:"SideMenu-module--lightMenu--XYEOq",titleList:"SideMenu-module--titleList--YlD4k",code:"SideMenu-module--code--L4G67"}},kA1s:function(e,t,n){"use strict";var l=n("q1tI"),a=n("LuW/"),r=n("0W2P"),o=n("Kzm3"),c=n("mLYZ"),m=n("SGrA"),u=n("G3ap"),s=n.n(u),i=n("9Ruc"),d=n.n(i);t.a={title:"API ドキュメント",header:{description:"は API をシンプルにすることにより、最高な DX を提供することに焦点を当てています。"},useForm:{title:"useForm",intro:l.createElement(l.Fragment,null,l.createElement("code",null,"useForm")," ","を呼び出すことにより、次のメソッドを受け取ることができます。"," "),description:l.createElement("p",null,l.createElement("code",null,"useForm")," は",l.createElement("b",null,"省略可能"),"な引数もあります。 下記の例は、全てのオプションのデフォルト値を示します。"),validationResolver:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"このコールバック関数を使用すると、任意のスキーマバリデーションまたはカスタムバリデーションを実行できます。 この関数は引数としてフォーム全体の ",l.createElement("code",null,"values")," を持ち、 その値を検証して ",l.createElement("code",null,"values")," と ",l.createElement("code",null,"errors")," ","の両方を返す必要があります。詳細については"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationResolver")}},"validationResolver")," ","セクションをご覧ください。"))},validateContext:l.createElement(l.Fragment,null,l.createElement("p",null,"このコンテキストオブジェクトは、",l.createElement("code",null,"validationResolver")," ","の第二引数または"," ",l.createElement("a",{href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","バリデーションのコンテキストオブジェクトに渡されます。")),validateCriteriaMode:l.createElement(l.Fragment,null,l.createElement("p",null,"デフォルトの設定である ",l.createElement("code",null,"firstError")," ","は、全てのフィールドのバリデーションを行い、最初に発生したエラーを収集します。"),l.createElement("p",null,"このオプションを ",l.createElement("code",null,"all")," ","に設定すると、全てのフィールドのバリデーションが実行され、 発生した全てのエラーが収集されます。")),validateOnSubmit:l.createElement(l.Fragment,null,l.createElement("code",null,"submit")," イベントからバリデーションがトリガーされ、 無効な入力は ",l.createElement("code",null,"onChange")," ","イベントリスナーをアタッチして再度バリデーションを行います。"),validateOnBlur:l.createElement(l.Fragment,null,l.createElement("code",null,"blur")," イベントからバリデーションがトリガーされます。"),validateOnChange:l.createElement(l.Fragment,null,"入力の度に ",l.createElement("code",null,"change")," ","イベントからバリデーションがトリガーされ、複数の再レンダリングが行われます。 非推奨: これをパフォーマンスの悪い習慣と考えてください。"),defaultValues:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,l.createElement("code",null,"defaultValue/defaultChecked")," を使用して input のデフォルト値を設定するか"," ",l.createElement("a",{className:d.a.links,href:"https://reactjs.org/docs/uncontrolled-components.html"},"(詳細については React ドキュメントを参照)")," ","、",l.createElement("code",null,"defaultValues")," ","を省略可能な引数として渡してフォーム全体のデフォルト値を設定することができます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要:")," ",l.createElement("code",null,"defaultValues")," はカスタムフック内にキャッシュされます。"," ",l.createElement("code",null,"defaultValues")," をリセットしたい場合は、"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("reset")}},"reset")," ","API を使用してください。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ",l.createElement("code",null,"defaultValues")," で定義された値は ",l.createElement("code",null,"defaultValue")," ","として"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("watch")}},"watch")," ","に注入されます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," 手動で"," ",l.createElement("code",null,"register")," を適用したフィールドでは React Hook Form に"," ",l.createElement("code",null,"ref")," を提供しないため、 手動で登録した input (例:"," ",l.createElement("code",null,"register({ name: 'test' })"),") に"," ",l.createElement("code",null,"defaultValues")," は自動設定されません。"))},validationSchema:function(e){return l.createElement("p",null,"スキーマレベルで ",l.createElement("code",null,"Yup")," ","を使用してフォームバリデーションルールを適用します。"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("validationSchema")}},"validationSchema")," ","セクションを参照してください。")},reValidateMode:l.createElement("p",null,"このオプションを使用すると、エラーのある入力が再度バリデーションされるタイミングを設定することができます。"," ","(デフォルトでは、入力変更時にバリデーションがトリガーされます。)"," ",l.createElement(r.a,null)),validationFields:l.createElement("p",null,"フィールドの配列を指定すると、含まれているフィールドのみがバリデーションが行われます。 このオプションは、バリデーションが必要なフィールドを切り替えたい時に便利です。"),submitFocusError:l.createElement(l.Fragment,null,l.createElement("p",null,"デフォルトでは、ユーザーがフォームを送信してそのフォームにエラーが含まれている時、 エラーのある最初のフィールドがフォーカスされます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ",l.createElement("code",null,"ref")," ","を持つ登録したフィールドのみが機能します。 手動で登録した input では機能しません。例："," ",l.createElement("code",null,"register({ name: 'test' }) // doesn't work")," ")),nativeValidation:function(e){return l.createElement("p",null,"このオプションを ",l.createElement("code",null,"true")," ","に設定すると、ブラウザーネイティブバリデーションが有効になります。",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation"},"ビルトインブラウザーバリデーションの詳細を確認"),"できます。詳細と例については"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("nativeValidation")}},"nativeValidation")," ","セクションを参照してください。")}},unregister:{title:"unregister",description:l.createElement(l.Fragment,null,l.createElement("p",null,"このメソッドでは、単一の input または input の配列に"," ",l.createElement("code",null,"unregister")," を適用することができます。 これは、"," ",l.createElement("code",null,"useEffect")," でカスタム登録として input を登録 (",l.createElement("code",null,"register"),") し、 コンポーネントのアンマウント後に登録を解除する場合に便利です。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," input を登録解除 (",l.createElement("code",null,"unregister"),") すると、 その値は送信されたフォームデータに含まれなくなります。"))},register:{title:"register",description:l.createElement(l.Fragment,null,l.createElement("p",null,"このメソッドを使用すると、input/select の ",l.createElement("code",null,"Ref")," ","とバリデーションルールを React Hook Form に登録 (",l.createElement("code",null,"register"),") することができます。"),l.createElement("p",null,"バリデーションルールは全て HTML 標準に基づいており、カスタムバリデーションも可能です。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要：")," ",l.createElement("code",null,"name")," ","属性は",l.createElement("b",null,"必須"),"かつ",l.createElement("b",null,"ユニーク"),"です。 input の name 属性はドット記法およびブラケット記法もサポートしているため、 ネストされたフォームフィールドを簡単に作成することができます。例は下記の通りです：")),fieldArray:l.createElement("p",{style:{paddingLeft:10,borderLeft:"4px solid "+a.a.lightPink}},l.createElement("code",null,"arrays/array")," フィールドを使用する場合、input の name 属性を"," ",l.createElement("code",null,"name[index]")," のように割り当てることができます。",l.createElement("a",{className:d.a.links,href:"https://github.com/react-hook-form/react-hook-form/blob/master/examples/FieldArray.tsx",title:"example for Field Array"},"フィールド配列の例をご覧ください"),"。"),example:"フォームの送信結果",selectHelp:"登録オプションを選択すると、下記の API テーブルが更新されます。",options:{title:"登録オプション",registerWithValidation:"バリデーションのみで登録",registerWithValidationMessage:"バリデーションとエラーメッセージで登録",note:function(e){return l.createElement(l.Fragment,null,l.createElement("h2",{className:s.a.title},"カスタム登録"),l.createElement("p",null,"また、input を手動で登録 (manual ",l.createElement("code",null,"register"),") することもできます。 これは、カスタムコンポーネントを操作していて"," ",l.createElement("code",null,"Ref")," にアクセスできない場合に便利です。 React Native や"," ",l.createElement("a",{href:"https://github.com/JedWatson/react-select",target:"_blank",rel:"noopener noreferrer"},"react-select")," ","のようなカスタムコンポーネントを使用している場合がこれに該当します。"),l.createElement("p",null,"カスタム登録を使用すると、 input の ref は登録されていないため、"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","で入力値を更新する必要があります。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ","値の更新中に、カスタム登録した input で再レンダリングをトリガーしたい場合は、 登録した input に type 属性を指定する必要があります。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"register({ name: 'firstName', type: 'custom' }, { required: true, min: 8 })")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"Nota:")," multiple radio inputs with the same name, you want to register the validation to the last input so the hook understand validate them as a group at the end."))}},validation:{required:l.createElement(l.Fragment,null,"Boolean の値。true の場合、フォームを送信する前に入力値が必須であることを示します。",l.createElement("code",null,"errors")," ","オブジェクトにエラーメッセージを返す文字列を割り当てることができます。"),maxLength:"input が受け付ける最大文字数。",minLength:"input が取りうる妥当と判断される最小文字数。",max:"input が受け付ける最大数。",min:"input が取りうる妥当と判断される最小数。",pattern:"input の内容が一致する必要がある正規表現。",validate:"引数として、単一のバリデーションを行うためにはコールバック関数を渡すことができ、複数のバリデーションを行うためにはコールバック関数のオブジェクトを渡すことができます。 (例を参照)"}},formState:{title:"formState",description:l.createElement(l.Fragment,null,l.createElement("p",null,"このオブジェクトには、フォームの状態に関する情報が含まれています。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要:")," ",l.createElement("code",null,"formState")," ","はレンダリングパフォーマンスの改善のために"," ",l.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},"Proxy")," ","にラップされているので、状態の更新を有効にするには、",l.createElement("code",null,"render")," 前に ",l.createElement("code",null,"formState")," ","を呼び出すか、読み込む必要があります。 この再レンダリング機能の削減機能は、Webプラットフォームにのみ適用されます。 React Nativeでの",l.createElement("code",null,"Proxy"),"のサポートについて。")),dirty:"ユーザが入力操作した後 true に設定します。",dirtyFields:l.createElement(l.Fragment,null,"ユーザーが変更したフィールドの一意の ",l.createElement("code",null,"Set")," オブジェクト。"),isSubmitted:"ユーザーがフォームを送信した後 true に設定します。フォームの送信後、その状態は、resetメソッドで呼び出されるまで送信されたままになります。",touched:l.createElement(l.Fragment,null,"操作された全ての input の ",l.createElement("code",null,"name")," の配列。"),isSubmitting:l.createElement(l.Fragment,null,"フォームの送信中は ",l.createElement("code",null,"true")," に設定し、 フォームの送信後は"," ",l.createElement("code",null,"false")," に設定します。"),submitCount:"フォームの送信回数。",isValid:"エラーがない場合は true に設定します。"},errors:{title:"errors",description:function(e){return l.createElement(l.Fragment,null,l.createElement("p",null,"オブジェクトには、各 input"," ","のフォームのエラーまたはエラーメッセージが含まれています。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},o.a.note[e],":")," ","V3 と V4 の違い:"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"V4: ネストされたオブジェクト"),l.createElement("p",null,l.createElement("strong",null,"理由:")," Optional chaining"," ","はコミュニティの間でより一般的になり、型のサポートが向上するため。"),l.createElement("p",null,l.createElement("code",null,"errors?.yourDetail?.firstName;"))),l.createElement("li",null,l.createElement("p",null,"V3: フラットなオブジェクト"),l.createElement("p",null,l.createElement("strong",null,"理由:")," エラーがシンプルでアクセスしやすいため。"),l.createElement("p",null,l.createElement("code",null,"errors['yourDetail.firstName'];")))))},types:l.createElement(l.Fragment,null,"これは、単一のフィールドで複数のエラーを返す必要がある、 パスワードのルールのような input のバリデーションに役立ちます。 この機能を有効にするには、 ",l.createElement("code",null,"validateCriteriaMode: 'all'")," ","を設定してください。"),message:"メッセージはデフォルトでは空文字です。ただし、バリデーションとエラーメッセージで登録するとエラーメッセージが返されます。",ref:"input 要素の参照。"},watch:{title:"watch",description:l.createElement(l.Fragment,null,l.createElement("p",null,"これは指定された input/inputs を監視し、その値を返します。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"defaultValue")," が定義されていない場合、",l.createElement("code",null,"watch")," の初回のレンダリングは ",l.createElement("code",null,"register")," ","の前に呼び出されるため ",l.createElement("code",null,"undefined")," を返しますが、 第2引数として ",l.createElement("code",null,"defaultValue")," ","を設定して値を返すことができます。")),l.createElement("li",null,l.createElement("p",null,"ただし、引数として ",l.createElement("code",null,"useForm")," で"," ",l.createElement("code",null,"defaultValues")," が初期化された場合、 初回のレンダリングは ",l.createElement("code",null,"defaultValues")," ","で指定された値を返します。")))),tableTitle:{single:l.createElement(l.Fragment,null,"input の値を name から監視します (lodash の"," ",l.createElement("a",{target:"_blank",rel:"noreferrer noopener",href:"https://lodash.com/docs/4.17.15#get"},"get")," ","関数に似ています)"),multiple:"複数の input を監視します",all:"全ての input を監視します",nest:"すべての入力を監視し、ネストされたオブジェクトを返します"}},handleSubmit:{title:"handleSubmit",description:l.createElement(l.Fragment,null,l.createElement("p",null,"この関数は、フォームバリデーションに成功するとフォームデータを渡します。また、リモートで呼び出すこともできます。"),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(onSubmit)()")),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ","非同期バリデーションのための ",l.createElement("code",null,"async")," ","関数を渡すことができます。例："," "),l.createElement("p",null,l.createElement("code",{className:s.a.codeBlock},"handleSubmit(async (data) => await fetchAPI(data))")))},reset:function(e){return{title:"reset",description:l.createElement(l.Fragment,null,l.createElement("p",null,"この関数は、フォーム内のフィールドの値とエラーをリセット (",l.createElement("code",null,"reset"),") します。",l.createElement("code",null,"omitResetState"),"を指定することにより、次のことができます。 特定の状態のみをリセットします。 省略可能な引数として"," ",l.createElement("code",null,"values")," を渡すと、 割り当てられたデフォルト値でフォームをリセットできます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ",l.createElement("code",null,"ref")," ","を公開しない ",l.createElement("code",null,"React-Select")," ","のような制御されたコンポーネントの場合は、"," ","手動で入力値をリセットするために"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("setValue")}},"setValue")," ","を使用するか、"," ",l.createElement("button",{className:d.a.codeAsLink,onClick:function(){return e("Controller")}},"Controller")," ","コンポーネントを使用して制御されたコンポーネントをラップする必要があります。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ",l.createElement("code",null,"Controller")," コンポーネントの値をリセットするには、",l.createElement("code",null,"useForm")," に ",l.createElement("code",null,"defaultValues")," ","を指定する必要があります。"))}},setError:{title:"setError",description:l.createElement(l.Fragment,null,l.createElement("p",null,"単一または複数の input のエラーを手動で設定できます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","このメソッドはエラーを保存せず、フォームの送信をブロックしません。 非同期バリデーション後にユーザーへエラーをフィードバックしたい場合は、"," ",l.createElement("code",null,"handleSubmit")," 関数内で使用してください。"))},clearError:{title:"clearError",description:l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"undefined"),": 全てのエラーをリセット")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string"),": 単一のエラーをリセット")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"string[]"),": 複数のエラーをリセット")))},setValue:{title:"setValue",description:l.createElement(l.Fragment,null,l.createElement("p",null,"この関数を使用すると、input/select の値を動的に設定できます。 setValue は不要な再レンダリングを避けようとしますが、 以下の条件でのみ再レンダリングをトリガーします。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"値の更新によってエラーがトリガーされるとき")),l.createElement("li",null,l.createElement("p",null,"値の更新によってエラーが修正されるとき")),l.createElement("li",null,l.createElement("p",null,"setValue が初めて実行され、 formState の ",l.createElement("code",null,"dirty")," が true に設定されたとき")),l.createElement("li",null,l.createElement("p",null,"setValue が実行され、 formState の ",l.createElement("code",null,"touched")," ","が更新されたとき"))),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ","このメソッドを呼び出すことで、",l.createElement("code",null,"formState")," は input の ",l.createElement("code",null,"name")," を"," ",l.createElement("code",null,"touched")," にプッシュします。"),l.createElement("p",null,l.createElement("code",null,"shouldValidate")," を ",l.createElement("code",null,"true")," に設定すると、 フィールドのバリデーションがトリガーされます。 例："," ",l.createElement("code",null,"setValue('name', 'value', true)")))},getValues:{title:"getValues",description:l.createElement(l.Fragment,null,l.createElement("p",null,"この関数は、フォーム全体のデータを返します。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"デフォルトでは、",l.createElement("code",null,"getValues()")," ","はフォームデータをフラットな構造で返します。 例："," ",l.createElement("code",null,"{ test: 'data', test1: 'data1'}"))),l.createElement("li",null,l.createElement("p",null,"定義されたフォームフィールドで、",l.createElement("code",null,"getValues(","{ nest: true }",")")," は input の"," ",l.createElement("code",null,"name")," ","属性に基づいてネストされた構造でデータを返します。 例："," ",l.createElement("code",null,"{ test: [1, 2], test1: { data: '23' } }")))))},triggerValidation:{title:"triggerValidation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"フォームで input/select のバリデーションを手動でトリガーします。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ","バリデーションが失敗すると、",l.createElement("code",null,"errors")," ","オブジェクトが更新されます。"))},validationSchema:{title:"validationSchema",description:l.createElement("p",null,"外部バリデーションスキーマでバリデーションルールを一元管理したい場合は、 省略可能な引数として ",l.createElement("code",null,"useForm")," に"," ",l.createElement("code",null,"validationSchema")," を適用できます。 React Hook Form は現在、オブジェクトスキーマバリデーションで"," ",l.createElement("a",{className:d.a.links,href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},"Yup")," ","をサポートしています。")},Controller:{title:"Controller",table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"input のユニークな name 。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null,"✓"),l.createElement("td",null,"制御されたコンポーネント。 例: ",l.createElement("code",null,'as="input"')," または"," ",l.createElement("code",null,"as={<TextInput />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"control")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null,"✓"),l.createElement("td",null,l.createElement("code",null,"control")," オブジェクトは ",l.createElement("code",null,"useForm")," ","から呼び出されます。 ただし、 FormContext を使用している場合は省略できます。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"defaultValue")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"any")),l.createElement("td",null),l.createElement("td",null,"非制御コンポーネントの ",l.createElement("code",null,"defaultValue")," と同じですが、"," ",l.createElement("code",null,"boolean")," 値を指定すると、チェックボックスの input として扱われます。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ",l.createElement("code",null,"useForm")," で ",l.createElement("code",null,"defaultValue")," または"," ",l.createElement("code",null,"defaultValues")," のどちらかを指定する必要があります。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","フォーム内でデフォルト値を引数として ",l.createElement("code",null,"reset")," ","を呼び出す場合、 インラインの ",l.createElement("code",null,"defaultValue")," ","を設定する代わりに、 useForm で ",l.createElement("code",null,"defaultValues")," ","を指定する必要があります。"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"rules")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"Object")),l.createElement("td",null),l.createElement("td",null,l.createElement("code",null,"register")," によるバリデーションルール。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChange")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(args: any | EventTarget) => any")),l.createElement("td",null),l.createElement("td",null,"この prop を使用すると、戻り値をカスタマイズすることができます。 外部 UI コンポーネントの ",l.createElement("code",null,"value")," prop"," ","の形状を確認してください。 ペイロードの形状が ",l.createElement("code",null,"type")," ","属性を含むオブジェクトの場合、",l.createElement("code",null,"value")," または"," ",l.createElement("code",null,"checked")," 属性が読み込まれます。",l.createElement(c.b,{withOutCopy:!0,rawData:"onChange={{([ event ]) => event.target.value}}\nonChange={{([ { checked } ]) => ({ checked })}}"}))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onChangeName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"この prop"," ","を使用すると、特定のイベント名をターゲットにすることができます。 例えば、 ",l.createElement("code",null,"onChange")," イベントが ",l.createElement("code",null,"onTextChange")," ","と命名されている場合。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onFocus")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"() => void")),l.createElement("td",null),l.createElement("td",null,l.createElement("p",null,"This callback allows the custom hook to focus on the input when there is an error. This function is applicable for both React and React-Native components as long as they can be focused."),l.createElement("p",null,"Here is a"," ",l.createElement("a",{href:"https://codesandbox.io/s/react-hook-form-controller-auto-focus-5tru5",target:"_blank",rel:"noopener noreferrer"},"working example with MUI"),"."))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"onBlurName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"この prop"," ","を使用すると、特定のイベント名をターゲットにすることができます。 例えば、 ",l.createElement("code",null,"onBlur")," イベントが ",l.createElement("code",null,"onTextBlur")," ","と命名されている場合。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"valueName")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"この prop を使用すると、",l.createElement("code",null,"value")," prop をオーバーライドし、",l.createElement("code",null,"value")," prop を使用しない他のコンポーネントをサポートできます。 例えば、"," ",l.createElement("code",null,"checked"),", ",l.createElement("code",null,"selected")," 等..."))),description:l.createElement(l.Fragment,null,l.createElement("p",null,"React Hook Form は、非制御コンポーネントとネイティブ HTML input"," ","をサポートしていますが、"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JedWatson/react-select"},"React-Select")," ","や"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ant-design/ant-design"},"AntD")," ","、"," ",l.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:"https://material-ui.com/"},"Material-UI"),"などの外部の制御された UI"," ","コンポーネントライブラリと組み合わせての使用​​を避けることは難しいです。 このラッパーコンポーネントにより、制御されたコンポーネントと組み合わせて簡単に使用​​できるようになります。"),l.createElement("p",null,"Controllerコンポーネントへ渡す全ての props は、",l.createElement("code",null,"as")," prop で指定した Component インスタンスに転送されます。 つまり、",l.createElement("code",null,"label")," prop を必要とするカスタム"," ",l.createElement("code",null,"Switch")," コンポーネントがあるとします。 この"," ",l.createElement("code",null,"label")," prop を Controller"," ","コンポーネントに直接渡すことができます。",l.createElement("code",null,"name")," prop"," ","は、主に後でフォームから値にアクセスするために使用されます。"))},useFormContext:{title:"useFormContext",introduction:l.createElement("p",null,"フォームコンテキストは、コンポーネントツリーに深くネストされた input があり、 メソッドを ",l.createElement("code",null,"props")," ","として深く渡すことが苦痛になる場合の問題を解決することを目的としています。"),description:l.createElement(l.Fragment,null,l.createElement("p",null,"フォームが ",l.createElement("code",null,"FormContext")," でラップされると、 ラップされた子コンポーネントで ",l.createElement("code",null,"useFormContext")," を使用して"," ",l.createElement("code",{className:s.a.typeText},"function")," ","を呼び出すことができます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意：")," ",l.createElement("code",null,"useFormContext")," を呼び出すと全ての ",l.createElement("code",null,"useForm")," ","フック関数が得られます。"))},control:{title:"control",description:l.createElement("p",null,"このオブジェクトは、 React Hook Form の Controller"," ","コンポーネント用に作成され、 React Hook Form"," ","に制御されたコンポーネントを登録するためのメソッドが含まれています。")},ErrorMessage:{title:"ErrorMessage",description:l.createElement("p",null,"関連する input"," ","のエラーメッセージを表示するためのシンプルなコンポーネント。"),table:l.createElement("tbody",null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"name")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null,"✓"),l.createElement("td",null,"関連するフィールド名")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"errors")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"object")),l.createElement("td",null,"✓"),l.createElement("td",null,"React Hook Form の ",l.createElement("code",null,"errors")," オブジェクト")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"message")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"string")),l.createElement("td",null),l.createElement("td",null,"インラインエラーメッセージ。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"as")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"React.ElementType | string")),l.createElement("td",null),l.createElement("td",null,"ラッパーコンポーネント、または HTML タグ。 例:"," ",l.createElement("code",null,'as="span"')," または ",l.createElement("code",null,"as={<Text />}"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"children")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(","{ message: string, messages?: string[]}",") => any")),l.createElement("td",null),l.createElement("td",null,"これは、単一または複数のエラーメッセージをレンダリングするための"," ",l.createElement("a",{href:"https://reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"},"render prop")," ","です。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ",l.createElement("code",null,"messages")," を使用するためには、 validateCriteriaMode を"," ","'all' に設定する必要があります。"))))},NativeValidation:{title:"Browser built-in validation",description:l.createElement(l.Fragment,null,l.createElement("p",null,"下記の例は、ブラウザバリデーションを活用する方法を示しています。",l.createElement("code",null,"nativeValidation")," を ",l.createElement("code",null,"true")," に設定するだけで、 残りの構文は標準のバリデーションと同じになります。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意"),": この機能は使用率が低いため V4 で削除されましたが、 V3"," ","では引き続き使用できます。"))},useFieldArray:{title:"useFieldArray",description:l.createElement(l.Fragment,null,l.createElement("p",null,"フィールド配列（動的な複数の input）を操作するためのカスタムフック。 このフックの背後にある動機は、より良いユーザーエクスペリエンスとフォームのパフォーマンスを提供することです。",l.createElement("a",{href:"https://www.youtube.com/watch?v=Q7lrHuUfgIs",target:"_blank",rel:"noopener noreferrer"},"この短いビデオ"),"で、制御されたフィールド配列と非制御フィールド配列を比較できます。"),l.createElement("p",null,"このフックは、次のオブジェクトと関数を提供します。"),l.createElement(c.b,{rawData:m.a}),l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要:")," ",l.createElement("code",null,"useFieldArray")," ","は非制御コンポーネントに基づいて構築されます。 下記の注意事項は、実装時の動作を理解し、注意するのに役立ちます。"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"useForm")," フックで ",l.createElement("code",null,"defaultValues")," ","を指定することにより、 ",l.createElement("code",null,"fields")," ","配列に値を格納することができます。")),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"fields")," オブジェクトから ",l.createElement("code",null,"id")," ","をコンポーネントの ",l.createElement("code",null,"key")," ","に割り当てていることを確認してください。")),l.createElement("li",null,l.createElement("p",null,"必ず",l.createElement("code",null,"defaultValue"),"をに設定してください",l.createElement("code",null,"fields[index]"),"デフォルト値を設定する場合、 入力で削除またはリセットします。")),l.createElement("li",null,l.createElement("p",null,"次々とアクションを呼び出すことはできません。アクションはレンダリングごとにトリガーする必要があります。"),l.createElement(c.b,{withOutCopy:!0,rawData:"// ❌ The following is not correct\nhandleChange={() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n  append({ test: 'test' });\n}}\n\n// ✅ The following is correct and second action is triggered after next render\nhandleChange={() => {\n  append({ test: 'test' });\n}}\n\nReact.useEffect(() => {\n  if (fields.length === 2) {\n    remove(0);\n  }\n}, fields)\n            "})),l.createElement("li",null,l.createElement("p",null,l.createElement("code",null,"useFieldArray")," を使用する際には、",l.createElement("code",null,"ref={register}")," ではなく"," ",l.createElement("code",null,"ref={register()}")," を適用して、 ",l.createElement("code",null,"map")," ","中に ",l.createElement("code",null,"register")," が呼び出されるようにすることが",l.createElement("strong",null,"重要"),"です。")),l.createElement("li",null,l.createElement("code",null,"useEffect"),"のカスタムレジスタでは機能しません。"))),table:l.createElement(l.Fragment,null,l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"fields")),l.createElement("td",{width:320},l.createElement("code",{className:s.a.typeText},"object & ","{ id: string }")),l.createElement("td",null,"このオブジェクトは、input をマップおよびレンダリングするための信頼できる情報源です。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"重要:")," 各 input"," ","は制御することができないため、 マップされたコンポーネントには"," ",l.createElement("code",null,"id")," が必須です。 これは、React"," ","が変更、追加もしくは削除されたのかを識別するのに役立ちます。"),l.createElement("p",null,"eg: ",l.createElement("code",null,"{fields.map(d => <input key={d.id} />)}")))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"append")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"フィールドの最後に input を追加します。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"prepend")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(obj: object | object[]) => void")),l.createElement("td",null,"フィールドの先頭に input を追加します。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"insert")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index: number, value: object) => void")),l.createElement("td",null,"特定の位置に input を挿入します。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"swap")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"input の位置を入れ替えます。")),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"move")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(from: number, to: number) => void")),l.createElement("td",null,"input を別の位置に移動します。",l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ",l.createElement("code",null,"move")," ","と ",l.createElement("code",null,"swap")," の違いは、",l.createElement("code",null,"move")," を呼び出し続けると input"," ","が円を描いて押し込まれるのに対して、",l.createElement("code",null,"swap")," は2つの input の位置を変更するだけです。"))),l.createElement("tr",null,l.createElement("td",null,l.createElement("code",null,"remove")),l.createElement("td",null,l.createElement("code",{className:s.a.typeText},"(index?: number | number[]) => void")),l.createElement("td",null,"特定の位置の input を削除します。引数で index を渡さない場合は全ての"," ","input を削除します。")))},validationResolver:{title:"validationResolver",description:l.createElement(l.Fragment,null,l.createElement("p",null,"この関数を使用すると、",l.createElement("a",{href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},"Joi"),"、",l.createElement("a",{href:"https://github.com/ianstormtaylor/superstruct",target:"_blank",rel:"noopener noreferrer"},"Superstruct")," ","などの任意の外部のバリデーションメソッドを実行できます。 実際には、Yup"," ","を外部の（スキーマ）バリデーションライブラリとして制限するだけがゴールではありません。 私たちは React Hook Form"," ","で動作する多くのバリデーションライブラリをサポートしたいと思っています。 カスタムバリデーションロジックを作成して検証することもできます。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ",l.createElement("code",null,"values")," と"," ",l.createElement("code",null,"errors")," ","を含むオブジェクトを返していることを確認してください。 デフォルト値は空のオブジェクト ",l.createElement("code",null,"{}")," ","である必要があります。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," 返す"," ",l.createElement("code",null,"errors")," オブジェクトのキーは、フォーム内の input（",l.createElement("code",null,"name"),"属性）に関連させる必要があります。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," この関数は"," ",l.createElement("code",null,"validationSchema")," ","と同様にカスタムフック内にキャッシュされますが、"," ",l.createElement("code",null,"validationContext")," ","は再レンダリングのたびに変更できるミュータブルなオブジェクトです。"),l.createElement("p",null,l.createElement("b",{className:s.a.note},"注意:")," ","ライブラリ自体が特定のフィールドに対してエラーオブジェクトを評価し、 それに応じて再レンダリングをトリガーするため、ユーザーの入力中、一度に一つのフィールドでのみ"," ","input の再検証が発生します。"))}}}}]);
//# sourceMappingURL=5429529d610b7f56bb3db39e9b195ae70d2c1bb1-c4bd1a854307a4aa519c.js.map